
/* This source file contains a Verilog description of an IP core     
 * automatically generated by the RPN HDL Generator.                                        
 *                                                                                          
 * This product includes a hardware design developed by University of Southern California.  
 *                                                                                          
 * Copyright (c) 2012-2016 by Ren Chen for the RPN Project,                                 
 * University of Southern California.                                                       
 *                                                                                          
 * This design is provided for internal, non-commercial research use only                   
 * and is not for redistribution, with or without modifications.                            
 *                                                                                          
 * You may not use the name "University of Southern California" or derivations            
 * thereof to endorse or promote products derived from this software.                       
 *                                                                                          
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER              
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY                 
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY                
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,                 
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY                
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,                
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN                  
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,                
 * CONTRACT, TORT OR OTHERWISE).                                                            
 *                                                                                          
 *                                                                                          
*/                                                                                         
 
module s10_switches_stage_st0_0_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [32-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_16(.inData_0(wireIn[32]), .inData_1(wireIn[33]), .outData_0(wireOut[32]), .outData_1(wireOut[33]), .ctrl(ctrl[16]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_17(.inData_0(wireIn[34]), .inData_1(wireIn[35]), .outData_0(wireOut[34]), .outData_1(wireOut[35]), .ctrl(ctrl[17]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_18(.inData_0(wireIn[36]), .inData_1(wireIn[37]), .outData_0(wireOut[36]), .outData_1(wireOut[37]), .ctrl(ctrl[18]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_19(.inData_0(wireIn[38]), .inData_1(wireIn[39]), .outData_0(wireOut[38]), .outData_1(wireOut[39]), .ctrl(ctrl[19]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_20(.inData_0(wireIn[40]), .inData_1(wireIn[41]), .outData_0(wireOut[40]), .outData_1(wireOut[41]), .ctrl(ctrl[20]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_21(.inData_0(wireIn[42]), .inData_1(wireIn[43]), .outData_0(wireOut[42]), .outData_1(wireOut[43]), .ctrl(ctrl[21]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_22(.inData_0(wireIn[44]), .inData_1(wireIn[45]), .outData_0(wireOut[44]), .outData_1(wireOut[45]), .ctrl(ctrl[22]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_23(.inData_0(wireIn[46]), .inData_1(wireIn[47]), .outData_0(wireOut[46]), .outData_1(wireOut[47]), .ctrl(ctrl[23]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_24(.inData_0(wireIn[48]), .inData_1(wireIn[49]), .outData_0(wireOut[48]), .outData_1(wireOut[49]), .ctrl(ctrl[24]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_25(.inData_0(wireIn[50]), .inData_1(wireIn[51]), .outData_0(wireOut[50]), .outData_1(wireOut[51]), .ctrl(ctrl[25]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_26(.inData_0(wireIn[52]), .inData_1(wireIn[53]), .outData_0(wireOut[52]), .outData_1(wireOut[53]), .ctrl(ctrl[26]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_27(.inData_0(wireIn[54]), .inData_1(wireIn[55]), .outData_0(wireOut[54]), .outData_1(wireOut[55]), .ctrl(ctrl[27]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_28(.inData_0(wireIn[56]), .inData_1(wireIn[57]), .outData_0(wireOut[56]), .outData_1(wireOut[57]), .ctrl(ctrl[28]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_29(.inData_0(wireIn[58]), .inData_1(wireIn[59]), .outData_0(wireOut[58]), .outData_1(wireOut[59]), .ctrl(ctrl[29]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_30(.inData_0(wireIn[60]), .inData_1(wireIn[61]), .outData_0(wireOut[60]), .outData_1(wireOut[61]), .ctrl(ctrl[30]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_31(.inData_0(wireIn[62]), .inData_1(wireIn[63]), .outData_0(wireOut[62]), .outData_1(wireOut[63]), .ctrl(ctrl[31]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_ctrl_rom_dp64_st0_per0L(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [31:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 32'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 32'b00000000000000000000000000000000; 
          4'b0001: data <= 32'b00000000000000000000000000000000; 
          4'b0010: data <= 32'b00000000000000000000000000000000; 
          4'b0011: data <= 32'b00000000000000000000000000000000; 
          4'b0100: data <= 32'b00000000000000000000000000000000; 
          4'b0101: data <= 32'b00000000000000000000000000000000; 
          4'b0110: data <= 32'b00000000000000000000000000000000; 
          4'b0111: data <= 32'b00000000000000000000000000000000; 
          4'b1000: data <= 32'b11111111111111111111111111111111; 
          4'b1001: data <= 32'b11111111111111111111111111111111; 
          4'b1010: data <= 32'b11111111111111111111111111111111; 
          4'b1011: data <= 32'b11111111111111111111111111111111; 
          4'b1100: data <= 32'b11111111111111111111111111111111; 
          4'b1101: data <= 32'b11111111111111111111111111111111; 
          4'b1110: data <= 32'b11111111111111111111111111111111; 
          4'b1111: data <= 32'b11111111111111111111111111111111; 
          default: data <= 32'b0; 
        endcase
    end
  end                              

endmodule                        


module s10_switch_ctrl_dp64_st0_per0L(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [31:0] ctrl_out;        
  
  reg [3:0] addr;        
  reg state;        
  
  s10_ctrl_rom_dp64_st0_per0L s8_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 4'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 4'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {4{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s10_wireCon_dp64_st0_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[2];    
  assign wireOut[2] = wireIn[4];    
  assign wireOut[3] = wireIn[6];    
  assign wireOut[4] = wireIn[8];    
  assign wireOut[5] = wireIn[10];    
  assign wireOut[6] = wireIn[12];    
  assign wireOut[7] = wireIn[14];    
  assign wireOut[8] = wireIn[16];    
  assign wireOut[9] = wireIn[18];    
  assign wireOut[10] = wireIn[20];    
  assign wireOut[11] = wireIn[22];    
  assign wireOut[12] = wireIn[24];    
  assign wireOut[13] = wireIn[26];    
  assign wireOut[14] = wireIn[28];    
  assign wireOut[15] = wireIn[30];    
  assign wireOut[16] = wireIn[32];    
  assign wireOut[17] = wireIn[34];    
  assign wireOut[18] = wireIn[36];    
  assign wireOut[19] = wireIn[38];    
  assign wireOut[20] = wireIn[40];    
  assign wireOut[21] = wireIn[42];    
  assign wireOut[22] = wireIn[44];    
  assign wireOut[23] = wireIn[46];    
  assign wireOut[24] = wireIn[48];    
  assign wireOut[25] = wireIn[50];    
  assign wireOut[26] = wireIn[52];    
  assign wireOut[27] = wireIn[54];    
  assign wireOut[28] = wireIn[56];    
  assign wireOut[29] = wireIn[58];    
  assign wireOut[30] = wireIn[60];    
  assign wireOut[31] = wireIn[62];    
  assign wireOut[32] = wireIn[1];    
  assign wireOut[33] = wireIn[3];    
  assign wireOut[34] = wireIn[5];    
  assign wireOut[35] = wireIn[7];    
  assign wireOut[36] = wireIn[9];    
  assign wireOut[37] = wireIn[11];    
  assign wireOut[38] = wireIn[13];    
  assign wireOut[39] = wireIn[15];    
  assign wireOut[40] = wireIn[17];    
  assign wireOut[41] = wireIn[19];    
  assign wireOut[42] = wireIn[21];    
  assign wireOut[43] = wireIn[23];    
  assign wireOut[44] = wireIn[25];    
  assign wireOut[45] = wireIn[27];    
  assign wireOut[46] = wireIn[29];    
  assign wireOut[47] = wireIn[31];    
  assign wireOut[48] = wireIn[33];    
  assign wireOut[49] = wireIn[35];    
  assign wireOut[50] = wireIn[37];    
  assign wireOut[51] = wireIn[39];    
  assign wireOut[52] = wireIn[41];    
  assign wireOut[53] = wireIn[43];    
  assign wireOut[54] = wireIn[45];    
  assign wireOut[55] = wireIn[47];    
  assign wireOut[56] = wireIn[49];    
  assign wireOut[57] = wireIn[51];    
  assign wireOut[58] = wireIn[53];    
  assign wireOut[59] = wireIn[55];    
  assign wireOut[60] = wireIn[57];    
  assign wireOut[61] = wireIn[59];    
  assign wireOut[62] = wireIn[61];    
  assign wireOut[63] = wireIn[63];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_switches_stage_st1_0_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [32-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_16(.inData_0(wireIn[32]), .inData_1(wireIn[33]), .outData_0(wireOut[32]), .outData_1(wireOut[33]), .ctrl(ctrl[16]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_17(.inData_0(wireIn[34]), .inData_1(wireIn[35]), .outData_0(wireOut[34]), .outData_1(wireOut[35]), .ctrl(ctrl[17]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_18(.inData_0(wireIn[36]), .inData_1(wireIn[37]), .outData_0(wireOut[36]), .outData_1(wireOut[37]), .ctrl(ctrl[18]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_19(.inData_0(wireIn[38]), .inData_1(wireIn[39]), .outData_0(wireOut[38]), .outData_1(wireOut[39]), .ctrl(ctrl[19]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_20(.inData_0(wireIn[40]), .inData_1(wireIn[41]), .outData_0(wireOut[40]), .outData_1(wireOut[41]), .ctrl(ctrl[20]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_21(.inData_0(wireIn[42]), .inData_1(wireIn[43]), .outData_0(wireOut[42]), .outData_1(wireOut[43]), .ctrl(ctrl[21]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_22(.inData_0(wireIn[44]), .inData_1(wireIn[45]), .outData_0(wireOut[44]), .outData_1(wireOut[45]), .ctrl(ctrl[22]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_23(.inData_0(wireIn[46]), .inData_1(wireIn[47]), .outData_0(wireOut[46]), .outData_1(wireOut[47]), .ctrl(ctrl[23]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_24(.inData_0(wireIn[48]), .inData_1(wireIn[49]), .outData_0(wireOut[48]), .outData_1(wireOut[49]), .ctrl(ctrl[24]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_25(.inData_0(wireIn[50]), .inData_1(wireIn[51]), .outData_0(wireOut[50]), .outData_1(wireOut[51]), .ctrl(ctrl[25]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_26(.inData_0(wireIn[52]), .inData_1(wireIn[53]), .outData_0(wireOut[52]), .outData_1(wireOut[53]), .ctrl(ctrl[26]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_27(.inData_0(wireIn[54]), .inData_1(wireIn[55]), .outData_0(wireOut[54]), .outData_1(wireOut[55]), .ctrl(ctrl[27]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_28(.inData_0(wireIn[56]), .inData_1(wireIn[57]), .outData_0(wireOut[56]), .outData_1(wireOut[57]), .ctrl(ctrl[28]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_29(.inData_0(wireIn[58]), .inData_1(wireIn[59]), .outData_0(wireOut[58]), .outData_1(wireOut[59]), .ctrl(ctrl[29]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_30(.inData_0(wireIn[60]), .inData_1(wireIn[61]), .outData_0(wireOut[60]), .outData_1(wireOut[61]), .ctrl(ctrl[30]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_31(.inData_0(wireIn[62]), .inData_1(wireIn[63]), .outData_0(wireOut[62]), .outData_1(wireOut[63]), .ctrl(ctrl[31]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_ctrl_rom_dp64_st1_per0L(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [31:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 32'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 32'b00000000000000000000000000000000; 
          4'b0001: data <= 32'b00000000000000000000000000000000; 
          4'b0010: data <= 32'b00000000000000000000000000000000; 
          4'b0011: data <= 32'b00000000000000000000000000000000; 
          4'b0100: data <= 32'b00000000000000000000000000000000; 
          4'b0101: data <= 32'b00000000000000000000000000000000; 
          4'b0110: data <= 32'b00000000000000000000000000000000; 
          4'b0111: data <= 32'b00000000000000000000000000000000; 
          4'b1000: data <= 32'b11111111111111111111111111111111; 
          4'b1001: data <= 32'b11111111111111111111111111111111; 
          4'b1010: data <= 32'b11111111111111111111111111111111; 
          4'b1011: data <= 32'b11111111111111111111111111111111; 
          4'b1100: data <= 32'b11111111111111111111111111111111; 
          4'b1101: data <= 32'b11111111111111111111111111111111; 
          4'b1110: data <= 32'b11111111111111111111111111111111; 
          4'b1111: data <= 32'b11111111111111111111111111111111; 
          default: data <= 32'b0; 
        endcase
    end
  end                              

endmodule                        


module s10_switch_ctrl_dp64_st1_per0L(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [31:0] ctrl_out;        
  
  reg [3:0] addr;        
  reg state;        
  
  s10_ctrl_rom_dp64_st1_per0L s8_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 4'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 4'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {4{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s10_wireCon_dp64_st1_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[2];    
  assign wireOut[2] = wireIn[4];    
  assign wireOut[3] = wireIn[6];    
  assign wireOut[4] = wireIn[8];    
  assign wireOut[5] = wireIn[10];    
  assign wireOut[6] = wireIn[12];    
  assign wireOut[7] = wireIn[14];    
  assign wireOut[8] = wireIn[16];    
  assign wireOut[9] = wireIn[18];    
  assign wireOut[10] = wireIn[20];    
  assign wireOut[11] = wireIn[22];    
  assign wireOut[12] = wireIn[24];    
  assign wireOut[13] = wireIn[26];    
  assign wireOut[14] = wireIn[28];    
  assign wireOut[15] = wireIn[30];    
  assign wireOut[16] = wireIn[1];    
  assign wireOut[17] = wireIn[3];    
  assign wireOut[18] = wireIn[5];    
  assign wireOut[19] = wireIn[7];    
  assign wireOut[20] = wireIn[9];    
  assign wireOut[21] = wireIn[11];    
  assign wireOut[22] = wireIn[13];    
  assign wireOut[23] = wireIn[15];    
  assign wireOut[24] = wireIn[17];    
  assign wireOut[25] = wireIn[19];    
  assign wireOut[26] = wireIn[21];    
  assign wireOut[27] = wireIn[23];    
  assign wireOut[28] = wireIn[25];    
  assign wireOut[29] = wireIn[27];    
  assign wireOut[30] = wireIn[29];    
  assign wireOut[31] = wireIn[31];    
  assign wireOut[32] = wireIn[32];    
  assign wireOut[33] = wireIn[34];    
  assign wireOut[34] = wireIn[36];    
  assign wireOut[35] = wireIn[38];    
  assign wireOut[36] = wireIn[40];    
  assign wireOut[37] = wireIn[42];    
  assign wireOut[38] = wireIn[44];    
  assign wireOut[39] = wireIn[46];    
  assign wireOut[40] = wireIn[48];    
  assign wireOut[41] = wireIn[50];    
  assign wireOut[42] = wireIn[52];    
  assign wireOut[43] = wireIn[54];    
  assign wireOut[44] = wireIn[56];    
  assign wireOut[45] = wireIn[58];    
  assign wireOut[46] = wireIn[60];    
  assign wireOut[47] = wireIn[62];    
  assign wireOut[48] = wireIn[33];    
  assign wireOut[49] = wireIn[35];    
  assign wireOut[50] = wireIn[37];    
  assign wireOut[51] = wireIn[39];    
  assign wireOut[52] = wireIn[41];    
  assign wireOut[53] = wireIn[43];    
  assign wireOut[54] = wireIn[45];    
  assign wireOut[55] = wireIn[47];    
  assign wireOut[56] = wireIn[49];    
  assign wireOut[57] = wireIn[51];    
  assign wireOut[58] = wireIn[53];    
  assign wireOut[59] = wireIn[55];    
  assign wireOut[60] = wireIn[57];    
  assign wireOut[61] = wireIn[59];    
  assign wireOut[62] = wireIn[61];    
  assign wireOut[63] = wireIn[63];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_switches_stage_st2_0_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [32-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_16(.inData_0(wireIn[32]), .inData_1(wireIn[33]), .outData_0(wireOut[32]), .outData_1(wireOut[33]), .ctrl(ctrl[16]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_17(.inData_0(wireIn[34]), .inData_1(wireIn[35]), .outData_0(wireOut[34]), .outData_1(wireOut[35]), .ctrl(ctrl[17]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_18(.inData_0(wireIn[36]), .inData_1(wireIn[37]), .outData_0(wireOut[36]), .outData_1(wireOut[37]), .ctrl(ctrl[18]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_19(.inData_0(wireIn[38]), .inData_1(wireIn[39]), .outData_0(wireOut[38]), .outData_1(wireOut[39]), .ctrl(ctrl[19]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_20(.inData_0(wireIn[40]), .inData_1(wireIn[41]), .outData_0(wireOut[40]), .outData_1(wireOut[41]), .ctrl(ctrl[20]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_21(.inData_0(wireIn[42]), .inData_1(wireIn[43]), .outData_0(wireOut[42]), .outData_1(wireOut[43]), .ctrl(ctrl[21]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_22(.inData_0(wireIn[44]), .inData_1(wireIn[45]), .outData_0(wireOut[44]), .outData_1(wireOut[45]), .ctrl(ctrl[22]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_23(.inData_0(wireIn[46]), .inData_1(wireIn[47]), .outData_0(wireOut[46]), .outData_1(wireOut[47]), .ctrl(ctrl[23]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_24(.inData_0(wireIn[48]), .inData_1(wireIn[49]), .outData_0(wireOut[48]), .outData_1(wireOut[49]), .ctrl(ctrl[24]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_25(.inData_0(wireIn[50]), .inData_1(wireIn[51]), .outData_0(wireOut[50]), .outData_1(wireOut[51]), .ctrl(ctrl[25]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_26(.inData_0(wireIn[52]), .inData_1(wireIn[53]), .outData_0(wireOut[52]), .outData_1(wireOut[53]), .ctrl(ctrl[26]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_27(.inData_0(wireIn[54]), .inData_1(wireIn[55]), .outData_0(wireOut[54]), .outData_1(wireOut[55]), .ctrl(ctrl[27]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_28(.inData_0(wireIn[56]), .inData_1(wireIn[57]), .outData_0(wireOut[56]), .outData_1(wireOut[57]), .ctrl(ctrl[28]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_29(.inData_0(wireIn[58]), .inData_1(wireIn[59]), .outData_0(wireOut[58]), .outData_1(wireOut[59]), .ctrl(ctrl[29]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_30(.inData_0(wireIn[60]), .inData_1(wireIn[61]), .outData_0(wireOut[60]), .outData_1(wireOut[61]), .ctrl(ctrl[30]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_31(.inData_0(wireIn[62]), .inData_1(wireIn[63]), .outData_0(wireOut[62]), .outData_1(wireOut[63]), .ctrl(ctrl[31]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_ctrl_rom_dp64_st2_per0L(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [31:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 32'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 32'b00000000000000000000000000000000; 
          4'b0001: data <= 32'b00000000000000000000000000000000; 
          4'b0010: data <= 32'b00000000000000000000000000000000; 
          4'b0011: data <= 32'b00000000000000000000000000000000; 
          4'b0100: data <= 32'b00000000000000000000000000000000; 
          4'b0101: data <= 32'b00000000000000000000000000000000; 
          4'b0110: data <= 32'b00000000000000000000000000000000; 
          4'b0111: data <= 32'b00000000000000000000000000000000; 
          4'b1000: data <= 32'b11111111111111111111111111111111; 
          4'b1001: data <= 32'b11111111111111111111111111111111; 
          4'b1010: data <= 32'b11111111111111111111111111111111; 
          4'b1011: data <= 32'b11111111111111111111111111111111; 
          4'b1100: data <= 32'b11111111111111111111111111111111; 
          4'b1101: data <= 32'b11111111111111111111111111111111; 
          4'b1110: data <= 32'b11111111111111111111111111111111; 
          4'b1111: data <= 32'b11111111111111111111111111111111; 
          default: data <= 32'b0; 
        endcase
    end
  end                              

endmodule                        


module s10_switch_ctrl_dp64_st2_per0L(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [31:0] ctrl_out;        
  
  reg [3:0] addr;        
  reg state;        
  
  s10_ctrl_rom_dp64_st2_per0L s8_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 4'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 4'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {4{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s10_wireCon_dp64_st2_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[2];    
  assign wireOut[2] = wireIn[4];    
  assign wireOut[3] = wireIn[6];    
  assign wireOut[4] = wireIn[8];    
  assign wireOut[5] = wireIn[10];    
  assign wireOut[6] = wireIn[12];    
  assign wireOut[7] = wireIn[14];    
  assign wireOut[8] = wireIn[1];    
  assign wireOut[9] = wireIn[3];    
  assign wireOut[10] = wireIn[5];    
  assign wireOut[11] = wireIn[7];    
  assign wireOut[12] = wireIn[9];    
  assign wireOut[13] = wireIn[11];    
  assign wireOut[14] = wireIn[13];    
  assign wireOut[15] = wireIn[15];    
  assign wireOut[16] = wireIn[16];    
  assign wireOut[17] = wireIn[18];    
  assign wireOut[18] = wireIn[20];    
  assign wireOut[19] = wireIn[22];    
  assign wireOut[20] = wireIn[24];    
  assign wireOut[21] = wireIn[26];    
  assign wireOut[22] = wireIn[28];    
  assign wireOut[23] = wireIn[30];    
  assign wireOut[24] = wireIn[17];    
  assign wireOut[25] = wireIn[19];    
  assign wireOut[26] = wireIn[21];    
  assign wireOut[27] = wireIn[23];    
  assign wireOut[28] = wireIn[25];    
  assign wireOut[29] = wireIn[27];    
  assign wireOut[30] = wireIn[29];    
  assign wireOut[31] = wireIn[31];    
  assign wireOut[32] = wireIn[32];    
  assign wireOut[33] = wireIn[34];    
  assign wireOut[34] = wireIn[36];    
  assign wireOut[35] = wireIn[38];    
  assign wireOut[36] = wireIn[40];    
  assign wireOut[37] = wireIn[42];    
  assign wireOut[38] = wireIn[44];    
  assign wireOut[39] = wireIn[46];    
  assign wireOut[40] = wireIn[33];    
  assign wireOut[41] = wireIn[35];    
  assign wireOut[42] = wireIn[37];    
  assign wireOut[43] = wireIn[39];    
  assign wireOut[44] = wireIn[41];    
  assign wireOut[45] = wireIn[43];    
  assign wireOut[46] = wireIn[45];    
  assign wireOut[47] = wireIn[47];    
  assign wireOut[48] = wireIn[48];    
  assign wireOut[49] = wireIn[50];    
  assign wireOut[50] = wireIn[52];    
  assign wireOut[51] = wireIn[54];    
  assign wireOut[52] = wireIn[56];    
  assign wireOut[53] = wireIn[58];    
  assign wireOut[54] = wireIn[60];    
  assign wireOut[55] = wireIn[62];    
  assign wireOut[56] = wireIn[49];    
  assign wireOut[57] = wireIn[51];    
  assign wireOut[58] = wireIn[53];    
  assign wireOut[59] = wireIn[55];    
  assign wireOut[60] = wireIn[57];    
  assign wireOut[61] = wireIn[59];    
  assign wireOut[62] = wireIn[61];    
  assign wireOut[63] = wireIn[63];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_switches_stage_st3_0_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [32-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_16(.inData_0(wireIn[32]), .inData_1(wireIn[33]), .outData_0(wireOut[32]), .outData_1(wireOut[33]), .ctrl(ctrl[16]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_17(.inData_0(wireIn[34]), .inData_1(wireIn[35]), .outData_0(wireOut[34]), .outData_1(wireOut[35]), .ctrl(ctrl[17]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_18(.inData_0(wireIn[36]), .inData_1(wireIn[37]), .outData_0(wireOut[36]), .outData_1(wireOut[37]), .ctrl(ctrl[18]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_19(.inData_0(wireIn[38]), .inData_1(wireIn[39]), .outData_0(wireOut[38]), .outData_1(wireOut[39]), .ctrl(ctrl[19]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_20(.inData_0(wireIn[40]), .inData_1(wireIn[41]), .outData_0(wireOut[40]), .outData_1(wireOut[41]), .ctrl(ctrl[20]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_21(.inData_0(wireIn[42]), .inData_1(wireIn[43]), .outData_0(wireOut[42]), .outData_1(wireOut[43]), .ctrl(ctrl[21]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_22(.inData_0(wireIn[44]), .inData_1(wireIn[45]), .outData_0(wireOut[44]), .outData_1(wireOut[45]), .ctrl(ctrl[22]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_23(.inData_0(wireIn[46]), .inData_1(wireIn[47]), .outData_0(wireOut[46]), .outData_1(wireOut[47]), .ctrl(ctrl[23]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_24(.inData_0(wireIn[48]), .inData_1(wireIn[49]), .outData_0(wireOut[48]), .outData_1(wireOut[49]), .ctrl(ctrl[24]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_25(.inData_0(wireIn[50]), .inData_1(wireIn[51]), .outData_0(wireOut[50]), .outData_1(wireOut[51]), .ctrl(ctrl[25]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_26(.inData_0(wireIn[52]), .inData_1(wireIn[53]), .outData_0(wireOut[52]), .outData_1(wireOut[53]), .ctrl(ctrl[26]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_27(.inData_0(wireIn[54]), .inData_1(wireIn[55]), .outData_0(wireOut[54]), .outData_1(wireOut[55]), .ctrl(ctrl[27]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_28(.inData_0(wireIn[56]), .inData_1(wireIn[57]), .outData_0(wireOut[56]), .outData_1(wireOut[57]), .ctrl(ctrl[28]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_29(.inData_0(wireIn[58]), .inData_1(wireIn[59]), .outData_0(wireOut[58]), .outData_1(wireOut[59]), .ctrl(ctrl[29]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_30(.inData_0(wireIn[60]), .inData_1(wireIn[61]), .outData_0(wireOut[60]), .outData_1(wireOut[61]), .ctrl(ctrl[30]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_31(.inData_0(wireIn[62]), .inData_1(wireIn[63]), .outData_0(wireOut[62]), .outData_1(wireOut[63]), .ctrl(ctrl[31]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_ctrl_rom_dp64_st3_per0L(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [31:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 32'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 32'b00000000000000000000000000000000; 
          4'b0001: data <= 32'b00000000000000000000000000000000; 
          4'b0010: data <= 32'b00000000000000000000000000000000; 
          4'b0011: data <= 32'b00000000000000000000000000000000; 
          4'b0100: data <= 32'b00000000000000000000000000000000; 
          4'b0101: data <= 32'b00000000000000000000000000000000; 
          4'b0110: data <= 32'b00000000000000000000000000000000; 
          4'b0111: data <= 32'b00000000000000000000000000000000; 
          4'b1000: data <= 32'b11111111111111111111111111111111; 
          4'b1001: data <= 32'b11111111111111111111111111111111; 
          4'b1010: data <= 32'b11111111111111111111111111111111; 
          4'b1011: data <= 32'b11111111111111111111111111111111; 
          4'b1100: data <= 32'b11111111111111111111111111111111; 
          4'b1101: data <= 32'b11111111111111111111111111111111; 
          4'b1110: data <= 32'b11111111111111111111111111111111; 
          4'b1111: data <= 32'b11111111111111111111111111111111; 
          default: data <= 32'b0; 
        endcase
    end
  end                              

endmodule                        


module s10_switch_ctrl_dp64_st3_per0L(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [31:0] ctrl_out;        
  
  reg [3:0] addr;        
  reg state;        
  
  s10_ctrl_rom_dp64_st3_per0L s8_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 4'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 4'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {4{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s10_wireCon_dp64_st3_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[2];    
  assign wireOut[2] = wireIn[4];    
  assign wireOut[3] = wireIn[6];    
  assign wireOut[4] = wireIn[1];    
  assign wireOut[5] = wireIn[3];    
  assign wireOut[6] = wireIn[5];    
  assign wireOut[7] = wireIn[7];    
  assign wireOut[8] = wireIn[8];    
  assign wireOut[9] = wireIn[10];    
  assign wireOut[10] = wireIn[12];    
  assign wireOut[11] = wireIn[14];    
  assign wireOut[12] = wireIn[9];    
  assign wireOut[13] = wireIn[11];    
  assign wireOut[14] = wireIn[13];    
  assign wireOut[15] = wireIn[15];    
  assign wireOut[16] = wireIn[16];    
  assign wireOut[17] = wireIn[18];    
  assign wireOut[18] = wireIn[20];    
  assign wireOut[19] = wireIn[22];    
  assign wireOut[20] = wireIn[17];    
  assign wireOut[21] = wireIn[19];    
  assign wireOut[22] = wireIn[21];    
  assign wireOut[23] = wireIn[23];    
  assign wireOut[24] = wireIn[24];    
  assign wireOut[25] = wireIn[26];    
  assign wireOut[26] = wireIn[28];    
  assign wireOut[27] = wireIn[30];    
  assign wireOut[28] = wireIn[25];    
  assign wireOut[29] = wireIn[27];    
  assign wireOut[30] = wireIn[29];    
  assign wireOut[31] = wireIn[31];    
  assign wireOut[32] = wireIn[32];    
  assign wireOut[33] = wireIn[34];    
  assign wireOut[34] = wireIn[36];    
  assign wireOut[35] = wireIn[38];    
  assign wireOut[36] = wireIn[33];    
  assign wireOut[37] = wireIn[35];    
  assign wireOut[38] = wireIn[37];    
  assign wireOut[39] = wireIn[39];    
  assign wireOut[40] = wireIn[40];    
  assign wireOut[41] = wireIn[42];    
  assign wireOut[42] = wireIn[44];    
  assign wireOut[43] = wireIn[46];    
  assign wireOut[44] = wireIn[41];    
  assign wireOut[45] = wireIn[43];    
  assign wireOut[46] = wireIn[45];    
  assign wireOut[47] = wireIn[47];    
  assign wireOut[48] = wireIn[48];    
  assign wireOut[49] = wireIn[50];    
  assign wireOut[50] = wireIn[52];    
  assign wireOut[51] = wireIn[54];    
  assign wireOut[52] = wireIn[49];    
  assign wireOut[53] = wireIn[51];    
  assign wireOut[54] = wireIn[53];    
  assign wireOut[55] = wireIn[55];    
  assign wireOut[56] = wireIn[56];    
  assign wireOut[57] = wireIn[58];    
  assign wireOut[58] = wireIn[60];    
  assign wireOut[59] = wireIn[62];    
  assign wireOut[60] = wireIn[57];    
  assign wireOut[61] = wireIn[59];    
  assign wireOut[62] = wireIn[61];    
  assign wireOut[63] = wireIn[63];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_switches_stage_st4_0_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [32-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_16(.inData_0(wireIn[32]), .inData_1(wireIn[33]), .outData_0(wireOut[32]), .outData_1(wireOut[33]), .ctrl(ctrl[16]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_17(.inData_0(wireIn[34]), .inData_1(wireIn[35]), .outData_0(wireOut[34]), .outData_1(wireOut[35]), .ctrl(ctrl[17]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_18(.inData_0(wireIn[36]), .inData_1(wireIn[37]), .outData_0(wireOut[36]), .outData_1(wireOut[37]), .ctrl(ctrl[18]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_19(.inData_0(wireIn[38]), .inData_1(wireIn[39]), .outData_0(wireOut[38]), .outData_1(wireOut[39]), .ctrl(ctrl[19]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_20(.inData_0(wireIn[40]), .inData_1(wireIn[41]), .outData_0(wireOut[40]), .outData_1(wireOut[41]), .ctrl(ctrl[20]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_21(.inData_0(wireIn[42]), .inData_1(wireIn[43]), .outData_0(wireOut[42]), .outData_1(wireOut[43]), .ctrl(ctrl[21]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_22(.inData_0(wireIn[44]), .inData_1(wireIn[45]), .outData_0(wireOut[44]), .outData_1(wireOut[45]), .ctrl(ctrl[22]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_23(.inData_0(wireIn[46]), .inData_1(wireIn[47]), .outData_0(wireOut[46]), .outData_1(wireOut[47]), .ctrl(ctrl[23]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_24(.inData_0(wireIn[48]), .inData_1(wireIn[49]), .outData_0(wireOut[48]), .outData_1(wireOut[49]), .ctrl(ctrl[24]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_25(.inData_0(wireIn[50]), .inData_1(wireIn[51]), .outData_0(wireOut[50]), .outData_1(wireOut[51]), .ctrl(ctrl[25]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_26(.inData_0(wireIn[52]), .inData_1(wireIn[53]), .outData_0(wireOut[52]), .outData_1(wireOut[53]), .ctrl(ctrl[26]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_27(.inData_0(wireIn[54]), .inData_1(wireIn[55]), .outData_0(wireOut[54]), .outData_1(wireOut[55]), .ctrl(ctrl[27]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_28(.inData_0(wireIn[56]), .inData_1(wireIn[57]), .outData_0(wireOut[56]), .outData_1(wireOut[57]), .ctrl(ctrl[28]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_29(.inData_0(wireIn[58]), .inData_1(wireIn[59]), .outData_0(wireOut[58]), .outData_1(wireOut[59]), .ctrl(ctrl[29]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_30(.inData_0(wireIn[60]), .inData_1(wireIn[61]), .outData_0(wireOut[60]), .outData_1(wireOut[61]), .ctrl(ctrl[30]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_31(.inData_0(wireIn[62]), .inData_1(wireIn[63]), .outData_0(wireOut[62]), .outData_1(wireOut[63]), .ctrl(ctrl[31]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_ctrl_rom_dp64_st4_per0L(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [31:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 32'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 32'b00000000000000000000000000000000; 
          4'b0001: data <= 32'b00000000000000000000000000000000; 
          4'b0010: data <= 32'b00000000000000000000000000000000; 
          4'b0011: data <= 32'b00000000000000000000000000000000; 
          4'b0100: data <= 32'b00000000000000000000000000000000; 
          4'b0101: data <= 32'b00000000000000000000000000000000; 
          4'b0110: data <= 32'b00000000000000000000000000000000; 
          4'b0111: data <= 32'b00000000000000000000000000000000; 
          4'b1000: data <= 32'b11111111111111111111111111111111; 
          4'b1001: data <= 32'b11111111111111111111111111111111; 
          4'b1010: data <= 32'b11111111111111111111111111111111; 
          4'b1011: data <= 32'b11111111111111111111111111111111; 
          4'b1100: data <= 32'b11111111111111111111111111111111; 
          4'b1101: data <= 32'b11111111111111111111111111111111; 
          4'b1110: data <= 32'b11111111111111111111111111111111; 
          4'b1111: data <= 32'b11111111111111111111111111111111; 
          default: data <= 32'b0; 
        endcase
    end
  end                              

endmodule                        


module s10_switch_ctrl_dp64_st4_per0L(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [31:0] ctrl_out;        
  
  reg [3:0] addr;        
  reg state;        
  
  s10_ctrl_rom_dp64_st4_per0L s8_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 4'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 4'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {4{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s10_wireCon_dp64_st4_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[2];    
  assign wireOut[2] = wireIn[1];    
  assign wireOut[3] = wireIn[3];    
  assign wireOut[4] = wireIn[4];    
  assign wireOut[5] = wireIn[6];    
  assign wireOut[6] = wireIn[5];    
  assign wireOut[7] = wireIn[7];    
  assign wireOut[8] = wireIn[8];    
  assign wireOut[9] = wireIn[10];    
  assign wireOut[10] = wireIn[9];    
  assign wireOut[11] = wireIn[11];    
  assign wireOut[12] = wireIn[12];    
  assign wireOut[13] = wireIn[14];    
  assign wireOut[14] = wireIn[13];    
  assign wireOut[15] = wireIn[15];    
  assign wireOut[16] = wireIn[16];    
  assign wireOut[17] = wireIn[18];    
  assign wireOut[18] = wireIn[17];    
  assign wireOut[19] = wireIn[19];    
  assign wireOut[20] = wireIn[20];    
  assign wireOut[21] = wireIn[22];    
  assign wireOut[22] = wireIn[21];    
  assign wireOut[23] = wireIn[23];    
  assign wireOut[24] = wireIn[24];    
  assign wireOut[25] = wireIn[26];    
  assign wireOut[26] = wireIn[25];    
  assign wireOut[27] = wireIn[27];    
  assign wireOut[28] = wireIn[28];    
  assign wireOut[29] = wireIn[30];    
  assign wireOut[30] = wireIn[29];    
  assign wireOut[31] = wireIn[31];    
  assign wireOut[32] = wireIn[32];    
  assign wireOut[33] = wireIn[34];    
  assign wireOut[34] = wireIn[33];    
  assign wireOut[35] = wireIn[35];    
  assign wireOut[36] = wireIn[36];    
  assign wireOut[37] = wireIn[38];    
  assign wireOut[38] = wireIn[37];    
  assign wireOut[39] = wireIn[39];    
  assign wireOut[40] = wireIn[40];    
  assign wireOut[41] = wireIn[42];    
  assign wireOut[42] = wireIn[41];    
  assign wireOut[43] = wireIn[43];    
  assign wireOut[44] = wireIn[44];    
  assign wireOut[45] = wireIn[46];    
  assign wireOut[46] = wireIn[45];    
  assign wireOut[47] = wireIn[47];    
  assign wireOut[48] = wireIn[48];    
  assign wireOut[49] = wireIn[50];    
  assign wireOut[50] = wireIn[49];    
  assign wireOut[51] = wireIn[51];    
  assign wireOut[52] = wireIn[52];    
  assign wireOut[53] = wireIn[54];    
  assign wireOut[54] = wireIn[53];    
  assign wireOut[55] = wireIn[55];    
  assign wireOut[56] = wireIn[56];    
  assign wireOut[57] = wireIn[58];    
  assign wireOut[58] = wireIn[57];    
  assign wireOut[59] = wireIn[59];    
  assign wireOut[60] = wireIn[60];    
  assign wireOut[61] = wireIn[62];    
  assign wireOut[62] = wireIn[61];    
  assign wireOut[63] = wireIn[63];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_switches_stage_st5_0_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [32-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_16(.inData_0(wireIn[32]), .inData_1(wireIn[33]), .outData_0(wireOut[32]), .outData_1(wireOut[33]), .ctrl(ctrl[16]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_17(.inData_0(wireIn[34]), .inData_1(wireIn[35]), .outData_0(wireOut[34]), .outData_1(wireOut[35]), .ctrl(ctrl[17]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_18(.inData_0(wireIn[36]), .inData_1(wireIn[37]), .outData_0(wireOut[36]), .outData_1(wireOut[37]), .ctrl(ctrl[18]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_19(.inData_0(wireIn[38]), .inData_1(wireIn[39]), .outData_0(wireOut[38]), .outData_1(wireOut[39]), .ctrl(ctrl[19]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_20(.inData_0(wireIn[40]), .inData_1(wireIn[41]), .outData_0(wireOut[40]), .outData_1(wireOut[41]), .ctrl(ctrl[20]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_21(.inData_0(wireIn[42]), .inData_1(wireIn[43]), .outData_0(wireOut[42]), .outData_1(wireOut[43]), .ctrl(ctrl[21]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_22(.inData_0(wireIn[44]), .inData_1(wireIn[45]), .outData_0(wireOut[44]), .outData_1(wireOut[45]), .ctrl(ctrl[22]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_23(.inData_0(wireIn[46]), .inData_1(wireIn[47]), .outData_0(wireOut[46]), .outData_1(wireOut[47]), .ctrl(ctrl[23]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_24(.inData_0(wireIn[48]), .inData_1(wireIn[49]), .outData_0(wireOut[48]), .outData_1(wireOut[49]), .ctrl(ctrl[24]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_25(.inData_0(wireIn[50]), .inData_1(wireIn[51]), .outData_0(wireOut[50]), .outData_1(wireOut[51]), .ctrl(ctrl[25]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_26(.inData_0(wireIn[52]), .inData_1(wireIn[53]), .outData_0(wireOut[52]), .outData_1(wireOut[53]), .ctrl(ctrl[26]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_27(.inData_0(wireIn[54]), .inData_1(wireIn[55]), .outData_0(wireOut[54]), .outData_1(wireOut[55]), .ctrl(ctrl[27]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_28(.inData_0(wireIn[56]), .inData_1(wireIn[57]), .outData_0(wireOut[56]), .outData_1(wireOut[57]), .ctrl(ctrl[28]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_29(.inData_0(wireIn[58]), .inData_1(wireIn[59]), .outData_0(wireOut[58]), .outData_1(wireOut[59]), .ctrl(ctrl[29]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_30(.inData_0(wireIn[60]), .inData_1(wireIn[61]), .outData_0(wireOut[60]), .outData_1(wireOut[61]), .ctrl(ctrl[30]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_31(.inData_0(wireIn[62]), .inData_1(wireIn[63]), .outData_0(wireOut[62]), .outData_1(wireOut[63]), .ctrl(ctrl[31]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_ctrl_rom_dp64_st5_per0L(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [31:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 32'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 32'b00000000000000000000000000000000; 
          4'b0001: data <= 32'b00000000000000000000000000000000; 
          4'b0010: data <= 32'b00000000000000000000000000000000; 
          4'b0011: data <= 32'b00000000000000000000000000000000; 
          4'b0100: data <= 32'b00000000000000000000000000000000; 
          4'b0101: data <= 32'b00000000000000000000000000000000; 
          4'b0110: data <= 32'b00000000000000000000000000000000; 
          4'b0111: data <= 32'b00000000000000000000000000000000; 
          4'b1000: data <= 32'b11111111111111111111111111111111; 
          4'b1001: data <= 32'b11111111111111111111111111111111; 
          4'b1010: data <= 32'b11111111111111111111111111111111; 
          4'b1011: data <= 32'b11111111111111111111111111111111; 
          4'b1100: data <= 32'b11111111111111111111111111111111; 
          4'b1101: data <= 32'b11111111111111111111111111111111; 
          4'b1110: data <= 32'b11111111111111111111111111111111; 
          4'b1111: data <= 32'b11111111111111111111111111111111; 
          default: data <= 32'b0; 
        endcase
    end
  end                              

endmodule                        


module s10_switch_ctrl_dp64_st5_per0L(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [31:0] ctrl_out;        
  
  reg [3:0] addr;        
  reg state;        
  
  s10_ctrl_rom_dp64_st5_per0L s8_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 4'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 4'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {4{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s10_wireCon_dp64_st5_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[1];    
  assign wireOut[2] = wireIn[2];    
  assign wireOut[3] = wireIn[3];    
  assign wireOut[4] = wireIn[4];    
  assign wireOut[5] = wireIn[5];    
  assign wireOut[6] = wireIn[6];    
  assign wireOut[7] = wireIn[7];    
  assign wireOut[8] = wireIn[8];    
  assign wireOut[9] = wireIn[9];    
  assign wireOut[10] = wireIn[10];    
  assign wireOut[11] = wireIn[11];    
  assign wireOut[12] = wireIn[12];    
  assign wireOut[13] = wireIn[13];    
  assign wireOut[14] = wireIn[14];    
  assign wireOut[15] = wireIn[15];    
  assign wireOut[16] = wireIn[16];    
  assign wireOut[17] = wireIn[17];    
  assign wireOut[18] = wireIn[18];    
  assign wireOut[19] = wireIn[19];    
  assign wireOut[20] = wireIn[20];    
  assign wireOut[21] = wireIn[21];    
  assign wireOut[22] = wireIn[22];    
  assign wireOut[23] = wireIn[23];    
  assign wireOut[24] = wireIn[24];    
  assign wireOut[25] = wireIn[25];    
  assign wireOut[26] = wireIn[26];    
  assign wireOut[27] = wireIn[27];    
  assign wireOut[28] = wireIn[28];    
  assign wireOut[29] = wireIn[29];    
  assign wireOut[30] = wireIn[30];    
  assign wireOut[31] = wireIn[31];    
  assign wireOut[32] = wireIn[32];    
  assign wireOut[33] = wireIn[33];    
  assign wireOut[34] = wireIn[34];    
  assign wireOut[35] = wireIn[35];    
  assign wireOut[36] = wireIn[36];    
  assign wireOut[37] = wireIn[37];    
  assign wireOut[38] = wireIn[38];    
  assign wireOut[39] = wireIn[39];    
  assign wireOut[40] = wireIn[40];    
  assign wireOut[41] = wireIn[41];    
  assign wireOut[42] = wireIn[42];    
  assign wireOut[43] = wireIn[43];    
  assign wireOut[44] = wireIn[44];    
  assign wireOut[45] = wireIn[45];    
  assign wireOut[46] = wireIn[46];    
  assign wireOut[47] = wireIn[47];    
  assign wireOut[48] = wireIn[48];    
  assign wireOut[49] = wireIn[49];    
  assign wireOut[50] = wireIn[50];    
  assign wireOut[51] = wireIn[51];    
  assign wireOut[52] = wireIn[52];    
  assign wireOut[53] = wireIn[53];    
  assign wireOut[54] = wireIn[54];    
  assign wireOut[55] = wireIn[55];    
  assign wireOut[56] = wireIn[56];    
  assign wireOut[57] = wireIn[57];    
  assign wireOut[58] = wireIn[58];    
  assign wireOut[59] = wireIn[59];    
  assign wireOut[60] = wireIn[60];    
  assign wireOut[61] = wireIn[61];    
  assign wireOut[62] = wireIn[62];    
  assign wireOut[63] = wireIn[63];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_ingressStage_p64(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
counter_in,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  input [3:0] counter_in; 
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63;
  output out_start; 
  
  
  wire out_start_w; 
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  wire in_start_stage0;
  wire con_in_start_stage0;

  wire in_start_stage1;
  wire con_in_start_stage1;

  wire in_start_stage2;
  wire con_in_start_stage2;

  wire in_start_stage3;
  wire con_in_start_stage3;

  wire in_start_stage4;
  wire con_in_start_stage4;

  wire in_start_stage5;
  wire con_in_start_stage5;

  wire [DATA_WIDTH-1:0] wire_con_in_stage0[63:0];
  wire [DATA_WIDTH-1:0] wire_con_out_stage0[63:0];
  wire [31:0] wire_ctrl_stage0;

  s10_switches_stage_st0_0_L switch_stage_0(
        .inData_0(wireIn[0]), .inData_1(wireIn[1]), .inData_2(wireIn[2]), .inData_3(wireIn[3]), .inData_4(wireIn[4]), .inData_5(wireIn[5]), .inData_6(wireIn[6]), .inData_7(wireIn[7]), .inData_8(wireIn[8]), .inData_9(wireIn[9]), .inData_10(wireIn[10]), .inData_11(wireIn[11]), .inData_12(wireIn[12]), .inData_13(wireIn[13]), .inData_14(wireIn[14]), .inData_15(wireIn[15]), .inData_16(wireIn[16]), .inData_17(wireIn[17]), .inData_18(wireIn[18]), .inData_19(wireIn[19]), .inData_20(wireIn[20]), .inData_21(wireIn[21]), .inData_22(wireIn[22]), .inData_23(wireIn[23]), .inData_24(wireIn[24]), .inData_25(wireIn[25]), .inData_26(wireIn[26]), .inData_27(wireIn[27]), .inData_28(wireIn[28]), .inData_29(wireIn[29]), .inData_30(wireIn[30]), .inData_31(wireIn[31]), .inData_32(wireIn[32]), .inData_33(wireIn[33]), .inData_34(wireIn[34]), .inData_35(wireIn[35]), .inData_36(wireIn[36]), .inData_37(wireIn[37]), .inData_38(wireIn[38]), .inData_39(wireIn[39]), .inData_40(wireIn[40]), .inData_41(wireIn[41]), .inData_42(wireIn[42]), .inData_43(wireIn[43]), .inData_44(wireIn[44]), .inData_45(wireIn[45]), .inData_46(wireIn[46]), .inData_47(wireIn[47]), .inData_48(wireIn[48]), .inData_49(wireIn[49]), .inData_50(wireIn[50]), .inData_51(wireIn[51]), .inData_52(wireIn[52]), .inData_53(wireIn[53]), .inData_54(wireIn[54]), .inData_55(wireIn[55]), .inData_56(wireIn[56]), .inData_57(wireIn[57]), .inData_58(wireIn[58]), .inData_59(wireIn[59]), .inData_60(wireIn[60]), .inData_61(wireIn[61]), .inData_62(wireIn[62]), .inData_63(wireIn[63]), 
        .outData_0(wire_con_in_stage0[0]), .outData_1(wire_con_in_stage0[1]), .outData_2(wire_con_in_stage0[2]), .outData_3(wire_con_in_stage0[3]), .outData_4(wire_con_in_stage0[4]), .outData_5(wire_con_in_stage0[5]), .outData_6(wire_con_in_stage0[6]), .outData_7(wire_con_in_stage0[7]), .outData_8(wire_con_in_stage0[8]), .outData_9(wire_con_in_stage0[9]), .outData_10(wire_con_in_stage0[10]), .outData_11(wire_con_in_stage0[11]), .outData_12(wire_con_in_stage0[12]), .outData_13(wire_con_in_stage0[13]), .outData_14(wire_con_in_stage0[14]), .outData_15(wire_con_in_stage0[15]), .outData_16(wire_con_in_stage0[16]), .outData_17(wire_con_in_stage0[17]), .outData_18(wire_con_in_stage0[18]), .outData_19(wire_con_in_stage0[19]), .outData_20(wire_con_in_stage0[20]), .outData_21(wire_con_in_stage0[21]), .outData_22(wire_con_in_stage0[22]), .outData_23(wire_con_in_stage0[23]), .outData_24(wire_con_in_stage0[24]), .outData_25(wire_con_in_stage0[25]), .outData_26(wire_con_in_stage0[26]), .outData_27(wire_con_in_stage0[27]), .outData_28(wire_con_in_stage0[28]), .outData_29(wire_con_in_stage0[29]), .outData_30(wire_con_in_stage0[30]), .outData_31(wire_con_in_stage0[31]), .outData_32(wire_con_in_stage0[32]), .outData_33(wire_con_in_stage0[33]), .outData_34(wire_con_in_stage0[34]), .outData_35(wire_con_in_stage0[35]), .outData_36(wire_con_in_stage0[36]), .outData_37(wire_con_in_stage0[37]), .outData_38(wire_con_in_stage0[38]), .outData_39(wire_con_in_stage0[39]), .outData_40(wire_con_in_stage0[40]), .outData_41(wire_con_in_stage0[41]), .outData_42(wire_con_in_stage0[42]), .outData_43(wire_con_in_stage0[43]), .outData_44(wire_con_in_stage0[44]), .outData_45(wire_con_in_stage0[45]), .outData_46(wire_con_in_stage0[46]), .outData_47(wire_con_in_stage0[47]), .outData_48(wire_con_in_stage0[48]), .outData_49(wire_con_in_stage0[49]), .outData_50(wire_con_in_stage0[50]), .outData_51(wire_con_in_stage0[51]), .outData_52(wire_con_in_stage0[52]), .outData_53(wire_con_in_stage0[53]), .outData_54(wire_con_in_stage0[54]), .outData_55(wire_con_in_stage0[55]), .outData_56(wire_con_in_stage0[56]), .outData_57(wire_con_in_stage0[57]), .outData_58(wire_con_in_stage0[58]), .outData_59(wire_con_in_stage0[59]), .outData_60(wire_con_in_stage0[60]), .outData_61(wire_con_in_stage0[61]), .outData_62(wire_con_in_stage0[62]), .outData_63(wire_con_in_stage0[63]), 
        .in_start(in_start_stage0), .out_start(con_in_start_stage0), .ctrl(wire_ctrl_stage0), .clk(clk), .rst(rst));
  
  s10_wireCon_dp64_st0_L wire_stage_0(
        .inData_0(wire_con_in_stage0[0]), .inData_1(wire_con_in_stage0[1]), .inData_2(wire_con_in_stage0[2]), .inData_3(wire_con_in_stage0[3]), .inData_4(wire_con_in_stage0[4]), .inData_5(wire_con_in_stage0[5]), .inData_6(wire_con_in_stage0[6]), .inData_7(wire_con_in_stage0[7]), .inData_8(wire_con_in_stage0[8]), .inData_9(wire_con_in_stage0[9]), .inData_10(wire_con_in_stage0[10]), .inData_11(wire_con_in_stage0[11]), .inData_12(wire_con_in_stage0[12]), .inData_13(wire_con_in_stage0[13]), .inData_14(wire_con_in_stage0[14]), .inData_15(wire_con_in_stage0[15]), .inData_16(wire_con_in_stage0[16]), .inData_17(wire_con_in_stage0[17]), .inData_18(wire_con_in_stage0[18]), .inData_19(wire_con_in_stage0[19]), .inData_20(wire_con_in_stage0[20]), .inData_21(wire_con_in_stage0[21]), .inData_22(wire_con_in_stage0[22]), .inData_23(wire_con_in_stage0[23]), .inData_24(wire_con_in_stage0[24]), .inData_25(wire_con_in_stage0[25]), .inData_26(wire_con_in_stage0[26]), .inData_27(wire_con_in_stage0[27]), .inData_28(wire_con_in_stage0[28]), .inData_29(wire_con_in_stage0[29]), .inData_30(wire_con_in_stage0[30]), .inData_31(wire_con_in_stage0[31]), .inData_32(wire_con_in_stage0[32]), .inData_33(wire_con_in_stage0[33]), .inData_34(wire_con_in_stage0[34]), .inData_35(wire_con_in_stage0[35]), .inData_36(wire_con_in_stage0[36]), .inData_37(wire_con_in_stage0[37]), .inData_38(wire_con_in_stage0[38]), .inData_39(wire_con_in_stage0[39]), .inData_40(wire_con_in_stage0[40]), .inData_41(wire_con_in_stage0[41]), .inData_42(wire_con_in_stage0[42]), .inData_43(wire_con_in_stage0[43]), .inData_44(wire_con_in_stage0[44]), .inData_45(wire_con_in_stage0[45]), .inData_46(wire_con_in_stage0[46]), .inData_47(wire_con_in_stage0[47]), .inData_48(wire_con_in_stage0[48]), .inData_49(wire_con_in_stage0[49]), .inData_50(wire_con_in_stage0[50]), .inData_51(wire_con_in_stage0[51]), .inData_52(wire_con_in_stage0[52]), .inData_53(wire_con_in_stage0[53]), .inData_54(wire_con_in_stage0[54]), .inData_55(wire_con_in_stage0[55]), .inData_56(wire_con_in_stage0[56]), .inData_57(wire_con_in_stage0[57]), .inData_58(wire_con_in_stage0[58]), .inData_59(wire_con_in_stage0[59]), .inData_60(wire_con_in_stage0[60]), .inData_61(wire_con_in_stage0[61]), .inData_62(wire_con_in_stage0[62]), .inData_63(wire_con_in_stage0[63]), 
        .outData_0(wire_con_out_stage0[0]), .outData_1(wire_con_out_stage0[1]), .outData_2(wire_con_out_stage0[2]), .outData_3(wire_con_out_stage0[3]), .outData_4(wire_con_out_stage0[4]), .outData_5(wire_con_out_stage0[5]), .outData_6(wire_con_out_stage0[6]), .outData_7(wire_con_out_stage0[7]), .outData_8(wire_con_out_stage0[8]), .outData_9(wire_con_out_stage0[9]), .outData_10(wire_con_out_stage0[10]), .outData_11(wire_con_out_stage0[11]), .outData_12(wire_con_out_stage0[12]), .outData_13(wire_con_out_stage0[13]), .outData_14(wire_con_out_stage0[14]), .outData_15(wire_con_out_stage0[15]), .outData_16(wire_con_out_stage0[16]), .outData_17(wire_con_out_stage0[17]), .outData_18(wire_con_out_stage0[18]), .outData_19(wire_con_out_stage0[19]), .outData_20(wire_con_out_stage0[20]), .outData_21(wire_con_out_stage0[21]), .outData_22(wire_con_out_stage0[22]), .outData_23(wire_con_out_stage0[23]), .outData_24(wire_con_out_stage0[24]), .outData_25(wire_con_out_stage0[25]), .outData_26(wire_con_out_stage0[26]), .outData_27(wire_con_out_stage0[27]), .outData_28(wire_con_out_stage0[28]), .outData_29(wire_con_out_stage0[29]), .outData_30(wire_con_out_stage0[30]), .outData_31(wire_con_out_stage0[31]), .outData_32(wire_con_out_stage0[32]), .outData_33(wire_con_out_stage0[33]), .outData_34(wire_con_out_stage0[34]), .outData_35(wire_con_out_stage0[35]), .outData_36(wire_con_out_stage0[36]), .outData_37(wire_con_out_stage0[37]), .outData_38(wire_con_out_stage0[38]), .outData_39(wire_con_out_stage0[39]), .outData_40(wire_con_out_stage0[40]), .outData_41(wire_con_out_stage0[41]), .outData_42(wire_con_out_stage0[42]), .outData_43(wire_con_out_stage0[43]), .outData_44(wire_con_out_stage0[44]), .outData_45(wire_con_out_stage0[45]), .outData_46(wire_con_out_stage0[46]), .outData_47(wire_con_out_stage0[47]), .outData_48(wire_con_out_stage0[48]), .outData_49(wire_con_out_stage0[49]), .outData_50(wire_con_out_stage0[50]), .outData_51(wire_con_out_stage0[51]), .outData_52(wire_con_out_stage0[52]), .outData_53(wire_con_out_stage0[53]), .outData_54(wire_con_out_stage0[54]), .outData_55(wire_con_out_stage0[55]), .outData_56(wire_con_out_stage0[56]), .outData_57(wire_con_out_stage0[57]), .outData_58(wire_con_out_stage0[58]), .outData_59(wire_con_out_stage0[59]), .outData_60(wire_con_out_stage0[60]), .outData_61(wire_con_out_stage0[61]), .outData_62(wire_con_out_stage0[62]), .outData_63(wire_con_out_stage0[63]), 
        .in_start(con_in_start_stage0), .out_start(in_start_stage1), .clk(clk), .rst(rst)); 

  
  s10_switch_ctrl_dp64_st0_per0L s8_switch_ctrl_stage_0(.in_start(in_start_stage0),.ctrl_out(wire_ctrl_stage0),.clk(clk), .rst(rst));

  wire [DATA_WIDTH-1:0] wire_con_in_stage1[63:0];
  wire [DATA_WIDTH-1:0] wire_con_out_stage1[63:0];
  wire [31:0] wire_ctrl_stage1;

  s10_switches_stage_st1_0_L switch_stage_1(
        .inData_0(wire_con_out_stage0[0]), .inData_1(wire_con_out_stage0[1]), .inData_2(wire_con_out_stage0[2]), .inData_3(wire_con_out_stage0[3]), .inData_4(wire_con_out_stage0[4]), .inData_5(wire_con_out_stage0[5]), .inData_6(wire_con_out_stage0[6]), .inData_7(wire_con_out_stage0[7]), .inData_8(wire_con_out_stage0[8]), .inData_9(wire_con_out_stage0[9]), .inData_10(wire_con_out_stage0[10]), .inData_11(wire_con_out_stage0[11]), .inData_12(wire_con_out_stage0[12]), .inData_13(wire_con_out_stage0[13]), .inData_14(wire_con_out_stage0[14]), .inData_15(wire_con_out_stage0[15]), .inData_16(wire_con_out_stage0[16]), .inData_17(wire_con_out_stage0[17]), .inData_18(wire_con_out_stage0[18]), .inData_19(wire_con_out_stage0[19]), .inData_20(wire_con_out_stage0[20]), .inData_21(wire_con_out_stage0[21]), .inData_22(wire_con_out_stage0[22]), .inData_23(wire_con_out_stage0[23]), .inData_24(wire_con_out_stage0[24]), .inData_25(wire_con_out_stage0[25]), .inData_26(wire_con_out_stage0[26]), .inData_27(wire_con_out_stage0[27]), .inData_28(wire_con_out_stage0[28]), .inData_29(wire_con_out_stage0[29]), .inData_30(wire_con_out_stage0[30]), .inData_31(wire_con_out_stage0[31]), .inData_32(wire_con_out_stage0[32]), .inData_33(wire_con_out_stage0[33]), .inData_34(wire_con_out_stage0[34]), .inData_35(wire_con_out_stage0[35]), .inData_36(wire_con_out_stage0[36]), .inData_37(wire_con_out_stage0[37]), .inData_38(wire_con_out_stage0[38]), .inData_39(wire_con_out_stage0[39]), .inData_40(wire_con_out_stage0[40]), .inData_41(wire_con_out_stage0[41]), .inData_42(wire_con_out_stage0[42]), .inData_43(wire_con_out_stage0[43]), .inData_44(wire_con_out_stage0[44]), .inData_45(wire_con_out_stage0[45]), .inData_46(wire_con_out_stage0[46]), .inData_47(wire_con_out_stage0[47]), .inData_48(wire_con_out_stage0[48]), .inData_49(wire_con_out_stage0[49]), .inData_50(wire_con_out_stage0[50]), .inData_51(wire_con_out_stage0[51]), .inData_52(wire_con_out_stage0[52]), .inData_53(wire_con_out_stage0[53]), .inData_54(wire_con_out_stage0[54]), .inData_55(wire_con_out_stage0[55]), .inData_56(wire_con_out_stage0[56]), .inData_57(wire_con_out_stage0[57]), .inData_58(wire_con_out_stage0[58]), .inData_59(wire_con_out_stage0[59]), .inData_60(wire_con_out_stage0[60]), .inData_61(wire_con_out_stage0[61]), .inData_62(wire_con_out_stage0[62]), .inData_63(wire_con_out_stage0[63]), 
        .outData_0(wire_con_in_stage1[0]), .outData_1(wire_con_in_stage1[1]), .outData_2(wire_con_in_stage1[2]), .outData_3(wire_con_in_stage1[3]), .outData_4(wire_con_in_stage1[4]), .outData_5(wire_con_in_stage1[5]), .outData_6(wire_con_in_stage1[6]), .outData_7(wire_con_in_stage1[7]), .outData_8(wire_con_in_stage1[8]), .outData_9(wire_con_in_stage1[9]), .outData_10(wire_con_in_stage1[10]), .outData_11(wire_con_in_stage1[11]), .outData_12(wire_con_in_stage1[12]), .outData_13(wire_con_in_stage1[13]), .outData_14(wire_con_in_stage1[14]), .outData_15(wire_con_in_stage1[15]), .outData_16(wire_con_in_stage1[16]), .outData_17(wire_con_in_stage1[17]), .outData_18(wire_con_in_stage1[18]), .outData_19(wire_con_in_stage1[19]), .outData_20(wire_con_in_stage1[20]), .outData_21(wire_con_in_stage1[21]), .outData_22(wire_con_in_stage1[22]), .outData_23(wire_con_in_stage1[23]), .outData_24(wire_con_in_stage1[24]), .outData_25(wire_con_in_stage1[25]), .outData_26(wire_con_in_stage1[26]), .outData_27(wire_con_in_stage1[27]), .outData_28(wire_con_in_stage1[28]), .outData_29(wire_con_in_stage1[29]), .outData_30(wire_con_in_stage1[30]), .outData_31(wire_con_in_stage1[31]), .outData_32(wire_con_in_stage1[32]), .outData_33(wire_con_in_stage1[33]), .outData_34(wire_con_in_stage1[34]), .outData_35(wire_con_in_stage1[35]), .outData_36(wire_con_in_stage1[36]), .outData_37(wire_con_in_stage1[37]), .outData_38(wire_con_in_stage1[38]), .outData_39(wire_con_in_stage1[39]), .outData_40(wire_con_in_stage1[40]), .outData_41(wire_con_in_stage1[41]), .outData_42(wire_con_in_stage1[42]), .outData_43(wire_con_in_stage1[43]), .outData_44(wire_con_in_stage1[44]), .outData_45(wire_con_in_stage1[45]), .outData_46(wire_con_in_stage1[46]), .outData_47(wire_con_in_stage1[47]), .outData_48(wire_con_in_stage1[48]), .outData_49(wire_con_in_stage1[49]), .outData_50(wire_con_in_stage1[50]), .outData_51(wire_con_in_stage1[51]), .outData_52(wire_con_in_stage1[52]), .outData_53(wire_con_in_stage1[53]), .outData_54(wire_con_in_stage1[54]), .outData_55(wire_con_in_stage1[55]), .outData_56(wire_con_in_stage1[56]), .outData_57(wire_con_in_stage1[57]), .outData_58(wire_con_in_stage1[58]), .outData_59(wire_con_in_stage1[59]), .outData_60(wire_con_in_stage1[60]), .outData_61(wire_con_in_stage1[61]), .outData_62(wire_con_in_stage1[62]), .outData_63(wire_con_in_stage1[63]), 
        .in_start(in_start_stage1), .out_start(con_in_start_stage1), .ctrl(wire_ctrl_stage1), .clk(clk), .rst(rst));
  
  s10_wireCon_dp64_st1_L wire_stage_1(
        .inData_0(wire_con_in_stage1[0]), .inData_1(wire_con_in_stage1[1]), .inData_2(wire_con_in_stage1[2]), .inData_3(wire_con_in_stage1[3]), .inData_4(wire_con_in_stage1[4]), .inData_5(wire_con_in_stage1[5]), .inData_6(wire_con_in_stage1[6]), .inData_7(wire_con_in_stage1[7]), .inData_8(wire_con_in_stage1[8]), .inData_9(wire_con_in_stage1[9]), .inData_10(wire_con_in_stage1[10]), .inData_11(wire_con_in_stage1[11]), .inData_12(wire_con_in_stage1[12]), .inData_13(wire_con_in_stage1[13]), .inData_14(wire_con_in_stage1[14]), .inData_15(wire_con_in_stage1[15]), .inData_16(wire_con_in_stage1[16]), .inData_17(wire_con_in_stage1[17]), .inData_18(wire_con_in_stage1[18]), .inData_19(wire_con_in_stage1[19]), .inData_20(wire_con_in_stage1[20]), .inData_21(wire_con_in_stage1[21]), .inData_22(wire_con_in_stage1[22]), .inData_23(wire_con_in_stage1[23]), .inData_24(wire_con_in_stage1[24]), .inData_25(wire_con_in_stage1[25]), .inData_26(wire_con_in_stage1[26]), .inData_27(wire_con_in_stage1[27]), .inData_28(wire_con_in_stage1[28]), .inData_29(wire_con_in_stage1[29]), .inData_30(wire_con_in_stage1[30]), .inData_31(wire_con_in_stage1[31]), .inData_32(wire_con_in_stage1[32]), .inData_33(wire_con_in_stage1[33]), .inData_34(wire_con_in_stage1[34]), .inData_35(wire_con_in_stage1[35]), .inData_36(wire_con_in_stage1[36]), .inData_37(wire_con_in_stage1[37]), .inData_38(wire_con_in_stage1[38]), .inData_39(wire_con_in_stage1[39]), .inData_40(wire_con_in_stage1[40]), .inData_41(wire_con_in_stage1[41]), .inData_42(wire_con_in_stage1[42]), .inData_43(wire_con_in_stage1[43]), .inData_44(wire_con_in_stage1[44]), .inData_45(wire_con_in_stage1[45]), .inData_46(wire_con_in_stage1[46]), .inData_47(wire_con_in_stage1[47]), .inData_48(wire_con_in_stage1[48]), .inData_49(wire_con_in_stage1[49]), .inData_50(wire_con_in_stage1[50]), .inData_51(wire_con_in_stage1[51]), .inData_52(wire_con_in_stage1[52]), .inData_53(wire_con_in_stage1[53]), .inData_54(wire_con_in_stage1[54]), .inData_55(wire_con_in_stage1[55]), .inData_56(wire_con_in_stage1[56]), .inData_57(wire_con_in_stage1[57]), .inData_58(wire_con_in_stage1[58]), .inData_59(wire_con_in_stage1[59]), .inData_60(wire_con_in_stage1[60]), .inData_61(wire_con_in_stage1[61]), .inData_62(wire_con_in_stage1[62]), .inData_63(wire_con_in_stage1[63]), 
        .outData_0(wire_con_out_stage1[0]), .outData_1(wire_con_out_stage1[1]), .outData_2(wire_con_out_stage1[2]), .outData_3(wire_con_out_stage1[3]), .outData_4(wire_con_out_stage1[4]), .outData_5(wire_con_out_stage1[5]), .outData_6(wire_con_out_stage1[6]), .outData_7(wire_con_out_stage1[7]), .outData_8(wire_con_out_stage1[8]), .outData_9(wire_con_out_stage1[9]), .outData_10(wire_con_out_stage1[10]), .outData_11(wire_con_out_stage1[11]), .outData_12(wire_con_out_stage1[12]), .outData_13(wire_con_out_stage1[13]), .outData_14(wire_con_out_stage1[14]), .outData_15(wire_con_out_stage1[15]), .outData_16(wire_con_out_stage1[16]), .outData_17(wire_con_out_stage1[17]), .outData_18(wire_con_out_stage1[18]), .outData_19(wire_con_out_stage1[19]), .outData_20(wire_con_out_stage1[20]), .outData_21(wire_con_out_stage1[21]), .outData_22(wire_con_out_stage1[22]), .outData_23(wire_con_out_stage1[23]), .outData_24(wire_con_out_stage1[24]), .outData_25(wire_con_out_stage1[25]), .outData_26(wire_con_out_stage1[26]), .outData_27(wire_con_out_stage1[27]), .outData_28(wire_con_out_stage1[28]), .outData_29(wire_con_out_stage1[29]), .outData_30(wire_con_out_stage1[30]), .outData_31(wire_con_out_stage1[31]), .outData_32(wire_con_out_stage1[32]), .outData_33(wire_con_out_stage1[33]), .outData_34(wire_con_out_stage1[34]), .outData_35(wire_con_out_stage1[35]), .outData_36(wire_con_out_stage1[36]), .outData_37(wire_con_out_stage1[37]), .outData_38(wire_con_out_stage1[38]), .outData_39(wire_con_out_stage1[39]), .outData_40(wire_con_out_stage1[40]), .outData_41(wire_con_out_stage1[41]), .outData_42(wire_con_out_stage1[42]), .outData_43(wire_con_out_stage1[43]), .outData_44(wire_con_out_stage1[44]), .outData_45(wire_con_out_stage1[45]), .outData_46(wire_con_out_stage1[46]), .outData_47(wire_con_out_stage1[47]), .outData_48(wire_con_out_stage1[48]), .outData_49(wire_con_out_stage1[49]), .outData_50(wire_con_out_stage1[50]), .outData_51(wire_con_out_stage1[51]), .outData_52(wire_con_out_stage1[52]), .outData_53(wire_con_out_stage1[53]), .outData_54(wire_con_out_stage1[54]), .outData_55(wire_con_out_stage1[55]), .outData_56(wire_con_out_stage1[56]), .outData_57(wire_con_out_stage1[57]), .outData_58(wire_con_out_stage1[58]), .outData_59(wire_con_out_stage1[59]), .outData_60(wire_con_out_stage1[60]), .outData_61(wire_con_out_stage1[61]), .outData_62(wire_con_out_stage1[62]), .outData_63(wire_con_out_stage1[63]), 
        .in_start(con_in_start_stage1), .out_start(in_start_stage2), .clk(clk), .rst(rst)); 

  
  s10_switch_ctrl_dp64_st1_per0L s8_switch_ctrl_stage_1(.in_start(in_start_stage1),.ctrl_out(wire_ctrl_stage1),.clk(clk), .rst(rst));

  wire [DATA_WIDTH-1:0] wire_con_in_stage2[63:0];
  wire [DATA_WIDTH-1:0] wire_con_out_stage2[63:0];
  wire [31:0] wire_ctrl_stage2;

  s10_switches_stage_st2_0_L switch_stage_2(
        .inData_0(wire_con_out_stage1[0]), .inData_1(wire_con_out_stage1[1]), .inData_2(wire_con_out_stage1[2]), .inData_3(wire_con_out_stage1[3]), .inData_4(wire_con_out_stage1[4]), .inData_5(wire_con_out_stage1[5]), .inData_6(wire_con_out_stage1[6]), .inData_7(wire_con_out_stage1[7]), .inData_8(wire_con_out_stage1[8]), .inData_9(wire_con_out_stage1[9]), .inData_10(wire_con_out_stage1[10]), .inData_11(wire_con_out_stage1[11]), .inData_12(wire_con_out_stage1[12]), .inData_13(wire_con_out_stage1[13]), .inData_14(wire_con_out_stage1[14]), .inData_15(wire_con_out_stage1[15]), .inData_16(wire_con_out_stage1[16]), .inData_17(wire_con_out_stage1[17]), .inData_18(wire_con_out_stage1[18]), .inData_19(wire_con_out_stage1[19]), .inData_20(wire_con_out_stage1[20]), .inData_21(wire_con_out_stage1[21]), .inData_22(wire_con_out_stage1[22]), .inData_23(wire_con_out_stage1[23]), .inData_24(wire_con_out_stage1[24]), .inData_25(wire_con_out_stage1[25]), .inData_26(wire_con_out_stage1[26]), .inData_27(wire_con_out_stage1[27]), .inData_28(wire_con_out_stage1[28]), .inData_29(wire_con_out_stage1[29]), .inData_30(wire_con_out_stage1[30]), .inData_31(wire_con_out_stage1[31]), .inData_32(wire_con_out_stage1[32]), .inData_33(wire_con_out_stage1[33]), .inData_34(wire_con_out_stage1[34]), .inData_35(wire_con_out_stage1[35]), .inData_36(wire_con_out_stage1[36]), .inData_37(wire_con_out_stage1[37]), .inData_38(wire_con_out_stage1[38]), .inData_39(wire_con_out_stage1[39]), .inData_40(wire_con_out_stage1[40]), .inData_41(wire_con_out_stage1[41]), .inData_42(wire_con_out_stage1[42]), .inData_43(wire_con_out_stage1[43]), .inData_44(wire_con_out_stage1[44]), .inData_45(wire_con_out_stage1[45]), .inData_46(wire_con_out_stage1[46]), .inData_47(wire_con_out_stage1[47]), .inData_48(wire_con_out_stage1[48]), .inData_49(wire_con_out_stage1[49]), .inData_50(wire_con_out_stage1[50]), .inData_51(wire_con_out_stage1[51]), .inData_52(wire_con_out_stage1[52]), .inData_53(wire_con_out_stage1[53]), .inData_54(wire_con_out_stage1[54]), .inData_55(wire_con_out_stage1[55]), .inData_56(wire_con_out_stage1[56]), .inData_57(wire_con_out_stage1[57]), .inData_58(wire_con_out_stage1[58]), .inData_59(wire_con_out_stage1[59]), .inData_60(wire_con_out_stage1[60]), .inData_61(wire_con_out_stage1[61]), .inData_62(wire_con_out_stage1[62]), .inData_63(wire_con_out_stage1[63]), 
        .outData_0(wire_con_in_stage2[0]), .outData_1(wire_con_in_stage2[1]), .outData_2(wire_con_in_stage2[2]), .outData_3(wire_con_in_stage2[3]), .outData_4(wire_con_in_stage2[4]), .outData_5(wire_con_in_stage2[5]), .outData_6(wire_con_in_stage2[6]), .outData_7(wire_con_in_stage2[7]), .outData_8(wire_con_in_stage2[8]), .outData_9(wire_con_in_stage2[9]), .outData_10(wire_con_in_stage2[10]), .outData_11(wire_con_in_stage2[11]), .outData_12(wire_con_in_stage2[12]), .outData_13(wire_con_in_stage2[13]), .outData_14(wire_con_in_stage2[14]), .outData_15(wire_con_in_stage2[15]), .outData_16(wire_con_in_stage2[16]), .outData_17(wire_con_in_stage2[17]), .outData_18(wire_con_in_stage2[18]), .outData_19(wire_con_in_stage2[19]), .outData_20(wire_con_in_stage2[20]), .outData_21(wire_con_in_stage2[21]), .outData_22(wire_con_in_stage2[22]), .outData_23(wire_con_in_stage2[23]), .outData_24(wire_con_in_stage2[24]), .outData_25(wire_con_in_stage2[25]), .outData_26(wire_con_in_stage2[26]), .outData_27(wire_con_in_stage2[27]), .outData_28(wire_con_in_stage2[28]), .outData_29(wire_con_in_stage2[29]), .outData_30(wire_con_in_stage2[30]), .outData_31(wire_con_in_stage2[31]), .outData_32(wire_con_in_stage2[32]), .outData_33(wire_con_in_stage2[33]), .outData_34(wire_con_in_stage2[34]), .outData_35(wire_con_in_stage2[35]), .outData_36(wire_con_in_stage2[36]), .outData_37(wire_con_in_stage2[37]), .outData_38(wire_con_in_stage2[38]), .outData_39(wire_con_in_stage2[39]), .outData_40(wire_con_in_stage2[40]), .outData_41(wire_con_in_stage2[41]), .outData_42(wire_con_in_stage2[42]), .outData_43(wire_con_in_stage2[43]), .outData_44(wire_con_in_stage2[44]), .outData_45(wire_con_in_stage2[45]), .outData_46(wire_con_in_stage2[46]), .outData_47(wire_con_in_stage2[47]), .outData_48(wire_con_in_stage2[48]), .outData_49(wire_con_in_stage2[49]), .outData_50(wire_con_in_stage2[50]), .outData_51(wire_con_in_stage2[51]), .outData_52(wire_con_in_stage2[52]), .outData_53(wire_con_in_stage2[53]), .outData_54(wire_con_in_stage2[54]), .outData_55(wire_con_in_stage2[55]), .outData_56(wire_con_in_stage2[56]), .outData_57(wire_con_in_stage2[57]), .outData_58(wire_con_in_stage2[58]), .outData_59(wire_con_in_stage2[59]), .outData_60(wire_con_in_stage2[60]), .outData_61(wire_con_in_stage2[61]), .outData_62(wire_con_in_stage2[62]), .outData_63(wire_con_in_stage2[63]), 
        .in_start(in_start_stage2), .out_start(con_in_start_stage2), .ctrl(wire_ctrl_stage2), .clk(clk), .rst(rst));
  
  s10_wireCon_dp64_st2_L wire_stage_2(
        .inData_0(wire_con_in_stage2[0]), .inData_1(wire_con_in_stage2[1]), .inData_2(wire_con_in_stage2[2]), .inData_3(wire_con_in_stage2[3]), .inData_4(wire_con_in_stage2[4]), .inData_5(wire_con_in_stage2[5]), .inData_6(wire_con_in_stage2[6]), .inData_7(wire_con_in_stage2[7]), .inData_8(wire_con_in_stage2[8]), .inData_9(wire_con_in_stage2[9]), .inData_10(wire_con_in_stage2[10]), .inData_11(wire_con_in_stage2[11]), .inData_12(wire_con_in_stage2[12]), .inData_13(wire_con_in_stage2[13]), .inData_14(wire_con_in_stage2[14]), .inData_15(wire_con_in_stage2[15]), .inData_16(wire_con_in_stage2[16]), .inData_17(wire_con_in_stage2[17]), .inData_18(wire_con_in_stage2[18]), .inData_19(wire_con_in_stage2[19]), .inData_20(wire_con_in_stage2[20]), .inData_21(wire_con_in_stage2[21]), .inData_22(wire_con_in_stage2[22]), .inData_23(wire_con_in_stage2[23]), .inData_24(wire_con_in_stage2[24]), .inData_25(wire_con_in_stage2[25]), .inData_26(wire_con_in_stage2[26]), .inData_27(wire_con_in_stage2[27]), .inData_28(wire_con_in_stage2[28]), .inData_29(wire_con_in_stage2[29]), .inData_30(wire_con_in_stage2[30]), .inData_31(wire_con_in_stage2[31]), .inData_32(wire_con_in_stage2[32]), .inData_33(wire_con_in_stage2[33]), .inData_34(wire_con_in_stage2[34]), .inData_35(wire_con_in_stage2[35]), .inData_36(wire_con_in_stage2[36]), .inData_37(wire_con_in_stage2[37]), .inData_38(wire_con_in_stage2[38]), .inData_39(wire_con_in_stage2[39]), .inData_40(wire_con_in_stage2[40]), .inData_41(wire_con_in_stage2[41]), .inData_42(wire_con_in_stage2[42]), .inData_43(wire_con_in_stage2[43]), .inData_44(wire_con_in_stage2[44]), .inData_45(wire_con_in_stage2[45]), .inData_46(wire_con_in_stage2[46]), .inData_47(wire_con_in_stage2[47]), .inData_48(wire_con_in_stage2[48]), .inData_49(wire_con_in_stage2[49]), .inData_50(wire_con_in_stage2[50]), .inData_51(wire_con_in_stage2[51]), .inData_52(wire_con_in_stage2[52]), .inData_53(wire_con_in_stage2[53]), .inData_54(wire_con_in_stage2[54]), .inData_55(wire_con_in_stage2[55]), .inData_56(wire_con_in_stage2[56]), .inData_57(wire_con_in_stage2[57]), .inData_58(wire_con_in_stage2[58]), .inData_59(wire_con_in_stage2[59]), .inData_60(wire_con_in_stage2[60]), .inData_61(wire_con_in_stage2[61]), .inData_62(wire_con_in_stage2[62]), .inData_63(wire_con_in_stage2[63]), 
        .outData_0(wire_con_out_stage2[0]), .outData_1(wire_con_out_stage2[1]), .outData_2(wire_con_out_stage2[2]), .outData_3(wire_con_out_stage2[3]), .outData_4(wire_con_out_stage2[4]), .outData_5(wire_con_out_stage2[5]), .outData_6(wire_con_out_stage2[6]), .outData_7(wire_con_out_stage2[7]), .outData_8(wire_con_out_stage2[8]), .outData_9(wire_con_out_stage2[9]), .outData_10(wire_con_out_stage2[10]), .outData_11(wire_con_out_stage2[11]), .outData_12(wire_con_out_stage2[12]), .outData_13(wire_con_out_stage2[13]), .outData_14(wire_con_out_stage2[14]), .outData_15(wire_con_out_stage2[15]), .outData_16(wire_con_out_stage2[16]), .outData_17(wire_con_out_stage2[17]), .outData_18(wire_con_out_stage2[18]), .outData_19(wire_con_out_stage2[19]), .outData_20(wire_con_out_stage2[20]), .outData_21(wire_con_out_stage2[21]), .outData_22(wire_con_out_stage2[22]), .outData_23(wire_con_out_stage2[23]), .outData_24(wire_con_out_stage2[24]), .outData_25(wire_con_out_stage2[25]), .outData_26(wire_con_out_stage2[26]), .outData_27(wire_con_out_stage2[27]), .outData_28(wire_con_out_stage2[28]), .outData_29(wire_con_out_stage2[29]), .outData_30(wire_con_out_stage2[30]), .outData_31(wire_con_out_stage2[31]), .outData_32(wire_con_out_stage2[32]), .outData_33(wire_con_out_stage2[33]), .outData_34(wire_con_out_stage2[34]), .outData_35(wire_con_out_stage2[35]), .outData_36(wire_con_out_stage2[36]), .outData_37(wire_con_out_stage2[37]), .outData_38(wire_con_out_stage2[38]), .outData_39(wire_con_out_stage2[39]), .outData_40(wire_con_out_stage2[40]), .outData_41(wire_con_out_stage2[41]), .outData_42(wire_con_out_stage2[42]), .outData_43(wire_con_out_stage2[43]), .outData_44(wire_con_out_stage2[44]), .outData_45(wire_con_out_stage2[45]), .outData_46(wire_con_out_stage2[46]), .outData_47(wire_con_out_stage2[47]), .outData_48(wire_con_out_stage2[48]), .outData_49(wire_con_out_stage2[49]), .outData_50(wire_con_out_stage2[50]), .outData_51(wire_con_out_stage2[51]), .outData_52(wire_con_out_stage2[52]), .outData_53(wire_con_out_stage2[53]), .outData_54(wire_con_out_stage2[54]), .outData_55(wire_con_out_stage2[55]), .outData_56(wire_con_out_stage2[56]), .outData_57(wire_con_out_stage2[57]), .outData_58(wire_con_out_stage2[58]), .outData_59(wire_con_out_stage2[59]), .outData_60(wire_con_out_stage2[60]), .outData_61(wire_con_out_stage2[61]), .outData_62(wire_con_out_stage2[62]), .outData_63(wire_con_out_stage2[63]), 
        .in_start(con_in_start_stage2), .out_start(in_start_stage3), .clk(clk), .rst(rst)); 

  
  s10_switch_ctrl_dp64_st2_per0L s8_switch_ctrl_stage_2(.in_start(in_start_stage2),.ctrl_out(wire_ctrl_stage2),.clk(clk), .rst(rst));

  wire [DATA_WIDTH-1:0] wire_con_in_stage3[63:0];
  wire [DATA_WIDTH-1:0] wire_con_out_stage3[63:0];
  wire [31:0] wire_ctrl_stage3;

  s10_switches_stage_st3_0_L switch_stage_3(
        .inData_0(wire_con_out_stage2[0]), .inData_1(wire_con_out_stage2[1]), .inData_2(wire_con_out_stage2[2]), .inData_3(wire_con_out_stage2[3]), .inData_4(wire_con_out_stage2[4]), .inData_5(wire_con_out_stage2[5]), .inData_6(wire_con_out_stage2[6]), .inData_7(wire_con_out_stage2[7]), .inData_8(wire_con_out_stage2[8]), .inData_9(wire_con_out_stage2[9]), .inData_10(wire_con_out_stage2[10]), .inData_11(wire_con_out_stage2[11]), .inData_12(wire_con_out_stage2[12]), .inData_13(wire_con_out_stage2[13]), .inData_14(wire_con_out_stage2[14]), .inData_15(wire_con_out_stage2[15]), .inData_16(wire_con_out_stage2[16]), .inData_17(wire_con_out_stage2[17]), .inData_18(wire_con_out_stage2[18]), .inData_19(wire_con_out_stage2[19]), .inData_20(wire_con_out_stage2[20]), .inData_21(wire_con_out_stage2[21]), .inData_22(wire_con_out_stage2[22]), .inData_23(wire_con_out_stage2[23]), .inData_24(wire_con_out_stage2[24]), .inData_25(wire_con_out_stage2[25]), .inData_26(wire_con_out_stage2[26]), .inData_27(wire_con_out_stage2[27]), .inData_28(wire_con_out_stage2[28]), .inData_29(wire_con_out_stage2[29]), .inData_30(wire_con_out_stage2[30]), .inData_31(wire_con_out_stage2[31]), .inData_32(wire_con_out_stage2[32]), .inData_33(wire_con_out_stage2[33]), .inData_34(wire_con_out_stage2[34]), .inData_35(wire_con_out_stage2[35]), .inData_36(wire_con_out_stage2[36]), .inData_37(wire_con_out_stage2[37]), .inData_38(wire_con_out_stage2[38]), .inData_39(wire_con_out_stage2[39]), .inData_40(wire_con_out_stage2[40]), .inData_41(wire_con_out_stage2[41]), .inData_42(wire_con_out_stage2[42]), .inData_43(wire_con_out_stage2[43]), .inData_44(wire_con_out_stage2[44]), .inData_45(wire_con_out_stage2[45]), .inData_46(wire_con_out_stage2[46]), .inData_47(wire_con_out_stage2[47]), .inData_48(wire_con_out_stage2[48]), .inData_49(wire_con_out_stage2[49]), .inData_50(wire_con_out_stage2[50]), .inData_51(wire_con_out_stage2[51]), .inData_52(wire_con_out_stage2[52]), .inData_53(wire_con_out_stage2[53]), .inData_54(wire_con_out_stage2[54]), .inData_55(wire_con_out_stage2[55]), .inData_56(wire_con_out_stage2[56]), .inData_57(wire_con_out_stage2[57]), .inData_58(wire_con_out_stage2[58]), .inData_59(wire_con_out_stage2[59]), .inData_60(wire_con_out_stage2[60]), .inData_61(wire_con_out_stage2[61]), .inData_62(wire_con_out_stage2[62]), .inData_63(wire_con_out_stage2[63]), 
        .outData_0(wire_con_in_stage3[0]), .outData_1(wire_con_in_stage3[1]), .outData_2(wire_con_in_stage3[2]), .outData_3(wire_con_in_stage3[3]), .outData_4(wire_con_in_stage3[4]), .outData_5(wire_con_in_stage3[5]), .outData_6(wire_con_in_stage3[6]), .outData_7(wire_con_in_stage3[7]), .outData_8(wire_con_in_stage3[8]), .outData_9(wire_con_in_stage3[9]), .outData_10(wire_con_in_stage3[10]), .outData_11(wire_con_in_stage3[11]), .outData_12(wire_con_in_stage3[12]), .outData_13(wire_con_in_stage3[13]), .outData_14(wire_con_in_stage3[14]), .outData_15(wire_con_in_stage3[15]), .outData_16(wire_con_in_stage3[16]), .outData_17(wire_con_in_stage3[17]), .outData_18(wire_con_in_stage3[18]), .outData_19(wire_con_in_stage3[19]), .outData_20(wire_con_in_stage3[20]), .outData_21(wire_con_in_stage3[21]), .outData_22(wire_con_in_stage3[22]), .outData_23(wire_con_in_stage3[23]), .outData_24(wire_con_in_stage3[24]), .outData_25(wire_con_in_stage3[25]), .outData_26(wire_con_in_stage3[26]), .outData_27(wire_con_in_stage3[27]), .outData_28(wire_con_in_stage3[28]), .outData_29(wire_con_in_stage3[29]), .outData_30(wire_con_in_stage3[30]), .outData_31(wire_con_in_stage3[31]), .outData_32(wire_con_in_stage3[32]), .outData_33(wire_con_in_stage3[33]), .outData_34(wire_con_in_stage3[34]), .outData_35(wire_con_in_stage3[35]), .outData_36(wire_con_in_stage3[36]), .outData_37(wire_con_in_stage3[37]), .outData_38(wire_con_in_stage3[38]), .outData_39(wire_con_in_stage3[39]), .outData_40(wire_con_in_stage3[40]), .outData_41(wire_con_in_stage3[41]), .outData_42(wire_con_in_stage3[42]), .outData_43(wire_con_in_stage3[43]), .outData_44(wire_con_in_stage3[44]), .outData_45(wire_con_in_stage3[45]), .outData_46(wire_con_in_stage3[46]), .outData_47(wire_con_in_stage3[47]), .outData_48(wire_con_in_stage3[48]), .outData_49(wire_con_in_stage3[49]), .outData_50(wire_con_in_stage3[50]), .outData_51(wire_con_in_stage3[51]), .outData_52(wire_con_in_stage3[52]), .outData_53(wire_con_in_stage3[53]), .outData_54(wire_con_in_stage3[54]), .outData_55(wire_con_in_stage3[55]), .outData_56(wire_con_in_stage3[56]), .outData_57(wire_con_in_stage3[57]), .outData_58(wire_con_in_stage3[58]), .outData_59(wire_con_in_stage3[59]), .outData_60(wire_con_in_stage3[60]), .outData_61(wire_con_in_stage3[61]), .outData_62(wire_con_in_stage3[62]), .outData_63(wire_con_in_stage3[63]), 
        .in_start(in_start_stage3), .out_start(con_in_start_stage3), .ctrl(wire_ctrl_stage3), .clk(clk), .rst(rst));
  
  s10_wireCon_dp64_st3_L wire_stage_3(
        .inData_0(wire_con_in_stage3[0]), .inData_1(wire_con_in_stage3[1]), .inData_2(wire_con_in_stage3[2]), .inData_3(wire_con_in_stage3[3]), .inData_4(wire_con_in_stage3[4]), .inData_5(wire_con_in_stage3[5]), .inData_6(wire_con_in_stage3[6]), .inData_7(wire_con_in_stage3[7]), .inData_8(wire_con_in_stage3[8]), .inData_9(wire_con_in_stage3[9]), .inData_10(wire_con_in_stage3[10]), .inData_11(wire_con_in_stage3[11]), .inData_12(wire_con_in_stage3[12]), .inData_13(wire_con_in_stage3[13]), .inData_14(wire_con_in_stage3[14]), .inData_15(wire_con_in_stage3[15]), .inData_16(wire_con_in_stage3[16]), .inData_17(wire_con_in_stage3[17]), .inData_18(wire_con_in_stage3[18]), .inData_19(wire_con_in_stage3[19]), .inData_20(wire_con_in_stage3[20]), .inData_21(wire_con_in_stage3[21]), .inData_22(wire_con_in_stage3[22]), .inData_23(wire_con_in_stage3[23]), .inData_24(wire_con_in_stage3[24]), .inData_25(wire_con_in_stage3[25]), .inData_26(wire_con_in_stage3[26]), .inData_27(wire_con_in_stage3[27]), .inData_28(wire_con_in_stage3[28]), .inData_29(wire_con_in_stage3[29]), .inData_30(wire_con_in_stage3[30]), .inData_31(wire_con_in_stage3[31]), .inData_32(wire_con_in_stage3[32]), .inData_33(wire_con_in_stage3[33]), .inData_34(wire_con_in_stage3[34]), .inData_35(wire_con_in_stage3[35]), .inData_36(wire_con_in_stage3[36]), .inData_37(wire_con_in_stage3[37]), .inData_38(wire_con_in_stage3[38]), .inData_39(wire_con_in_stage3[39]), .inData_40(wire_con_in_stage3[40]), .inData_41(wire_con_in_stage3[41]), .inData_42(wire_con_in_stage3[42]), .inData_43(wire_con_in_stage3[43]), .inData_44(wire_con_in_stage3[44]), .inData_45(wire_con_in_stage3[45]), .inData_46(wire_con_in_stage3[46]), .inData_47(wire_con_in_stage3[47]), .inData_48(wire_con_in_stage3[48]), .inData_49(wire_con_in_stage3[49]), .inData_50(wire_con_in_stage3[50]), .inData_51(wire_con_in_stage3[51]), .inData_52(wire_con_in_stage3[52]), .inData_53(wire_con_in_stage3[53]), .inData_54(wire_con_in_stage3[54]), .inData_55(wire_con_in_stage3[55]), .inData_56(wire_con_in_stage3[56]), .inData_57(wire_con_in_stage3[57]), .inData_58(wire_con_in_stage3[58]), .inData_59(wire_con_in_stage3[59]), .inData_60(wire_con_in_stage3[60]), .inData_61(wire_con_in_stage3[61]), .inData_62(wire_con_in_stage3[62]), .inData_63(wire_con_in_stage3[63]), 
        .outData_0(wire_con_out_stage3[0]), .outData_1(wire_con_out_stage3[1]), .outData_2(wire_con_out_stage3[2]), .outData_3(wire_con_out_stage3[3]), .outData_4(wire_con_out_stage3[4]), .outData_5(wire_con_out_stage3[5]), .outData_6(wire_con_out_stage3[6]), .outData_7(wire_con_out_stage3[7]), .outData_8(wire_con_out_stage3[8]), .outData_9(wire_con_out_stage3[9]), .outData_10(wire_con_out_stage3[10]), .outData_11(wire_con_out_stage3[11]), .outData_12(wire_con_out_stage3[12]), .outData_13(wire_con_out_stage3[13]), .outData_14(wire_con_out_stage3[14]), .outData_15(wire_con_out_stage3[15]), .outData_16(wire_con_out_stage3[16]), .outData_17(wire_con_out_stage3[17]), .outData_18(wire_con_out_stage3[18]), .outData_19(wire_con_out_stage3[19]), .outData_20(wire_con_out_stage3[20]), .outData_21(wire_con_out_stage3[21]), .outData_22(wire_con_out_stage3[22]), .outData_23(wire_con_out_stage3[23]), .outData_24(wire_con_out_stage3[24]), .outData_25(wire_con_out_stage3[25]), .outData_26(wire_con_out_stage3[26]), .outData_27(wire_con_out_stage3[27]), .outData_28(wire_con_out_stage3[28]), .outData_29(wire_con_out_stage3[29]), .outData_30(wire_con_out_stage3[30]), .outData_31(wire_con_out_stage3[31]), .outData_32(wire_con_out_stage3[32]), .outData_33(wire_con_out_stage3[33]), .outData_34(wire_con_out_stage3[34]), .outData_35(wire_con_out_stage3[35]), .outData_36(wire_con_out_stage3[36]), .outData_37(wire_con_out_stage3[37]), .outData_38(wire_con_out_stage3[38]), .outData_39(wire_con_out_stage3[39]), .outData_40(wire_con_out_stage3[40]), .outData_41(wire_con_out_stage3[41]), .outData_42(wire_con_out_stage3[42]), .outData_43(wire_con_out_stage3[43]), .outData_44(wire_con_out_stage3[44]), .outData_45(wire_con_out_stage3[45]), .outData_46(wire_con_out_stage3[46]), .outData_47(wire_con_out_stage3[47]), .outData_48(wire_con_out_stage3[48]), .outData_49(wire_con_out_stage3[49]), .outData_50(wire_con_out_stage3[50]), .outData_51(wire_con_out_stage3[51]), .outData_52(wire_con_out_stage3[52]), .outData_53(wire_con_out_stage3[53]), .outData_54(wire_con_out_stage3[54]), .outData_55(wire_con_out_stage3[55]), .outData_56(wire_con_out_stage3[56]), .outData_57(wire_con_out_stage3[57]), .outData_58(wire_con_out_stage3[58]), .outData_59(wire_con_out_stage3[59]), .outData_60(wire_con_out_stage3[60]), .outData_61(wire_con_out_stage3[61]), .outData_62(wire_con_out_stage3[62]), .outData_63(wire_con_out_stage3[63]), 
        .in_start(con_in_start_stage3), .out_start(in_start_stage4), .clk(clk), .rst(rst)); 

  
  s10_switch_ctrl_dp64_st3_per0L s8_switch_ctrl_stage_3(.in_start(in_start_stage3),.ctrl_out(wire_ctrl_stage3),.clk(clk), .rst(rst));

  wire [DATA_WIDTH-1:0] wire_con_in_stage4[63:0];
  wire [DATA_WIDTH-1:0] wire_con_out_stage4[63:0];
  wire [31:0] wire_ctrl_stage4;

  s10_switches_stage_st4_0_L switch_stage_4(
        .inData_0(wire_con_out_stage3[0]), .inData_1(wire_con_out_stage3[1]), .inData_2(wire_con_out_stage3[2]), .inData_3(wire_con_out_stage3[3]), .inData_4(wire_con_out_stage3[4]), .inData_5(wire_con_out_stage3[5]), .inData_6(wire_con_out_stage3[6]), .inData_7(wire_con_out_stage3[7]), .inData_8(wire_con_out_stage3[8]), .inData_9(wire_con_out_stage3[9]), .inData_10(wire_con_out_stage3[10]), .inData_11(wire_con_out_stage3[11]), .inData_12(wire_con_out_stage3[12]), .inData_13(wire_con_out_stage3[13]), .inData_14(wire_con_out_stage3[14]), .inData_15(wire_con_out_stage3[15]), .inData_16(wire_con_out_stage3[16]), .inData_17(wire_con_out_stage3[17]), .inData_18(wire_con_out_stage3[18]), .inData_19(wire_con_out_stage3[19]), .inData_20(wire_con_out_stage3[20]), .inData_21(wire_con_out_stage3[21]), .inData_22(wire_con_out_stage3[22]), .inData_23(wire_con_out_stage3[23]), .inData_24(wire_con_out_stage3[24]), .inData_25(wire_con_out_stage3[25]), .inData_26(wire_con_out_stage3[26]), .inData_27(wire_con_out_stage3[27]), .inData_28(wire_con_out_stage3[28]), .inData_29(wire_con_out_stage3[29]), .inData_30(wire_con_out_stage3[30]), .inData_31(wire_con_out_stage3[31]), .inData_32(wire_con_out_stage3[32]), .inData_33(wire_con_out_stage3[33]), .inData_34(wire_con_out_stage3[34]), .inData_35(wire_con_out_stage3[35]), .inData_36(wire_con_out_stage3[36]), .inData_37(wire_con_out_stage3[37]), .inData_38(wire_con_out_stage3[38]), .inData_39(wire_con_out_stage3[39]), .inData_40(wire_con_out_stage3[40]), .inData_41(wire_con_out_stage3[41]), .inData_42(wire_con_out_stage3[42]), .inData_43(wire_con_out_stage3[43]), .inData_44(wire_con_out_stage3[44]), .inData_45(wire_con_out_stage3[45]), .inData_46(wire_con_out_stage3[46]), .inData_47(wire_con_out_stage3[47]), .inData_48(wire_con_out_stage3[48]), .inData_49(wire_con_out_stage3[49]), .inData_50(wire_con_out_stage3[50]), .inData_51(wire_con_out_stage3[51]), .inData_52(wire_con_out_stage3[52]), .inData_53(wire_con_out_stage3[53]), .inData_54(wire_con_out_stage3[54]), .inData_55(wire_con_out_stage3[55]), .inData_56(wire_con_out_stage3[56]), .inData_57(wire_con_out_stage3[57]), .inData_58(wire_con_out_stage3[58]), .inData_59(wire_con_out_stage3[59]), .inData_60(wire_con_out_stage3[60]), .inData_61(wire_con_out_stage3[61]), .inData_62(wire_con_out_stage3[62]), .inData_63(wire_con_out_stage3[63]), 
        .outData_0(wire_con_in_stage4[0]), .outData_1(wire_con_in_stage4[1]), .outData_2(wire_con_in_stage4[2]), .outData_3(wire_con_in_stage4[3]), .outData_4(wire_con_in_stage4[4]), .outData_5(wire_con_in_stage4[5]), .outData_6(wire_con_in_stage4[6]), .outData_7(wire_con_in_stage4[7]), .outData_8(wire_con_in_stage4[8]), .outData_9(wire_con_in_stage4[9]), .outData_10(wire_con_in_stage4[10]), .outData_11(wire_con_in_stage4[11]), .outData_12(wire_con_in_stage4[12]), .outData_13(wire_con_in_stage4[13]), .outData_14(wire_con_in_stage4[14]), .outData_15(wire_con_in_stage4[15]), .outData_16(wire_con_in_stage4[16]), .outData_17(wire_con_in_stage4[17]), .outData_18(wire_con_in_stage4[18]), .outData_19(wire_con_in_stage4[19]), .outData_20(wire_con_in_stage4[20]), .outData_21(wire_con_in_stage4[21]), .outData_22(wire_con_in_stage4[22]), .outData_23(wire_con_in_stage4[23]), .outData_24(wire_con_in_stage4[24]), .outData_25(wire_con_in_stage4[25]), .outData_26(wire_con_in_stage4[26]), .outData_27(wire_con_in_stage4[27]), .outData_28(wire_con_in_stage4[28]), .outData_29(wire_con_in_stage4[29]), .outData_30(wire_con_in_stage4[30]), .outData_31(wire_con_in_stage4[31]), .outData_32(wire_con_in_stage4[32]), .outData_33(wire_con_in_stage4[33]), .outData_34(wire_con_in_stage4[34]), .outData_35(wire_con_in_stage4[35]), .outData_36(wire_con_in_stage4[36]), .outData_37(wire_con_in_stage4[37]), .outData_38(wire_con_in_stage4[38]), .outData_39(wire_con_in_stage4[39]), .outData_40(wire_con_in_stage4[40]), .outData_41(wire_con_in_stage4[41]), .outData_42(wire_con_in_stage4[42]), .outData_43(wire_con_in_stage4[43]), .outData_44(wire_con_in_stage4[44]), .outData_45(wire_con_in_stage4[45]), .outData_46(wire_con_in_stage4[46]), .outData_47(wire_con_in_stage4[47]), .outData_48(wire_con_in_stage4[48]), .outData_49(wire_con_in_stage4[49]), .outData_50(wire_con_in_stage4[50]), .outData_51(wire_con_in_stage4[51]), .outData_52(wire_con_in_stage4[52]), .outData_53(wire_con_in_stage4[53]), .outData_54(wire_con_in_stage4[54]), .outData_55(wire_con_in_stage4[55]), .outData_56(wire_con_in_stage4[56]), .outData_57(wire_con_in_stage4[57]), .outData_58(wire_con_in_stage4[58]), .outData_59(wire_con_in_stage4[59]), .outData_60(wire_con_in_stage4[60]), .outData_61(wire_con_in_stage4[61]), .outData_62(wire_con_in_stage4[62]), .outData_63(wire_con_in_stage4[63]), 
        .in_start(in_start_stage4), .out_start(con_in_start_stage4), .ctrl(wire_ctrl_stage4), .clk(clk), .rst(rst));
  
  s10_wireCon_dp64_st4_L wire_stage_4(
        .inData_0(wire_con_in_stage4[0]), .inData_1(wire_con_in_stage4[1]), .inData_2(wire_con_in_stage4[2]), .inData_3(wire_con_in_stage4[3]), .inData_4(wire_con_in_stage4[4]), .inData_5(wire_con_in_stage4[5]), .inData_6(wire_con_in_stage4[6]), .inData_7(wire_con_in_stage4[7]), .inData_8(wire_con_in_stage4[8]), .inData_9(wire_con_in_stage4[9]), .inData_10(wire_con_in_stage4[10]), .inData_11(wire_con_in_stage4[11]), .inData_12(wire_con_in_stage4[12]), .inData_13(wire_con_in_stage4[13]), .inData_14(wire_con_in_stage4[14]), .inData_15(wire_con_in_stage4[15]), .inData_16(wire_con_in_stage4[16]), .inData_17(wire_con_in_stage4[17]), .inData_18(wire_con_in_stage4[18]), .inData_19(wire_con_in_stage4[19]), .inData_20(wire_con_in_stage4[20]), .inData_21(wire_con_in_stage4[21]), .inData_22(wire_con_in_stage4[22]), .inData_23(wire_con_in_stage4[23]), .inData_24(wire_con_in_stage4[24]), .inData_25(wire_con_in_stage4[25]), .inData_26(wire_con_in_stage4[26]), .inData_27(wire_con_in_stage4[27]), .inData_28(wire_con_in_stage4[28]), .inData_29(wire_con_in_stage4[29]), .inData_30(wire_con_in_stage4[30]), .inData_31(wire_con_in_stage4[31]), .inData_32(wire_con_in_stage4[32]), .inData_33(wire_con_in_stage4[33]), .inData_34(wire_con_in_stage4[34]), .inData_35(wire_con_in_stage4[35]), .inData_36(wire_con_in_stage4[36]), .inData_37(wire_con_in_stage4[37]), .inData_38(wire_con_in_stage4[38]), .inData_39(wire_con_in_stage4[39]), .inData_40(wire_con_in_stage4[40]), .inData_41(wire_con_in_stage4[41]), .inData_42(wire_con_in_stage4[42]), .inData_43(wire_con_in_stage4[43]), .inData_44(wire_con_in_stage4[44]), .inData_45(wire_con_in_stage4[45]), .inData_46(wire_con_in_stage4[46]), .inData_47(wire_con_in_stage4[47]), .inData_48(wire_con_in_stage4[48]), .inData_49(wire_con_in_stage4[49]), .inData_50(wire_con_in_stage4[50]), .inData_51(wire_con_in_stage4[51]), .inData_52(wire_con_in_stage4[52]), .inData_53(wire_con_in_stage4[53]), .inData_54(wire_con_in_stage4[54]), .inData_55(wire_con_in_stage4[55]), .inData_56(wire_con_in_stage4[56]), .inData_57(wire_con_in_stage4[57]), .inData_58(wire_con_in_stage4[58]), .inData_59(wire_con_in_stage4[59]), .inData_60(wire_con_in_stage4[60]), .inData_61(wire_con_in_stage4[61]), .inData_62(wire_con_in_stage4[62]), .inData_63(wire_con_in_stage4[63]), 
        .outData_0(wire_con_out_stage4[0]), .outData_1(wire_con_out_stage4[1]), .outData_2(wire_con_out_stage4[2]), .outData_3(wire_con_out_stage4[3]), .outData_4(wire_con_out_stage4[4]), .outData_5(wire_con_out_stage4[5]), .outData_6(wire_con_out_stage4[6]), .outData_7(wire_con_out_stage4[7]), .outData_8(wire_con_out_stage4[8]), .outData_9(wire_con_out_stage4[9]), .outData_10(wire_con_out_stage4[10]), .outData_11(wire_con_out_stage4[11]), .outData_12(wire_con_out_stage4[12]), .outData_13(wire_con_out_stage4[13]), .outData_14(wire_con_out_stage4[14]), .outData_15(wire_con_out_stage4[15]), .outData_16(wire_con_out_stage4[16]), .outData_17(wire_con_out_stage4[17]), .outData_18(wire_con_out_stage4[18]), .outData_19(wire_con_out_stage4[19]), .outData_20(wire_con_out_stage4[20]), .outData_21(wire_con_out_stage4[21]), .outData_22(wire_con_out_stage4[22]), .outData_23(wire_con_out_stage4[23]), .outData_24(wire_con_out_stage4[24]), .outData_25(wire_con_out_stage4[25]), .outData_26(wire_con_out_stage4[26]), .outData_27(wire_con_out_stage4[27]), .outData_28(wire_con_out_stage4[28]), .outData_29(wire_con_out_stage4[29]), .outData_30(wire_con_out_stage4[30]), .outData_31(wire_con_out_stage4[31]), .outData_32(wire_con_out_stage4[32]), .outData_33(wire_con_out_stage4[33]), .outData_34(wire_con_out_stage4[34]), .outData_35(wire_con_out_stage4[35]), .outData_36(wire_con_out_stage4[36]), .outData_37(wire_con_out_stage4[37]), .outData_38(wire_con_out_stage4[38]), .outData_39(wire_con_out_stage4[39]), .outData_40(wire_con_out_stage4[40]), .outData_41(wire_con_out_stage4[41]), .outData_42(wire_con_out_stage4[42]), .outData_43(wire_con_out_stage4[43]), .outData_44(wire_con_out_stage4[44]), .outData_45(wire_con_out_stage4[45]), .outData_46(wire_con_out_stage4[46]), .outData_47(wire_con_out_stage4[47]), .outData_48(wire_con_out_stage4[48]), .outData_49(wire_con_out_stage4[49]), .outData_50(wire_con_out_stage4[50]), .outData_51(wire_con_out_stage4[51]), .outData_52(wire_con_out_stage4[52]), .outData_53(wire_con_out_stage4[53]), .outData_54(wire_con_out_stage4[54]), .outData_55(wire_con_out_stage4[55]), .outData_56(wire_con_out_stage4[56]), .outData_57(wire_con_out_stage4[57]), .outData_58(wire_con_out_stage4[58]), .outData_59(wire_con_out_stage4[59]), .outData_60(wire_con_out_stage4[60]), .outData_61(wire_con_out_stage4[61]), .outData_62(wire_con_out_stage4[62]), .outData_63(wire_con_out_stage4[63]), 
        .in_start(con_in_start_stage4), .out_start(in_start_stage5), .clk(clk), .rst(rst)); 

  
  s10_switch_ctrl_dp64_st4_per0L s8_switch_ctrl_stage_4(.in_start(in_start_stage4),.ctrl_out(wire_ctrl_stage4),.clk(clk), .rst(rst));

  wire [DATA_WIDTH-1:0] wire_con_in_stage5[63:0];
  wire [DATA_WIDTH-1:0] wire_con_out_stage5[63:0];
  wire [31:0] wire_ctrl_stage5;

  s10_switches_stage_st5_0_L switch_stage_5(
        .inData_0(wire_con_out_stage4[0]), .inData_1(wire_con_out_stage4[1]), .inData_2(wire_con_out_stage4[2]), .inData_3(wire_con_out_stage4[3]), .inData_4(wire_con_out_stage4[4]), .inData_5(wire_con_out_stage4[5]), .inData_6(wire_con_out_stage4[6]), .inData_7(wire_con_out_stage4[7]), .inData_8(wire_con_out_stage4[8]), .inData_9(wire_con_out_stage4[9]), .inData_10(wire_con_out_stage4[10]), .inData_11(wire_con_out_stage4[11]), .inData_12(wire_con_out_stage4[12]), .inData_13(wire_con_out_stage4[13]), .inData_14(wire_con_out_stage4[14]), .inData_15(wire_con_out_stage4[15]), .inData_16(wire_con_out_stage4[16]), .inData_17(wire_con_out_stage4[17]), .inData_18(wire_con_out_stage4[18]), .inData_19(wire_con_out_stage4[19]), .inData_20(wire_con_out_stage4[20]), .inData_21(wire_con_out_stage4[21]), .inData_22(wire_con_out_stage4[22]), .inData_23(wire_con_out_stage4[23]), .inData_24(wire_con_out_stage4[24]), .inData_25(wire_con_out_stage4[25]), .inData_26(wire_con_out_stage4[26]), .inData_27(wire_con_out_stage4[27]), .inData_28(wire_con_out_stage4[28]), .inData_29(wire_con_out_stage4[29]), .inData_30(wire_con_out_stage4[30]), .inData_31(wire_con_out_stage4[31]), .inData_32(wire_con_out_stage4[32]), .inData_33(wire_con_out_stage4[33]), .inData_34(wire_con_out_stage4[34]), .inData_35(wire_con_out_stage4[35]), .inData_36(wire_con_out_stage4[36]), .inData_37(wire_con_out_stage4[37]), .inData_38(wire_con_out_stage4[38]), .inData_39(wire_con_out_stage4[39]), .inData_40(wire_con_out_stage4[40]), .inData_41(wire_con_out_stage4[41]), .inData_42(wire_con_out_stage4[42]), .inData_43(wire_con_out_stage4[43]), .inData_44(wire_con_out_stage4[44]), .inData_45(wire_con_out_stage4[45]), .inData_46(wire_con_out_stage4[46]), .inData_47(wire_con_out_stage4[47]), .inData_48(wire_con_out_stage4[48]), .inData_49(wire_con_out_stage4[49]), .inData_50(wire_con_out_stage4[50]), .inData_51(wire_con_out_stage4[51]), .inData_52(wire_con_out_stage4[52]), .inData_53(wire_con_out_stage4[53]), .inData_54(wire_con_out_stage4[54]), .inData_55(wire_con_out_stage4[55]), .inData_56(wire_con_out_stage4[56]), .inData_57(wire_con_out_stage4[57]), .inData_58(wire_con_out_stage4[58]), .inData_59(wire_con_out_stage4[59]), .inData_60(wire_con_out_stage4[60]), .inData_61(wire_con_out_stage4[61]), .inData_62(wire_con_out_stage4[62]), .inData_63(wire_con_out_stage4[63]), 
        .outData_0(wire_con_in_stage5[0]), .outData_1(wire_con_in_stage5[1]), .outData_2(wire_con_in_stage5[2]), .outData_3(wire_con_in_stage5[3]), .outData_4(wire_con_in_stage5[4]), .outData_5(wire_con_in_stage5[5]), .outData_6(wire_con_in_stage5[6]), .outData_7(wire_con_in_stage5[7]), .outData_8(wire_con_in_stage5[8]), .outData_9(wire_con_in_stage5[9]), .outData_10(wire_con_in_stage5[10]), .outData_11(wire_con_in_stage5[11]), .outData_12(wire_con_in_stage5[12]), .outData_13(wire_con_in_stage5[13]), .outData_14(wire_con_in_stage5[14]), .outData_15(wire_con_in_stage5[15]), .outData_16(wire_con_in_stage5[16]), .outData_17(wire_con_in_stage5[17]), .outData_18(wire_con_in_stage5[18]), .outData_19(wire_con_in_stage5[19]), .outData_20(wire_con_in_stage5[20]), .outData_21(wire_con_in_stage5[21]), .outData_22(wire_con_in_stage5[22]), .outData_23(wire_con_in_stage5[23]), .outData_24(wire_con_in_stage5[24]), .outData_25(wire_con_in_stage5[25]), .outData_26(wire_con_in_stage5[26]), .outData_27(wire_con_in_stage5[27]), .outData_28(wire_con_in_stage5[28]), .outData_29(wire_con_in_stage5[29]), .outData_30(wire_con_in_stage5[30]), .outData_31(wire_con_in_stage5[31]), .outData_32(wire_con_in_stage5[32]), .outData_33(wire_con_in_stage5[33]), .outData_34(wire_con_in_stage5[34]), .outData_35(wire_con_in_stage5[35]), .outData_36(wire_con_in_stage5[36]), .outData_37(wire_con_in_stage5[37]), .outData_38(wire_con_in_stage5[38]), .outData_39(wire_con_in_stage5[39]), .outData_40(wire_con_in_stage5[40]), .outData_41(wire_con_in_stage5[41]), .outData_42(wire_con_in_stage5[42]), .outData_43(wire_con_in_stage5[43]), .outData_44(wire_con_in_stage5[44]), .outData_45(wire_con_in_stage5[45]), .outData_46(wire_con_in_stage5[46]), .outData_47(wire_con_in_stage5[47]), .outData_48(wire_con_in_stage5[48]), .outData_49(wire_con_in_stage5[49]), .outData_50(wire_con_in_stage5[50]), .outData_51(wire_con_in_stage5[51]), .outData_52(wire_con_in_stage5[52]), .outData_53(wire_con_in_stage5[53]), .outData_54(wire_con_in_stage5[54]), .outData_55(wire_con_in_stage5[55]), .outData_56(wire_con_in_stage5[56]), .outData_57(wire_con_in_stage5[57]), .outData_58(wire_con_in_stage5[58]), .outData_59(wire_con_in_stage5[59]), .outData_60(wire_con_in_stage5[60]), .outData_61(wire_con_in_stage5[61]), .outData_62(wire_con_in_stage5[62]), .outData_63(wire_con_in_stage5[63]), 
        .in_start(in_start_stage5), .out_start(con_in_start_stage5), .ctrl(wire_ctrl_stage5), .clk(clk), .rst(rst));
  
  s10_wireCon_dp64_st5_L wire_stage_5(
        .inData_0(wire_con_in_stage5[0]), .inData_1(wire_con_in_stage5[1]), .inData_2(wire_con_in_stage5[2]), .inData_3(wire_con_in_stage5[3]), .inData_4(wire_con_in_stage5[4]), .inData_5(wire_con_in_stage5[5]), .inData_6(wire_con_in_stage5[6]), .inData_7(wire_con_in_stage5[7]), .inData_8(wire_con_in_stage5[8]), .inData_9(wire_con_in_stage5[9]), .inData_10(wire_con_in_stage5[10]), .inData_11(wire_con_in_stage5[11]), .inData_12(wire_con_in_stage5[12]), .inData_13(wire_con_in_stage5[13]), .inData_14(wire_con_in_stage5[14]), .inData_15(wire_con_in_stage5[15]), .inData_16(wire_con_in_stage5[16]), .inData_17(wire_con_in_stage5[17]), .inData_18(wire_con_in_stage5[18]), .inData_19(wire_con_in_stage5[19]), .inData_20(wire_con_in_stage5[20]), .inData_21(wire_con_in_stage5[21]), .inData_22(wire_con_in_stage5[22]), .inData_23(wire_con_in_stage5[23]), .inData_24(wire_con_in_stage5[24]), .inData_25(wire_con_in_stage5[25]), .inData_26(wire_con_in_stage5[26]), .inData_27(wire_con_in_stage5[27]), .inData_28(wire_con_in_stage5[28]), .inData_29(wire_con_in_stage5[29]), .inData_30(wire_con_in_stage5[30]), .inData_31(wire_con_in_stage5[31]), .inData_32(wire_con_in_stage5[32]), .inData_33(wire_con_in_stage5[33]), .inData_34(wire_con_in_stage5[34]), .inData_35(wire_con_in_stage5[35]), .inData_36(wire_con_in_stage5[36]), .inData_37(wire_con_in_stage5[37]), .inData_38(wire_con_in_stage5[38]), .inData_39(wire_con_in_stage5[39]), .inData_40(wire_con_in_stage5[40]), .inData_41(wire_con_in_stage5[41]), .inData_42(wire_con_in_stage5[42]), .inData_43(wire_con_in_stage5[43]), .inData_44(wire_con_in_stage5[44]), .inData_45(wire_con_in_stage5[45]), .inData_46(wire_con_in_stage5[46]), .inData_47(wire_con_in_stage5[47]), .inData_48(wire_con_in_stage5[48]), .inData_49(wire_con_in_stage5[49]), .inData_50(wire_con_in_stage5[50]), .inData_51(wire_con_in_stage5[51]), .inData_52(wire_con_in_stage5[52]), .inData_53(wire_con_in_stage5[53]), .inData_54(wire_con_in_stage5[54]), .inData_55(wire_con_in_stage5[55]), .inData_56(wire_con_in_stage5[56]), .inData_57(wire_con_in_stage5[57]), .inData_58(wire_con_in_stage5[58]), .inData_59(wire_con_in_stage5[59]), .inData_60(wire_con_in_stage5[60]), .inData_61(wire_con_in_stage5[61]), .inData_62(wire_con_in_stage5[62]), .inData_63(wire_con_in_stage5[63]), 
        .outData_0(wireOut[0]), .outData_1(wireOut[1]), .outData_2(wireOut[2]), .outData_3(wireOut[3]), .outData_4(wireOut[4]), .outData_5(wireOut[5]), .outData_6(wireOut[6]), .outData_7(wireOut[7]), .outData_8(wireOut[8]), .outData_9(wireOut[9]), .outData_10(wireOut[10]), .outData_11(wireOut[11]), .outData_12(wireOut[12]), .outData_13(wireOut[13]), .outData_14(wireOut[14]), .outData_15(wireOut[15]), .outData_16(wireOut[16]), .outData_17(wireOut[17]), .outData_18(wireOut[18]), .outData_19(wireOut[19]), .outData_20(wireOut[20]), .outData_21(wireOut[21]), .outData_22(wireOut[22]), .outData_23(wireOut[23]), .outData_24(wireOut[24]), .outData_25(wireOut[25]), .outData_26(wireOut[26]), .outData_27(wireOut[27]), .outData_28(wireOut[28]), .outData_29(wireOut[29]), .outData_30(wireOut[30]), .outData_31(wireOut[31]), .outData_32(wireOut[32]), .outData_33(wireOut[33]), .outData_34(wireOut[34]), .outData_35(wireOut[35]), .outData_36(wireOut[36]), .outData_37(wireOut[37]), .outData_38(wireOut[38]), .outData_39(wireOut[39]), .outData_40(wireOut[40]), .outData_41(wireOut[41]), .outData_42(wireOut[42]), .outData_43(wireOut[43]), .outData_44(wireOut[44]), .outData_45(wireOut[45]), .outData_46(wireOut[46]), .outData_47(wireOut[47]), .outData_48(wireOut[48]), .outData_49(wireOut[49]), .outData_50(wireOut[50]), .outData_51(wireOut[51]), .outData_52(wireOut[52]), .outData_53(wireOut[53]), .outData_54(wireOut[54]), .outData_55(wireOut[55]), .outData_56(wireOut[56]), .outData_57(wireOut[57]), .outData_58(wireOut[58]), .outData_59(wireOut[59]), .outData_60(wireOut[60]), .outData_61(wireOut[61]), .outData_62(wireOut[62]), .outData_63(wireOut[63]), 
        .in_start(con_in_start_stage5), .out_start(out_start_w), .clk(clk), .rst(rst)); 

  
  s10_switch_ctrl_dp64_st5_per0L s8_switch_ctrl_stage_5(.in_start(in_start_stage5),.ctrl_out(wire_ctrl_stage5),.clk(clk), .rst(rst));

  
  assign in_start_stage0 = in_start;    
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = out_start_w;    
  
endmodule                        


module s10_switches_stage_st0_0_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [32-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_16(.inData_0(wireIn[32]), .inData_1(wireIn[33]), .outData_0(wireOut[32]), .outData_1(wireOut[33]), .ctrl(ctrl[16]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_17(.inData_0(wireIn[34]), .inData_1(wireIn[35]), .outData_0(wireOut[34]), .outData_1(wireOut[35]), .ctrl(ctrl[17]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_18(.inData_0(wireIn[36]), .inData_1(wireIn[37]), .outData_0(wireOut[36]), .outData_1(wireOut[37]), .ctrl(ctrl[18]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_19(.inData_0(wireIn[38]), .inData_1(wireIn[39]), .outData_0(wireOut[38]), .outData_1(wireOut[39]), .ctrl(ctrl[19]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_20(.inData_0(wireIn[40]), .inData_1(wireIn[41]), .outData_0(wireOut[40]), .outData_1(wireOut[41]), .ctrl(ctrl[20]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_21(.inData_0(wireIn[42]), .inData_1(wireIn[43]), .outData_0(wireOut[42]), .outData_1(wireOut[43]), .ctrl(ctrl[21]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_22(.inData_0(wireIn[44]), .inData_1(wireIn[45]), .outData_0(wireOut[44]), .outData_1(wireOut[45]), .ctrl(ctrl[22]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_23(.inData_0(wireIn[46]), .inData_1(wireIn[47]), .outData_0(wireOut[46]), .outData_1(wireOut[47]), .ctrl(ctrl[23]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_24(.inData_0(wireIn[48]), .inData_1(wireIn[49]), .outData_0(wireOut[48]), .outData_1(wireOut[49]), .ctrl(ctrl[24]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_25(.inData_0(wireIn[50]), .inData_1(wireIn[51]), .outData_0(wireOut[50]), .outData_1(wireOut[51]), .ctrl(ctrl[25]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_26(.inData_0(wireIn[52]), .inData_1(wireIn[53]), .outData_0(wireOut[52]), .outData_1(wireOut[53]), .ctrl(ctrl[26]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_27(.inData_0(wireIn[54]), .inData_1(wireIn[55]), .outData_0(wireOut[54]), .outData_1(wireOut[55]), .ctrl(ctrl[27]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_28(.inData_0(wireIn[56]), .inData_1(wireIn[57]), .outData_0(wireOut[56]), .outData_1(wireOut[57]), .ctrl(ctrl[28]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_29(.inData_0(wireIn[58]), .inData_1(wireIn[59]), .outData_0(wireOut[58]), .outData_1(wireOut[59]), .ctrl(ctrl[29]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_30(.inData_0(wireIn[60]), .inData_1(wireIn[61]), .outData_0(wireOut[60]), .outData_1(wireOut[61]), .ctrl(ctrl[30]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_31(.inData_0(wireIn[62]), .inData_1(wireIn[63]), .outData_0(wireOut[62]), .outData_1(wireOut[63]), .ctrl(ctrl[31]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_ctrl_rom_dp64_st0_per0R(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [31:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 32'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 32'b00000000000000000000000000000000; 
          4'b0001: data <= 32'b00000000000000000000000000000000; 
          4'b0010: data <= 32'b00000000000000000000000000000000; 
          4'b0011: data <= 32'b00000000000000000000000000000000; 
          4'b0100: data <= 32'b00000000000000000000000000000000; 
          4'b0101: data <= 32'b00000000000000000000000000000000; 
          4'b0110: data <= 32'b00000000000000000000000000000000; 
          4'b0111: data <= 32'b00000000000000000000000000000000; 
          4'b1000: data <= 32'b11111111111111111111111111111111; 
          4'b1001: data <= 32'b11111111111111111111111111111111; 
          4'b1010: data <= 32'b11111111111111111111111111111111; 
          4'b1011: data <= 32'b11111111111111111111111111111111; 
          4'b1100: data <= 32'b11111111111111111111111111111111; 
          4'b1101: data <= 32'b11111111111111111111111111111111; 
          4'b1110: data <= 32'b11111111111111111111111111111111; 
          4'b1111: data <= 32'b11111111111111111111111111111111; 
          default: data <= 32'b0; 
        endcase
    end
  end                              

endmodule                        


module s10_switch_ctrl_dp64_st0_per0R(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [31:0] ctrl_out;        
  
  reg [3:0] addr;        
  reg state;        
  
  s10_ctrl_rom_dp64_st0_per0R s8_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 4'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 4'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {4{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s10_wireCon_dp64_st0_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[32];    
  assign wireOut[2] = wireIn[1];    
  assign wireOut[3] = wireIn[33];    
  assign wireOut[4] = wireIn[2];    
  assign wireOut[5] = wireIn[34];    
  assign wireOut[6] = wireIn[3];    
  assign wireOut[7] = wireIn[35];    
  assign wireOut[8] = wireIn[4];    
  assign wireOut[9] = wireIn[36];    
  assign wireOut[10] = wireIn[5];    
  assign wireOut[11] = wireIn[37];    
  assign wireOut[12] = wireIn[6];    
  assign wireOut[13] = wireIn[38];    
  assign wireOut[14] = wireIn[7];    
  assign wireOut[15] = wireIn[39];    
  assign wireOut[16] = wireIn[8];    
  assign wireOut[17] = wireIn[40];    
  assign wireOut[18] = wireIn[9];    
  assign wireOut[19] = wireIn[41];    
  assign wireOut[20] = wireIn[10];    
  assign wireOut[21] = wireIn[42];    
  assign wireOut[22] = wireIn[11];    
  assign wireOut[23] = wireIn[43];    
  assign wireOut[24] = wireIn[12];    
  assign wireOut[25] = wireIn[44];    
  assign wireOut[26] = wireIn[13];    
  assign wireOut[27] = wireIn[45];    
  assign wireOut[28] = wireIn[14];    
  assign wireOut[29] = wireIn[46];    
  assign wireOut[30] = wireIn[15];    
  assign wireOut[31] = wireIn[47];    
  assign wireOut[32] = wireIn[16];    
  assign wireOut[33] = wireIn[48];    
  assign wireOut[34] = wireIn[17];    
  assign wireOut[35] = wireIn[49];    
  assign wireOut[36] = wireIn[18];    
  assign wireOut[37] = wireIn[50];    
  assign wireOut[38] = wireIn[19];    
  assign wireOut[39] = wireIn[51];    
  assign wireOut[40] = wireIn[20];    
  assign wireOut[41] = wireIn[52];    
  assign wireOut[42] = wireIn[21];    
  assign wireOut[43] = wireIn[53];    
  assign wireOut[44] = wireIn[22];    
  assign wireOut[45] = wireIn[54];    
  assign wireOut[46] = wireIn[23];    
  assign wireOut[47] = wireIn[55];    
  assign wireOut[48] = wireIn[24];    
  assign wireOut[49] = wireIn[56];    
  assign wireOut[50] = wireIn[25];    
  assign wireOut[51] = wireIn[57];    
  assign wireOut[52] = wireIn[26];    
  assign wireOut[53] = wireIn[58];    
  assign wireOut[54] = wireIn[27];    
  assign wireOut[55] = wireIn[59];    
  assign wireOut[56] = wireIn[28];    
  assign wireOut[57] = wireIn[60];    
  assign wireOut[58] = wireIn[29];    
  assign wireOut[59] = wireIn[61];    
  assign wireOut[60] = wireIn[30];    
  assign wireOut[61] = wireIn[62];    
  assign wireOut[62] = wireIn[31];    
  assign wireOut[63] = wireIn[63];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_switches_stage_st1_0_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [32-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_16(.inData_0(wireIn[32]), .inData_1(wireIn[33]), .outData_0(wireOut[32]), .outData_1(wireOut[33]), .ctrl(ctrl[16]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_17(.inData_0(wireIn[34]), .inData_1(wireIn[35]), .outData_0(wireOut[34]), .outData_1(wireOut[35]), .ctrl(ctrl[17]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_18(.inData_0(wireIn[36]), .inData_1(wireIn[37]), .outData_0(wireOut[36]), .outData_1(wireOut[37]), .ctrl(ctrl[18]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_19(.inData_0(wireIn[38]), .inData_1(wireIn[39]), .outData_0(wireOut[38]), .outData_1(wireOut[39]), .ctrl(ctrl[19]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_20(.inData_0(wireIn[40]), .inData_1(wireIn[41]), .outData_0(wireOut[40]), .outData_1(wireOut[41]), .ctrl(ctrl[20]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_21(.inData_0(wireIn[42]), .inData_1(wireIn[43]), .outData_0(wireOut[42]), .outData_1(wireOut[43]), .ctrl(ctrl[21]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_22(.inData_0(wireIn[44]), .inData_1(wireIn[45]), .outData_0(wireOut[44]), .outData_1(wireOut[45]), .ctrl(ctrl[22]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_23(.inData_0(wireIn[46]), .inData_1(wireIn[47]), .outData_0(wireOut[46]), .outData_1(wireOut[47]), .ctrl(ctrl[23]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_24(.inData_0(wireIn[48]), .inData_1(wireIn[49]), .outData_0(wireOut[48]), .outData_1(wireOut[49]), .ctrl(ctrl[24]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_25(.inData_0(wireIn[50]), .inData_1(wireIn[51]), .outData_0(wireOut[50]), .outData_1(wireOut[51]), .ctrl(ctrl[25]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_26(.inData_0(wireIn[52]), .inData_1(wireIn[53]), .outData_0(wireOut[52]), .outData_1(wireOut[53]), .ctrl(ctrl[26]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_27(.inData_0(wireIn[54]), .inData_1(wireIn[55]), .outData_0(wireOut[54]), .outData_1(wireOut[55]), .ctrl(ctrl[27]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_28(.inData_0(wireIn[56]), .inData_1(wireIn[57]), .outData_0(wireOut[56]), .outData_1(wireOut[57]), .ctrl(ctrl[28]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_29(.inData_0(wireIn[58]), .inData_1(wireIn[59]), .outData_0(wireOut[58]), .outData_1(wireOut[59]), .ctrl(ctrl[29]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_30(.inData_0(wireIn[60]), .inData_1(wireIn[61]), .outData_0(wireOut[60]), .outData_1(wireOut[61]), .ctrl(ctrl[30]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_31(.inData_0(wireIn[62]), .inData_1(wireIn[63]), .outData_0(wireOut[62]), .outData_1(wireOut[63]), .ctrl(ctrl[31]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_ctrl_rom_dp64_st1_per0R(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [31:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 32'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 32'b00000000000000000000000000000000; 
          4'b0001: data <= 32'b00000000000000000000000000000000; 
          4'b0010: data <= 32'b00000000000000000000000000000000; 
          4'b0011: data <= 32'b00000000000000000000000000000000; 
          4'b0100: data <= 32'b00000000000000000000000000000000; 
          4'b0101: data <= 32'b00000000000000000000000000000000; 
          4'b0110: data <= 32'b00000000000000000000000000000000; 
          4'b0111: data <= 32'b00000000000000000000000000000000; 
          4'b1000: data <= 32'b11111111111111111111111111111111; 
          4'b1001: data <= 32'b11111111111111111111111111111111; 
          4'b1010: data <= 32'b11111111111111111111111111111111; 
          4'b1011: data <= 32'b11111111111111111111111111111111; 
          4'b1100: data <= 32'b11111111111111111111111111111111; 
          4'b1101: data <= 32'b11111111111111111111111111111111; 
          4'b1110: data <= 32'b11111111111111111111111111111111; 
          4'b1111: data <= 32'b11111111111111111111111111111111; 
          default: data <= 32'b0; 
        endcase
    end
  end                              

endmodule                        


module s10_switch_ctrl_dp64_st1_per0R(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [31:0] ctrl_out;        
  
  reg [3:0] addr;        
  reg state;        
  
  s10_ctrl_rom_dp64_st1_per0R s8_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 4'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 4'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {4{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s10_wireCon_dp64_st1_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[16];    
  assign wireOut[2] = wireIn[1];    
  assign wireOut[3] = wireIn[17];    
  assign wireOut[4] = wireIn[2];    
  assign wireOut[5] = wireIn[18];    
  assign wireOut[6] = wireIn[3];    
  assign wireOut[7] = wireIn[19];    
  assign wireOut[8] = wireIn[4];    
  assign wireOut[9] = wireIn[20];    
  assign wireOut[10] = wireIn[5];    
  assign wireOut[11] = wireIn[21];    
  assign wireOut[12] = wireIn[6];    
  assign wireOut[13] = wireIn[22];    
  assign wireOut[14] = wireIn[7];    
  assign wireOut[15] = wireIn[23];    
  assign wireOut[16] = wireIn[8];    
  assign wireOut[17] = wireIn[24];    
  assign wireOut[18] = wireIn[9];    
  assign wireOut[19] = wireIn[25];    
  assign wireOut[20] = wireIn[10];    
  assign wireOut[21] = wireIn[26];    
  assign wireOut[22] = wireIn[11];    
  assign wireOut[23] = wireIn[27];    
  assign wireOut[24] = wireIn[12];    
  assign wireOut[25] = wireIn[28];    
  assign wireOut[26] = wireIn[13];    
  assign wireOut[27] = wireIn[29];    
  assign wireOut[28] = wireIn[14];    
  assign wireOut[29] = wireIn[30];    
  assign wireOut[30] = wireIn[15];    
  assign wireOut[31] = wireIn[31];    
  assign wireOut[32] = wireIn[32];    
  assign wireOut[33] = wireIn[48];    
  assign wireOut[34] = wireIn[33];    
  assign wireOut[35] = wireIn[49];    
  assign wireOut[36] = wireIn[34];    
  assign wireOut[37] = wireIn[50];    
  assign wireOut[38] = wireIn[35];    
  assign wireOut[39] = wireIn[51];    
  assign wireOut[40] = wireIn[36];    
  assign wireOut[41] = wireIn[52];    
  assign wireOut[42] = wireIn[37];    
  assign wireOut[43] = wireIn[53];    
  assign wireOut[44] = wireIn[38];    
  assign wireOut[45] = wireIn[54];    
  assign wireOut[46] = wireIn[39];    
  assign wireOut[47] = wireIn[55];    
  assign wireOut[48] = wireIn[40];    
  assign wireOut[49] = wireIn[56];    
  assign wireOut[50] = wireIn[41];    
  assign wireOut[51] = wireIn[57];    
  assign wireOut[52] = wireIn[42];    
  assign wireOut[53] = wireIn[58];    
  assign wireOut[54] = wireIn[43];    
  assign wireOut[55] = wireIn[59];    
  assign wireOut[56] = wireIn[44];    
  assign wireOut[57] = wireIn[60];    
  assign wireOut[58] = wireIn[45];    
  assign wireOut[59] = wireIn[61];    
  assign wireOut[60] = wireIn[46];    
  assign wireOut[61] = wireIn[62];    
  assign wireOut[62] = wireIn[47];    
  assign wireOut[63] = wireIn[63];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_switches_stage_st2_0_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [32-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_16(.inData_0(wireIn[32]), .inData_1(wireIn[33]), .outData_0(wireOut[32]), .outData_1(wireOut[33]), .ctrl(ctrl[16]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_17(.inData_0(wireIn[34]), .inData_1(wireIn[35]), .outData_0(wireOut[34]), .outData_1(wireOut[35]), .ctrl(ctrl[17]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_18(.inData_0(wireIn[36]), .inData_1(wireIn[37]), .outData_0(wireOut[36]), .outData_1(wireOut[37]), .ctrl(ctrl[18]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_19(.inData_0(wireIn[38]), .inData_1(wireIn[39]), .outData_0(wireOut[38]), .outData_1(wireOut[39]), .ctrl(ctrl[19]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_20(.inData_0(wireIn[40]), .inData_1(wireIn[41]), .outData_0(wireOut[40]), .outData_1(wireOut[41]), .ctrl(ctrl[20]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_21(.inData_0(wireIn[42]), .inData_1(wireIn[43]), .outData_0(wireOut[42]), .outData_1(wireOut[43]), .ctrl(ctrl[21]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_22(.inData_0(wireIn[44]), .inData_1(wireIn[45]), .outData_0(wireOut[44]), .outData_1(wireOut[45]), .ctrl(ctrl[22]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_23(.inData_0(wireIn[46]), .inData_1(wireIn[47]), .outData_0(wireOut[46]), .outData_1(wireOut[47]), .ctrl(ctrl[23]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_24(.inData_0(wireIn[48]), .inData_1(wireIn[49]), .outData_0(wireOut[48]), .outData_1(wireOut[49]), .ctrl(ctrl[24]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_25(.inData_0(wireIn[50]), .inData_1(wireIn[51]), .outData_0(wireOut[50]), .outData_1(wireOut[51]), .ctrl(ctrl[25]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_26(.inData_0(wireIn[52]), .inData_1(wireIn[53]), .outData_0(wireOut[52]), .outData_1(wireOut[53]), .ctrl(ctrl[26]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_27(.inData_0(wireIn[54]), .inData_1(wireIn[55]), .outData_0(wireOut[54]), .outData_1(wireOut[55]), .ctrl(ctrl[27]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_28(.inData_0(wireIn[56]), .inData_1(wireIn[57]), .outData_0(wireOut[56]), .outData_1(wireOut[57]), .ctrl(ctrl[28]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_29(.inData_0(wireIn[58]), .inData_1(wireIn[59]), .outData_0(wireOut[58]), .outData_1(wireOut[59]), .ctrl(ctrl[29]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_30(.inData_0(wireIn[60]), .inData_1(wireIn[61]), .outData_0(wireOut[60]), .outData_1(wireOut[61]), .ctrl(ctrl[30]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_31(.inData_0(wireIn[62]), .inData_1(wireIn[63]), .outData_0(wireOut[62]), .outData_1(wireOut[63]), .ctrl(ctrl[31]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_ctrl_rom_dp64_st2_per0R(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [31:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 32'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 32'b00000000000000000000000000000000; 
          4'b0001: data <= 32'b00000000000000000000000000000000; 
          4'b0010: data <= 32'b00000000000000000000000000000000; 
          4'b0011: data <= 32'b00000000000000000000000000000000; 
          4'b0100: data <= 32'b00000000000000000000000000000000; 
          4'b0101: data <= 32'b00000000000000000000000000000000; 
          4'b0110: data <= 32'b00000000000000000000000000000000; 
          4'b0111: data <= 32'b00000000000000000000000000000000; 
          4'b1000: data <= 32'b11111111111111111111111111111111; 
          4'b1001: data <= 32'b11111111111111111111111111111111; 
          4'b1010: data <= 32'b11111111111111111111111111111111; 
          4'b1011: data <= 32'b11111111111111111111111111111111; 
          4'b1100: data <= 32'b11111111111111111111111111111111; 
          4'b1101: data <= 32'b11111111111111111111111111111111; 
          4'b1110: data <= 32'b11111111111111111111111111111111; 
          4'b1111: data <= 32'b11111111111111111111111111111111; 
          default: data <= 32'b0; 
        endcase
    end
  end                              

endmodule                        


module s10_switch_ctrl_dp64_st2_per0R(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [31:0] ctrl_out;        
  
  reg [3:0] addr;        
  reg state;        
  
  s10_ctrl_rom_dp64_st2_per0R s8_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 4'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 4'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {4{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s10_wireCon_dp64_st2_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[8];    
  assign wireOut[2] = wireIn[1];    
  assign wireOut[3] = wireIn[9];    
  assign wireOut[4] = wireIn[2];    
  assign wireOut[5] = wireIn[10];    
  assign wireOut[6] = wireIn[3];    
  assign wireOut[7] = wireIn[11];    
  assign wireOut[8] = wireIn[4];    
  assign wireOut[9] = wireIn[12];    
  assign wireOut[10] = wireIn[5];    
  assign wireOut[11] = wireIn[13];    
  assign wireOut[12] = wireIn[6];    
  assign wireOut[13] = wireIn[14];    
  assign wireOut[14] = wireIn[7];    
  assign wireOut[15] = wireIn[15];    
  assign wireOut[16] = wireIn[16];    
  assign wireOut[17] = wireIn[24];    
  assign wireOut[18] = wireIn[17];    
  assign wireOut[19] = wireIn[25];    
  assign wireOut[20] = wireIn[18];    
  assign wireOut[21] = wireIn[26];    
  assign wireOut[22] = wireIn[19];    
  assign wireOut[23] = wireIn[27];    
  assign wireOut[24] = wireIn[20];    
  assign wireOut[25] = wireIn[28];    
  assign wireOut[26] = wireIn[21];    
  assign wireOut[27] = wireIn[29];    
  assign wireOut[28] = wireIn[22];    
  assign wireOut[29] = wireIn[30];    
  assign wireOut[30] = wireIn[23];    
  assign wireOut[31] = wireIn[31];    
  assign wireOut[32] = wireIn[32];    
  assign wireOut[33] = wireIn[40];    
  assign wireOut[34] = wireIn[33];    
  assign wireOut[35] = wireIn[41];    
  assign wireOut[36] = wireIn[34];    
  assign wireOut[37] = wireIn[42];    
  assign wireOut[38] = wireIn[35];    
  assign wireOut[39] = wireIn[43];    
  assign wireOut[40] = wireIn[36];    
  assign wireOut[41] = wireIn[44];    
  assign wireOut[42] = wireIn[37];    
  assign wireOut[43] = wireIn[45];    
  assign wireOut[44] = wireIn[38];    
  assign wireOut[45] = wireIn[46];    
  assign wireOut[46] = wireIn[39];    
  assign wireOut[47] = wireIn[47];    
  assign wireOut[48] = wireIn[48];    
  assign wireOut[49] = wireIn[56];    
  assign wireOut[50] = wireIn[49];    
  assign wireOut[51] = wireIn[57];    
  assign wireOut[52] = wireIn[50];    
  assign wireOut[53] = wireIn[58];    
  assign wireOut[54] = wireIn[51];    
  assign wireOut[55] = wireIn[59];    
  assign wireOut[56] = wireIn[52];    
  assign wireOut[57] = wireIn[60];    
  assign wireOut[58] = wireIn[53];    
  assign wireOut[59] = wireIn[61];    
  assign wireOut[60] = wireIn[54];    
  assign wireOut[61] = wireIn[62];    
  assign wireOut[62] = wireIn[55];    
  assign wireOut[63] = wireIn[63];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_switches_stage_st3_0_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [32-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_16(.inData_0(wireIn[32]), .inData_1(wireIn[33]), .outData_0(wireOut[32]), .outData_1(wireOut[33]), .ctrl(ctrl[16]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_17(.inData_0(wireIn[34]), .inData_1(wireIn[35]), .outData_0(wireOut[34]), .outData_1(wireOut[35]), .ctrl(ctrl[17]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_18(.inData_0(wireIn[36]), .inData_1(wireIn[37]), .outData_0(wireOut[36]), .outData_1(wireOut[37]), .ctrl(ctrl[18]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_19(.inData_0(wireIn[38]), .inData_1(wireIn[39]), .outData_0(wireOut[38]), .outData_1(wireOut[39]), .ctrl(ctrl[19]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_20(.inData_0(wireIn[40]), .inData_1(wireIn[41]), .outData_0(wireOut[40]), .outData_1(wireOut[41]), .ctrl(ctrl[20]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_21(.inData_0(wireIn[42]), .inData_1(wireIn[43]), .outData_0(wireOut[42]), .outData_1(wireOut[43]), .ctrl(ctrl[21]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_22(.inData_0(wireIn[44]), .inData_1(wireIn[45]), .outData_0(wireOut[44]), .outData_1(wireOut[45]), .ctrl(ctrl[22]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_23(.inData_0(wireIn[46]), .inData_1(wireIn[47]), .outData_0(wireOut[46]), .outData_1(wireOut[47]), .ctrl(ctrl[23]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_24(.inData_0(wireIn[48]), .inData_1(wireIn[49]), .outData_0(wireOut[48]), .outData_1(wireOut[49]), .ctrl(ctrl[24]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_25(.inData_0(wireIn[50]), .inData_1(wireIn[51]), .outData_0(wireOut[50]), .outData_1(wireOut[51]), .ctrl(ctrl[25]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_26(.inData_0(wireIn[52]), .inData_1(wireIn[53]), .outData_0(wireOut[52]), .outData_1(wireOut[53]), .ctrl(ctrl[26]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_27(.inData_0(wireIn[54]), .inData_1(wireIn[55]), .outData_0(wireOut[54]), .outData_1(wireOut[55]), .ctrl(ctrl[27]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_28(.inData_0(wireIn[56]), .inData_1(wireIn[57]), .outData_0(wireOut[56]), .outData_1(wireOut[57]), .ctrl(ctrl[28]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_29(.inData_0(wireIn[58]), .inData_1(wireIn[59]), .outData_0(wireOut[58]), .outData_1(wireOut[59]), .ctrl(ctrl[29]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_30(.inData_0(wireIn[60]), .inData_1(wireIn[61]), .outData_0(wireOut[60]), .outData_1(wireOut[61]), .ctrl(ctrl[30]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_31(.inData_0(wireIn[62]), .inData_1(wireIn[63]), .outData_0(wireOut[62]), .outData_1(wireOut[63]), .ctrl(ctrl[31]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_ctrl_rom_dp64_st3_per0R(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [31:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 32'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 32'b00000000000000000000000000000000; 
          4'b0001: data <= 32'b00000000000000000000000000000000; 
          4'b0010: data <= 32'b00000000000000000000000000000000; 
          4'b0011: data <= 32'b00000000000000000000000000000000; 
          4'b0100: data <= 32'b00000000000000000000000000000000; 
          4'b0101: data <= 32'b00000000000000000000000000000000; 
          4'b0110: data <= 32'b00000000000000000000000000000000; 
          4'b0111: data <= 32'b00000000000000000000000000000000; 
          4'b1000: data <= 32'b11111111111111111111111111111111; 
          4'b1001: data <= 32'b11111111111111111111111111111111; 
          4'b1010: data <= 32'b11111111111111111111111111111111; 
          4'b1011: data <= 32'b11111111111111111111111111111111; 
          4'b1100: data <= 32'b11111111111111111111111111111111; 
          4'b1101: data <= 32'b11111111111111111111111111111111; 
          4'b1110: data <= 32'b11111111111111111111111111111111; 
          4'b1111: data <= 32'b11111111111111111111111111111111; 
          default: data <= 32'b0; 
        endcase
    end
  end                              

endmodule                        


module s10_switch_ctrl_dp64_st3_per0R(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [31:0] ctrl_out;        
  
  reg [3:0] addr;        
  reg state;        
  
  s10_ctrl_rom_dp64_st3_per0R s8_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 4'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 4'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {4{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s10_wireCon_dp64_st3_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[4];    
  assign wireOut[2] = wireIn[1];    
  assign wireOut[3] = wireIn[5];    
  assign wireOut[4] = wireIn[2];    
  assign wireOut[5] = wireIn[6];    
  assign wireOut[6] = wireIn[3];    
  assign wireOut[7] = wireIn[7];    
  assign wireOut[8] = wireIn[8];    
  assign wireOut[9] = wireIn[12];    
  assign wireOut[10] = wireIn[9];    
  assign wireOut[11] = wireIn[13];    
  assign wireOut[12] = wireIn[10];    
  assign wireOut[13] = wireIn[14];    
  assign wireOut[14] = wireIn[11];    
  assign wireOut[15] = wireIn[15];    
  assign wireOut[16] = wireIn[16];    
  assign wireOut[17] = wireIn[20];    
  assign wireOut[18] = wireIn[17];    
  assign wireOut[19] = wireIn[21];    
  assign wireOut[20] = wireIn[18];    
  assign wireOut[21] = wireIn[22];    
  assign wireOut[22] = wireIn[19];    
  assign wireOut[23] = wireIn[23];    
  assign wireOut[24] = wireIn[24];    
  assign wireOut[25] = wireIn[28];    
  assign wireOut[26] = wireIn[25];    
  assign wireOut[27] = wireIn[29];    
  assign wireOut[28] = wireIn[26];    
  assign wireOut[29] = wireIn[30];    
  assign wireOut[30] = wireIn[27];    
  assign wireOut[31] = wireIn[31];    
  assign wireOut[32] = wireIn[32];    
  assign wireOut[33] = wireIn[36];    
  assign wireOut[34] = wireIn[33];    
  assign wireOut[35] = wireIn[37];    
  assign wireOut[36] = wireIn[34];    
  assign wireOut[37] = wireIn[38];    
  assign wireOut[38] = wireIn[35];    
  assign wireOut[39] = wireIn[39];    
  assign wireOut[40] = wireIn[40];    
  assign wireOut[41] = wireIn[44];    
  assign wireOut[42] = wireIn[41];    
  assign wireOut[43] = wireIn[45];    
  assign wireOut[44] = wireIn[42];    
  assign wireOut[45] = wireIn[46];    
  assign wireOut[46] = wireIn[43];    
  assign wireOut[47] = wireIn[47];    
  assign wireOut[48] = wireIn[48];    
  assign wireOut[49] = wireIn[52];    
  assign wireOut[50] = wireIn[49];    
  assign wireOut[51] = wireIn[53];    
  assign wireOut[52] = wireIn[50];    
  assign wireOut[53] = wireIn[54];    
  assign wireOut[54] = wireIn[51];    
  assign wireOut[55] = wireIn[55];    
  assign wireOut[56] = wireIn[56];    
  assign wireOut[57] = wireIn[60];    
  assign wireOut[58] = wireIn[57];    
  assign wireOut[59] = wireIn[61];    
  assign wireOut[60] = wireIn[58];    
  assign wireOut[61] = wireIn[62];    
  assign wireOut[62] = wireIn[59];    
  assign wireOut[63] = wireIn[63];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_switches_stage_st4_0_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [32-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_16(.inData_0(wireIn[32]), .inData_1(wireIn[33]), .outData_0(wireOut[32]), .outData_1(wireOut[33]), .ctrl(ctrl[16]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_17(.inData_0(wireIn[34]), .inData_1(wireIn[35]), .outData_0(wireOut[34]), .outData_1(wireOut[35]), .ctrl(ctrl[17]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_18(.inData_0(wireIn[36]), .inData_1(wireIn[37]), .outData_0(wireOut[36]), .outData_1(wireOut[37]), .ctrl(ctrl[18]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_19(.inData_0(wireIn[38]), .inData_1(wireIn[39]), .outData_0(wireOut[38]), .outData_1(wireOut[39]), .ctrl(ctrl[19]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_20(.inData_0(wireIn[40]), .inData_1(wireIn[41]), .outData_0(wireOut[40]), .outData_1(wireOut[41]), .ctrl(ctrl[20]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_21(.inData_0(wireIn[42]), .inData_1(wireIn[43]), .outData_0(wireOut[42]), .outData_1(wireOut[43]), .ctrl(ctrl[21]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_22(.inData_0(wireIn[44]), .inData_1(wireIn[45]), .outData_0(wireOut[44]), .outData_1(wireOut[45]), .ctrl(ctrl[22]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_23(.inData_0(wireIn[46]), .inData_1(wireIn[47]), .outData_0(wireOut[46]), .outData_1(wireOut[47]), .ctrl(ctrl[23]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_24(.inData_0(wireIn[48]), .inData_1(wireIn[49]), .outData_0(wireOut[48]), .outData_1(wireOut[49]), .ctrl(ctrl[24]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_25(.inData_0(wireIn[50]), .inData_1(wireIn[51]), .outData_0(wireOut[50]), .outData_1(wireOut[51]), .ctrl(ctrl[25]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_26(.inData_0(wireIn[52]), .inData_1(wireIn[53]), .outData_0(wireOut[52]), .outData_1(wireOut[53]), .ctrl(ctrl[26]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_27(.inData_0(wireIn[54]), .inData_1(wireIn[55]), .outData_0(wireOut[54]), .outData_1(wireOut[55]), .ctrl(ctrl[27]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_28(.inData_0(wireIn[56]), .inData_1(wireIn[57]), .outData_0(wireOut[56]), .outData_1(wireOut[57]), .ctrl(ctrl[28]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_29(.inData_0(wireIn[58]), .inData_1(wireIn[59]), .outData_0(wireOut[58]), .outData_1(wireOut[59]), .ctrl(ctrl[29]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_30(.inData_0(wireIn[60]), .inData_1(wireIn[61]), .outData_0(wireOut[60]), .outData_1(wireOut[61]), .ctrl(ctrl[30]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_31(.inData_0(wireIn[62]), .inData_1(wireIn[63]), .outData_0(wireOut[62]), .outData_1(wireOut[63]), .ctrl(ctrl[31]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_ctrl_rom_dp64_st4_per0R(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [31:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 32'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 32'b00000000000000000000000000000000; 
          4'b0001: data <= 32'b00000000000000000000000000000000; 
          4'b0010: data <= 32'b00000000000000000000000000000000; 
          4'b0011: data <= 32'b00000000000000000000000000000000; 
          4'b0100: data <= 32'b00000000000000000000000000000000; 
          4'b0101: data <= 32'b00000000000000000000000000000000; 
          4'b0110: data <= 32'b00000000000000000000000000000000; 
          4'b0111: data <= 32'b00000000000000000000000000000000; 
          4'b1000: data <= 32'b11111111111111111111111111111111; 
          4'b1001: data <= 32'b11111111111111111111111111111111; 
          4'b1010: data <= 32'b11111111111111111111111111111111; 
          4'b1011: data <= 32'b11111111111111111111111111111111; 
          4'b1100: data <= 32'b11111111111111111111111111111111; 
          4'b1101: data <= 32'b11111111111111111111111111111111; 
          4'b1110: data <= 32'b11111111111111111111111111111111; 
          4'b1111: data <= 32'b11111111111111111111111111111111; 
          default: data <= 32'b0; 
        endcase
    end
  end                              

endmodule                        


module s10_switch_ctrl_dp64_st4_per0R(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [31:0] ctrl_out;        
  
  reg [3:0] addr;        
  reg state;        
  
  s10_ctrl_rom_dp64_st4_per0R s8_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 4'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 4'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {4{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s10_wireCon_dp64_st4_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[2];    
  assign wireOut[2] = wireIn[1];    
  assign wireOut[3] = wireIn[3];    
  assign wireOut[4] = wireIn[4];    
  assign wireOut[5] = wireIn[6];    
  assign wireOut[6] = wireIn[5];    
  assign wireOut[7] = wireIn[7];    
  assign wireOut[8] = wireIn[8];    
  assign wireOut[9] = wireIn[10];    
  assign wireOut[10] = wireIn[9];    
  assign wireOut[11] = wireIn[11];    
  assign wireOut[12] = wireIn[12];    
  assign wireOut[13] = wireIn[14];    
  assign wireOut[14] = wireIn[13];    
  assign wireOut[15] = wireIn[15];    
  assign wireOut[16] = wireIn[16];    
  assign wireOut[17] = wireIn[18];    
  assign wireOut[18] = wireIn[17];    
  assign wireOut[19] = wireIn[19];    
  assign wireOut[20] = wireIn[20];    
  assign wireOut[21] = wireIn[22];    
  assign wireOut[22] = wireIn[21];    
  assign wireOut[23] = wireIn[23];    
  assign wireOut[24] = wireIn[24];    
  assign wireOut[25] = wireIn[26];    
  assign wireOut[26] = wireIn[25];    
  assign wireOut[27] = wireIn[27];    
  assign wireOut[28] = wireIn[28];    
  assign wireOut[29] = wireIn[30];    
  assign wireOut[30] = wireIn[29];    
  assign wireOut[31] = wireIn[31];    
  assign wireOut[32] = wireIn[32];    
  assign wireOut[33] = wireIn[34];    
  assign wireOut[34] = wireIn[33];    
  assign wireOut[35] = wireIn[35];    
  assign wireOut[36] = wireIn[36];    
  assign wireOut[37] = wireIn[38];    
  assign wireOut[38] = wireIn[37];    
  assign wireOut[39] = wireIn[39];    
  assign wireOut[40] = wireIn[40];    
  assign wireOut[41] = wireIn[42];    
  assign wireOut[42] = wireIn[41];    
  assign wireOut[43] = wireIn[43];    
  assign wireOut[44] = wireIn[44];    
  assign wireOut[45] = wireIn[46];    
  assign wireOut[46] = wireIn[45];    
  assign wireOut[47] = wireIn[47];    
  assign wireOut[48] = wireIn[48];    
  assign wireOut[49] = wireIn[50];    
  assign wireOut[50] = wireIn[49];    
  assign wireOut[51] = wireIn[51];    
  assign wireOut[52] = wireIn[52];    
  assign wireOut[53] = wireIn[54];    
  assign wireOut[54] = wireIn[53];    
  assign wireOut[55] = wireIn[55];    
  assign wireOut[56] = wireIn[56];    
  assign wireOut[57] = wireIn[58];    
  assign wireOut[58] = wireIn[57];    
  assign wireOut[59] = wireIn[59];    
  assign wireOut[60] = wireIn[60];    
  assign wireOut[61] = wireIn[62];    
  assign wireOut[62] = wireIn[61];    
  assign wireOut[63] = wireIn[63];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_switches_stage_st5_0_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [32-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_16(.inData_0(wireIn[32]), .inData_1(wireIn[33]), .outData_0(wireOut[32]), .outData_1(wireOut[33]), .ctrl(ctrl[16]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_17(.inData_0(wireIn[34]), .inData_1(wireIn[35]), .outData_0(wireOut[34]), .outData_1(wireOut[35]), .ctrl(ctrl[17]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_18(.inData_0(wireIn[36]), .inData_1(wireIn[37]), .outData_0(wireOut[36]), .outData_1(wireOut[37]), .ctrl(ctrl[18]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_19(.inData_0(wireIn[38]), .inData_1(wireIn[39]), .outData_0(wireOut[38]), .outData_1(wireOut[39]), .ctrl(ctrl[19]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_20(.inData_0(wireIn[40]), .inData_1(wireIn[41]), .outData_0(wireOut[40]), .outData_1(wireOut[41]), .ctrl(ctrl[20]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_21(.inData_0(wireIn[42]), .inData_1(wireIn[43]), .outData_0(wireOut[42]), .outData_1(wireOut[43]), .ctrl(ctrl[21]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_22(.inData_0(wireIn[44]), .inData_1(wireIn[45]), .outData_0(wireOut[44]), .outData_1(wireOut[45]), .ctrl(ctrl[22]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_23(.inData_0(wireIn[46]), .inData_1(wireIn[47]), .outData_0(wireOut[46]), .outData_1(wireOut[47]), .ctrl(ctrl[23]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_24(.inData_0(wireIn[48]), .inData_1(wireIn[49]), .outData_0(wireOut[48]), .outData_1(wireOut[49]), .ctrl(ctrl[24]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_25(.inData_0(wireIn[50]), .inData_1(wireIn[51]), .outData_0(wireOut[50]), .outData_1(wireOut[51]), .ctrl(ctrl[25]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_26(.inData_0(wireIn[52]), .inData_1(wireIn[53]), .outData_0(wireOut[52]), .outData_1(wireOut[53]), .ctrl(ctrl[26]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_27(.inData_0(wireIn[54]), .inData_1(wireIn[55]), .outData_0(wireOut[54]), .outData_1(wireOut[55]), .ctrl(ctrl[27]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_28(.inData_0(wireIn[56]), .inData_1(wireIn[57]), .outData_0(wireOut[56]), .outData_1(wireOut[57]), .ctrl(ctrl[28]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_29(.inData_0(wireIn[58]), .inData_1(wireIn[59]), .outData_0(wireOut[58]), .outData_1(wireOut[59]), .ctrl(ctrl[29]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_30(.inData_0(wireIn[60]), .inData_1(wireIn[61]), .outData_0(wireOut[60]), .outData_1(wireOut[61]), .ctrl(ctrl[30]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_31(.inData_0(wireIn[62]), .inData_1(wireIn[63]), .outData_0(wireOut[62]), .outData_1(wireOut[63]), .ctrl(ctrl[31]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_ctrl_rom_dp64_st5_per0R(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [31:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 32'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 32'b00000000000000000000000000000000; 
          4'b0001: data <= 32'b00000000000000000000000000000000; 
          4'b0010: data <= 32'b00000000000000000000000000000000; 
          4'b0011: data <= 32'b00000000000000000000000000000000; 
          4'b0100: data <= 32'b00000000000000000000000000000000; 
          4'b0101: data <= 32'b00000000000000000000000000000000; 
          4'b0110: data <= 32'b00000000000000000000000000000000; 
          4'b0111: data <= 32'b00000000000000000000000000000000; 
          4'b1000: data <= 32'b11111111111111111111111111111111; 
          4'b1001: data <= 32'b11111111111111111111111111111111; 
          4'b1010: data <= 32'b11111111111111111111111111111111; 
          4'b1011: data <= 32'b11111111111111111111111111111111; 
          4'b1100: data <= 32'b11111111111111111111111111111111; 
          4'b1101: data <= 32'b11111111111111111111111111111111; 
          4'b1110: data <= 32'b11111111111111111111111111111111; 
          4'b1111: data <= 32'b11111111111111111111111111111111; 
          default: data <= 32'b0; 
        endcase
    end
  end                              

endmodule                        


module s10_switch_ctrl_dp64_st5_per0R(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [31:0] ctrl_out;        
  
  reg [3:0] addr;        
  reg state;        
  
  s10_ctrl_rom_dp64_st5_per0R s8_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 4'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 4'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {4{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s10_wireCon_dp64_st5_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[1];    
  assign wireOut[2] = wireIn[2];    
  assign wireOut[3] = wireIn[3];    
  assign wireOut[4] = wireIn[4];    
  assign wireOut[5] = wireIn[5];    
  assign wireOut[6] = wireIn[6];    
  assign wireOut[7] = wireIn[7];    
  assign wireOut[8] = wireIn[8];    
  assign wireOut[9] = wireIn[9];    
  assign wireOut[10] = wireIn[10];    
  assign wireOut[11] = wireIn[11];    
  assign wireOut[12] = wireIn[12];    
  assign wireOut[13] = wireIn[13];    
  assign wireOut[14] = wireIn[14];    
  assign wireOut[15] = wireIn[15];    
  assign wireOut[16] = wireIn[16];    
  assign wireOut[17] = wireIn[17];    
  assign wireOut[18] = wireIn[18];    
  assign wireOut[19] = wireIn[19];    
  assign wireOut[20] = wireIn[20];    
  assign wireOut[21] = wireIn[21];    
  assign wireOut[22] = wireIn[22];    
  assign wireOut[23] = wireIn[23];    
  assign wireOut[24] = wireIn[24];    
  assign wireOut[25] = wireIn[25];    
  assign wireOut[26] = wireIn[26];    
  assign wireOut[27] = wireIn[27];    
  assign wireOut[28] = wireIn[28];    
  assign wireOut[29] = wireIn[29];    
  assign wireOut[30] = wireIn[30];    
  assign wireOut[31] = wireIn[31];    
  assign wireOut[32] = wireIn[32];    
  assign wireOut[33] = wireIn[33];    
  assign wireOut[34] = wireIn[34];    
  assign wireOut[35] = wireIn[35];    
  assign wireOut[36] = wireIn[36];    
  assign wireOut[37] = wireIn[37];    
  assign wireOut[38] = wireIn[38];    
  assign wireOut[39] = wireIn[39];    
  assign wireOut[40] = wireIn[40];    
  assign wireOut[41] = wireIn[41];    
  assign wireOut[42] = wireIn[42];    
  assign wireOut[43] = wireIn[43];    
  assign wireOut[44] = wireIn[44];    
  assign wireOut[45] = wireIn[45];    
  assign wireOut[46] = wireIn[46];    
  assign wireOut[47] = wireIn[47];    
  assign wireOut[48] = wireIn[48];    
  assign wireOut[49] = wireIn[49];    
  assign wireOut[50] = wireIn[50];    
  assign wireOut[51] = wireIn[51];    
  assign wireOut[52] = wireIn[52];    
  assign wireOut[53] = wireIn[53];    
  assign wireOut[54] = wireIn[54];    
  assign wireOut[55] = wireIn[55];    
  assign wireOut[56] = wireIn[56];    
  assign wireOut[57] = wireIn[57];    
  assign wireOut[58] = wireIn[58];    
  assign wireOut[59] = wireIn[59];    
  assign wireOut[60] = wireIn[60];    
  assign wireOut[61] = wireIn[61];    
  assign wireOut[62] = wireIn[62];    
  assign wireOut[63] = wireIn[63];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = in_start;    
  
endmodule                        


module s10_egressStage_p64(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
counter_in,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  input [3:0] counter_in; 
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63;
  output out_start; 
  
  
  wire out_start_w; 
  wire [DATA_WIDTH-1:0] wireIn [63:0];              
  wire [DATA_WIDTH-1:0] wireOut [63:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  wire in_start_stage5;
  wire con_in_start_stage5;

  wire in_start_stage4;
  wire con_in_start_stage4;

  wire in_start_stage3;
  wire con_in_start_stage3;

  wire in_start_stage2;
  wire con_in_start_stage2;

  wire in_start_stage1;
  wire con_in_start_stage1;

  wire in_start_stage0;
  wire con_in_start_stage0;

  wire [DATA_WIDTH-1:0] wire_switch_in_stage5[63:0];
  wire [DATA_WIDTH-1:0] wire_switch_out_stage5[63:0];
  reg [31:0] wire_ctrl_stage5;

  s10_switches_stage_st5_0_R switch_stage_5(
        .inData_0(wire_switch_in_stage5[0]), .inData_1(wire_switch_in_stage5[1]), .inData_2(wire_switch_in_stage5[2]), .inData_3(wire_switch_in_stage5[3]), .inData_4(wire_switch_in_stage5[4]), .inData_5(wire_switch_in_stage5[5]), .inData_6(wire_switch_in_stage5[6]), .inData_7(wire_switch_in_stage5[7]), .inData_8(wire_switch_in_stage5[8]), .inData_9(wire_switch_in_stage5[9]), .inData_10(wire_switch_in_stage5[10]), .inData_11(wire_switch_in_stage5[11]), .inData_12(wire_switch_in_stage5[12]), .inData_13(wire_switch_in_stage5[13]), .inData_14(wire_switch_in_stage5[14]), .inData_15(wire_switch_in_stage5[15]), .inData_16(wire_switch_in_stage5[16]), .inData_17(wire_switch_in_stage5[17]), .inData_18(wire_switch_in_stage5[18]), .inData_19(wire_switch_in_stage5[19]), .inData_20(wire_switch_in_stage5[20]), .inData_21(wire_switch_in_stage5[21]), .inData_22(wire_switch_in_stage5[22]), .inData_23(wire_switch_in_stage5[23]), .inData_24(wire_switch_in_stage5[24]), .inData_25(wire_switch_in_stage5[25]), .inData_26(wire_switch_in_stage5[26]), .inData_27(wire_switch_in_stage5[27]), .inData_28(wire_switch_in_stage5[28]), .inData_29(wire_switch_in_stage5[29]), .inData_30(wire_switch_in_stage5[30]), .inData_31(wire_switch_in_stage5[31]), .inData_32(wire_switch_in_stage5[32]), .inData_33(wire_switch_in_stage5[33]), .inData_34(wire_switch_in_stage5[34]), .inData_35(wire_switch_in_stage5[35]), .inData_36(wire_switch_in_stage5[36]), .inData_37(wire_switch_in_stage5[37]), .inData_38(wire_switch_in_stage5[38]), .inData_39(wire_switch_in_stage5[39]), .inData_40(wire_switch_in_stage5[40]), .inData_41(wire_switch_in_stage5[41]), .inData_42(wire_switch_in_stage5[42]), .inData_43(wire_switch_in_stage5[43]), .inData_44(wire_switch_in_stage5[44]), .inData_45(wire_switch_in_stage5[45]), .inData_46(wire_switch_in_stage5[46]), .inData_47(wire_switch_in_stage5[47]), .inData_48(wire_switch_in_stage5[48]), .inData_49(wire_switch_in_stage5[49]), .inData_50(wire_switch_in_stage5[50]), .inData_51(wire_switch_in_stage5[51]), .inData_52(wire_switch_in_stage5[52]), .inData_53(wire_switch_in_stage5[53]), .inData_54(wire_switch_in_stage5[54]), .inData_55(wire_switch_in_stage5[55]), .inData_56(wire_switch_in_stage5[56]), .inData_57(wire_switch_in_stage5[57]), .inData_58(wire_switch_in_stage5[58]), .inData_59(wire_switch_in_stage5[59]), .inData_60(wire_switch_in_stage5[60]), .inData_61(wire_switch_in_stage5[61]), .inData_62(wire_switch_in_stage5[62]), .inData_63(wire_switch_in_stage5[63]), 
        .outData_0(wire_switch_out_stage5[0]), .outData_1(wire_switch_out_stage5[1]), .outData_2(wire_switch_out_stage5[2]), .outData_3(wire_switch_out_stage5[3]), .outData_4(wire_switch_out_stage5[4]), .outData_5(wire_switch_out_stage5[5]), .outData_6(wire_switch_out_stage5[6]), .outData_7(wire_switch_out_stage5[7]), .outData_8(wire_switch_out_stage5[8]), .outData_9(wire_switch_out_stage5[9]), .outData_10(wire_switch_out_stage5[10]), .outData_11(wire_switch_out_stage5[11]), .outData_12(wire_switch_out_stage5[12]), .outData_13(wire_switch_out_stage5[13]), .outData_14(wire_switch_out_stage5[14]), .outData_15(wire_switch_out_stage5[15]), .outData_16(wire_switch_out_stage5[16]), .outData_17(wire_switch_out_stage5[17]), .outData_18(wire_switch_out_stage5[18]), .outData_19(wire_switch_out_stage5[19]), .outData_20(wire_switch_out_stage5[20]), .outData_21(wire_switch_out_stage5[21]), .outData_22(wire_switch_out_stage5[22]), .outData_23(wire_switch_out_stage5[23]), .outData_24(wire_switch_out_stage5[24]), .outData_25(wire_switch_out_stage5[25]), .outData_26(wire_switch_out_stage5[26]), .outData_27(wire_switch_out_stage5[27]), .outData_28(wire_switch_out_stage5[28]), .outData_29(wire_switch_out_stage5[29]), .outData_30(wire_switch_out_stage5[30]), .outData_31(wire_switch_out_stage5[31]), .outData_32(wire_switch_out_stage5[32]), .outData_33(wire_switch_out_stage5[33]), .outData_34(wire_switch_out_stage5[34]), .outData_35(wire_switch_out_stage5[35]), .outData_36(wire_switch_out_stage5[36]), .outData_37(wire_switch_out_stage5[37]), .outData_38(wire_switch_out_stage5[38]), .outData_39(wire_switch_out_stage5[39]), .outData_40(wire_switch_out_stage5[40]), .outData_41(wire_switch_out_stage5[41]), .outData_42(wire_switch_out_stage5[42]), .outData_43(wire_switch_out_stage5[43]), .outData_44(wire_switch_out_stage5[44]), .outData_45(wire_switch_out_stage5[45]), .outData_46(wire_switch_out_stage5[46]), .outData_47(wire_switch_out_stage5[47]), .outData_48(wire_switch_out_stage5[48]), .outData_49(wire_switch_out_stage5[49]), .outData_50(wire_switch_out_stage5[50]), .outData_51(wire_switch_out_stage5[51]), .outData_52(wire_switch_out_stage5[52]), .outData_53(wire_switch_out_stage5[53]), .outData_54(wire_switch_out_stage5[54]), .outData_55(wire_switch_out_stage5[55]), .outData_56(wire_switch_out_stage5[56]), .outData_57(wire_switch_out_stage5[57]), .outData_58(wire_switch_out_stage5[58]), .outData_59(wire_switch_out_stage5[59]), .outData_60(wire_switch_out_stage5[60]), .outData_61(wire_switch_out_stage5[61]), .outData_62(wire_switch_out_stage5[62]), .outData_63(wire_switch_out_stage5[63]), 
        .in_start(con_in_start_stage5), .out_start(in_start_stage4), .ctrl(wire_ctrl_stage5), .clk(clk), .rst(rst));
  
  s10_wireCon_dp64_st5_R wire_stage_5(
        .inData_0(wireIn[0]), .inData_1(wireIn[1]), .inData_2(wireIn[2]), .inData_3(wireIn[3]), .inData_4(wireIn[4]), .inData_5(wireIn[5]), .inData_6(wireIn[6]), .inData_7(wireIn[7]), .inData_8(wireIn[8]), .inData_9(wireIn[9]), .inData_10(wireIn[10]), .inData_11(wireIn[11]), .inData_12(wireIn[12]), .inData_13(wireIn[13]), .inData_14(wireIn[14]), .inData_15(wireIn[15]), .inData_16(wireIn[16]), .inData_17(wireIn[17]), .inData_18(wireIn[18]), .inData_19(wireIn[19]), .inData_20(wireIn[20]), .inData_21(wireIn[21]), .inData_22(wireIn[22]), .inData_23(wireIn[23]), .inData_24(wireIn[24]), .inData_25(wireIn[25]), .inData_26(wireIn[26]), .inData_27(wireIn[27]), .inData_28(wireIn[28]), .inData_29(wireIn[29]), .inData_30(wireIn[30]), .inData_31(wireIn[31]), .inData_32(wireIn[32]), .inData_33(wireIn[33]), .inData_34(wireIn[34]), .inData_35(wireIn[35]), .inData_36(wireIn[36]), .inData_37(wireIn[37]), .inData_38(wireIn[38]), .inData_39(wireIn[39]), .inData_40(wireIn[40]), .inData_41(wireIn[41]), .inData_42(wireIn[42]), .inData_43(wireIn[43]), .inData_44(wireIn[44]), .inData_45(wireIn[45]), .inData_46(wireIn[46]), .inData_47(wireIn[47]), .inData_48(wireIn[48]), .inData_49(wireIn[49]), .inData_50(wireIn[50]), .inData_51(wireIn[51]), .inData_52(wireIn[52]), .inData_53(wireIn[53]), .inData_54(wireIn[54]), .inData_55(wireIn[55]), .inData_56(wireIn[56]), .inData_57(wireIn[57]), .inData_58(wireIn[58]), .inData_59(wireIn[59]), .inData_60(wireIn[60]), .inData_61(wireIn[61]), .inData_62(wireIn[62]), .inData_63(wireIn[63]), 
        .outData_0(wire_switch_in_stage5[0]), .outData_1(wire_switch_in_stage5[1]), .outData_2(wire_switch_in_stage5[2]), .outData_3(wire_switch_in_stage5[3]), .outData_4(wire_switch_in_stage5[4]), .outData_5(wire_switch_in_stage5[5]), .outData_6(wire_switch_in_stage5[6]), .outData_7(wire_switch_in_stage5[7]), .outData_8(wire_switch_in_stage5[8]), .outData_9(wire_switch_in_stage5[9]), .outData_10(wire_switch_in_stage5[10]), .outData_11(wire_switch_in_stage5[11]), .outData_12(wire_switch_in_stage5[12]), .outData_13(wire_switch_in_stage5[13]), .outData_14(wire_switch_in_stage5[14]), .outData_15(wire_switch_in_stage5[15]), .outData_16(wire_switch_in_stage5[16]), .outData_17(wire_switch_in_stage5[17]), .outData_18(wire_switch_in_stage5[18]), .outData_19(wire_switch_in_stage5[19]), .outData_20(wire_switch_in_stage5[20]), .outData_21(wire_switch_in_stage5[21]), .outData_22(wire_switch_in_stage5[22]), .outData_23(wire_switch_in_stage5[23]), .outData_24(wire_switch_in_stage5[24]), .outData_25(wire_switch_in_stage5[25]), .outData_26(wire_switch_in_stage5[26]), .outData_27(wire_switch_in_stage5[27]), .outData_28(wire_switch_in_stage5[28]), .outData_29(wire_switch_in_stage5[29]), .outData_30(wire_switch_in_stage5[30]), .outData_31(wire_switch_in_stage5[31]), .outData_32(wire_switch_in_stage5[32]), .outData_33(wire_switch_in_stage5[33]), .outData_34(wire_switch_in_stage5[34]), .outData_35(wire_switch_in_stage5[35]), .outData_36(wire_switch_in_stage5[36]), .outData_37(wire_switch_in_stage5[37]), .outData_38(wire_switch_in_stage5[38]), .outData_39(wire_switch_in_stage5[39]), .outData_40(wire_switch_in_stage5[40]), .outData_41(wire_switch_in_stage5[41]), .outData_42(wire_switch_in_stage5[42]), .outData_43(wire_switch_in_stage5[43]), .outData_44(wire_switch_in_stage5[44]), .outData_45(wire_switch_in_stage5[45]), .outData_46(wire_switch_in_stage5[46]), .outData_47(wire_switch_in_stage5[47]), .outData_48(wire_switch_in_stage5[48]), .outData_49(wire_switch_in_stage5[49]), .outData_50(wire_switch_in_stage5[50]), .outData_51(wire_switch_in_stage5[51]), .outData_52(wire_switch_in_stage5[52]), .outData_53(wire_switch_in_stage5[53]), .outData_54(wire_switch_in_stage5[54]), .outData_55(wire_switch_in_stage5[55]), .outData_56(wire_switch_in_stage5[56]), .outData_57(wire_switch_in_stage5[57]), .outData_58(wire_switch_in_stage5[58]), .outData_59(wire_switch_in_stage5[59]), .outData_60(wire_switch_in_stage5[60]), .outData_61(wire_switch_in_stage5[61]), .outData_62(wire_switch_in_stage5[62]), .outData_63(wire_switch_in_stage5[63]), 
        .in_start(in_start_stage5), .out_start(con_in_start_stage5), .clk(clk), .rst(rst)); 

  
  s10_switch_ctrl_dp64_st5_per0R s8_switch_ctrl_stage_5(.in_start(con_in_start_stage5),.ctrl_out(wire_ctrl_stage5),.clk(clk), .rst(rst));

  wire [DATA_WIDTH-1:0] wire_switch_in_stage4[63:0];
  wire [DATA_WIDTH-1:0] wire_switch_out_stage4[63:0];
  reg [31:0] wire_ctrl_stage4;

  s10_switches_stage_st4_0_R switch_stage_4(
        .inData_0(wire_switch_in_stage4[0]), .inData_1(wire_switch_in_stage4[1]), .inData_2(wire_switch_in_stage4[2]), .inData_3(wire_switch_in_stage4[3]), .inData_4(wire_switch_in_stage4[4]), .inData_5(wire_switch_in_stage4[5]), .inData_6(wire_switch_in_stage4[6]), .inData_7(wire_switch_in_stage4[7]), .inData_8(wire_switch_in_stage4[8]), .inData_9(wire_switch_in_stage4[9]), .inData_10(wire_switch_in_stage4[10]), .inData_11(wire_switch_in_stage4[11]), .inData_12(wire_switch_in_stage4[12]), .inData_13(wire_switch_in_stage4[13]), .inData_14(wire_switch_in_stage4[14]), .inData_15(wire_switch_in_stage4[15]), .inData_16(wire_switch_in_stage4[16]), .inData_17(wire_switch_in_stage4[17]), .inData_18(wire_switch_in_stage4[18]), .inData_19(wire_switch_in_stage4[19]), .inData_20(wire_switch_in_stage4[20]), .inData_21(wire_switch_in_stage4[21]), .inData_22(wire_switch_in_stage4[22]), .inData_23(wire_switch_in_stage4[23]), .inData_24(wire_switch_in_stage4[24]), .inData_25(wire_switch_in_stage4[25]), .inData_26(wire_switch_in_stage4[26]), .inData_27(wire_switch_in_stage4[27]), .inData_28(wire_switch_in_stage4[28]), .inData_29(wire_switch_in_stage4[29]), .inData_30(wire_switch_in_stage4[30]), .inData_31(wire_switch_in_stage4[31]), .inData_32(wire_switch_in_stage4[32]), .inData_33(wire_switch_in_stage4[33]), .inData_34(wire_switch_in_stage4[34]), .inData_35(wire_switch_in_stage4[35]), .inData_36(wire_switch_in_stage4[36]), .inData_37(wire_switch_in_stage4[37]), .inData_38(wire_switch_in_stage4[38]), .inData_39(wire_switch_in_stage4[39]), .inData_40(wire_switch_in_stage4[40]), .inData_41(wire_switch_in_stage4[41]), .inData_42(wire_switch_in_stage4[42]), .inData_43(wire_switch_in_stage4[43]), .inData_44(wire_switch_in_stage4[44]), .inData_45(wire_switch_in_stage4[45]), .inData_46(wire_switch_in_stage4[46]), .inData_47(wire_switch_in_stage4[47]), .inData_48(wire_switch_in_stage4[48]), .inData_49(wire_switch_in_stage4[49]), .inData_50(wire_switch_in_stage4[50]), .inData_51(wire_switch_in_stage4[51]), .inData_52(wire_switch_in_stage4[52]), .inData_53(wire_switch_in_stage4[53]), .inData_54(wire_switch_in_stage4[54]), .inData_55(wire_switch_in_stage4[55]), .inData_56(wire_switch_in_stage4[56]), .inData_57(wire_switch_in_stage4[57]), .inData_58(wire_switch_in_stage4[58]), .inData_59(wire_switch_in_stage4[59]), .inData_60(wire_switch_in_stage4[60]), .inData_61(wire_switch_in_stage4[61]), .inData_62(wire_switch_in_stage4[62]), .inData_63(wire_switch_in_stage4[63]), 
        .outData_0(wire_switch_out_stage4[0]), .outData_1(wire_switch_out_stage4[1]), .outData_2(wire_switch_out_stage4[2]), .outData_3(wire_switch_out_stage4[3]), .outData_4(wire_switch_out_stage4[4]), .outData_5(wire_switch_out_stage4[5]), .outData_6(wire_switch_out_stage4[6]), .outData_7(wire_switch_out_stage4[7]), .outData_8(wire_switch_out_stage4[8]), .outData_9(wire_switch_out_stage4[9]), .outData_10(wire_switch_out_stage4[10]), .outData_11(wire_switch_out_stage4[11]), .outData_12(wire_switch_out_stage4[12]), .outData_13(wire_switch_out_stage4[13]), .outData_14(wire_switch_out_stage4[14]), .outData_15(wire_switch_out_stage4[15]), .outData_16(wire_switch_out_stage4[16]), .outData_17(wire_switch_out_stage4[17]), .outData_18(wire_switch_out_stage4[18]), .outData_19(wire_switch_out_stage4[19]), .outData_20(wire_switch_out_stage4[20]), .outData_21(wire_switch_out_stage4[21]), .outData_22(wire_switch_out_stage4[22]), .outData_23(wire_switch_out_stage4[23]), .outData_24(wire_switch_out_stage4[24]), .outData_25(wire_switch_out_stage4[25]), .outData_26(wire_switch_out_stage4[26]), .outData_27(wire_switch_out_stage4[27]), .outData_28(wire_switch_out_stage4[28]), .outData_29(wire_switch_out_stage4[29]), .outData_30(wire_switch_out_stage4[30]), .outData_31(wire_switch_out_stage4[31]), .outData_32(wire_switch_out_stage4[32]), .outData_33(wire_switch_out_stage4[33]), .outData_34(wire_switch_out_stage4[34]), .outData_35(wire_switch_out_stage4[35]), .outData_36(wire_switch_out_stage4[36]), .outData_37(wire_switch_out_stage4[37]), .outData_38(wire_switch_out_stage4[38]), .outData_39(wire_switch_out_stage4[39]), .outData_40(wire_switch_out_stage4[40]), .outData_41(wire_switch_out_stage4[41]), .outData_42(wire_switch_out_stage4[42]), .outData_43(wire_switch_out_stage4[43]), .outData_44(wire_switch_out_stage4[44]), .outData_45(wire_switch_out_stage4[45]), .outData_46(wire_switch_out_stage4[46]), .outData_47(wire_switch_out_stage4[47]), .outData_48(wire_switch_out_stage4[48]), .outData_49(wire_switch_out_stage4[49]), .outData_50(wire_switch_out_stage4[50]), .outData_51(wire_switch_out_stage4[51]), .outData_52(wire_switch_out_stage4[52]), .outData_53(wire_switch_out_stage4[53]), .outData_54(wire_switch_out_stage4[54]), .outData_55(wire_switch_out_stage4[55]), .outData_56(wire_switch_out_stage4[56]), .outData_57(wire_switch_out_stage4[57]), .outData_58(wire_switch_out_stage4[58]), .outData_59(wire_switch_out_stage4[59]), .outData_60(wire_switch_out_stage4[60]), .outData_61(wire_switch_out_stage4[61]), .outData_62(wire_switch_out_stage4[62]), .outData_63(wire_switch_out_stage4[63]), 
        .in_start(con_in_start_stage4), .out_start(in_start_stage3), .ctrl(wire_ctrl_stage4), .clk(clk), .rst(rst));
  
  s10_wireCon_dp64_st4_R wire_stage_4(
        .inData_0(wire_switch_out_stage5[0]), .inData_1(wire_switch_out_stage5[1]), .inData_2(wire_switch_out_stage5[2]), .inData_3(wire_switch_out_stage5[3]), .inData_4(wire_switch_out_stage5[4]), .inData_5(wire_switch_out_stage5[5]), .inData_6(wire_switch_out_stage5[6]), .inData_7(wire_switch_out_stage5[7]), .inData_8(wire_switch_out_stage5[8]), .inData_9(wire_switch_out_stage5[9]), .inData_10(wire_switch_out_stage5[10]), .inData_11(wire_switch_out_stage5[11]), .inData_12(wire_switch_out_stage5[12]), .inData_13(wire_switch_out_stage5[13]), .inData_14(wire_switch_out_stage5[14]), .inData_15(wire_switch_out_stage5[15]), .inData_16(wire_switch_out_stage5[16]), .inData_17(wire_switch_out_stage5[17]), .inData_18(wire_switch_out_stage5[18]), .inData_19(wire_switch_out_stage5[19]), .inData_20(wire_switch_out_stage5[20]), .inData_21(wire_switch_out_stage5[21]), .inData_22(wire_switch_out_stage5[22]), .inData_23(wire_switch_out_stage5[23]), .inData_24(wire_switch_out_stage5[24]), .inData_25(wire_switch_out_stage5[25]), .inData_26(wire_switch_out_stage5[26]), .inData_27(wire_switch_out_stage5[27]), .inData_28(wire_switch_out_stage5[28]), .inData_29(wire_switch_out_stage5[29]), .inData_30(wire_switch_out_stage5[30]), .inData_31(wire_switch_out_stage5[31]), .inData_32(wire_switch_out_stage5[32]), .inData_33(wire_switch_out_stage5[33]), .inData_34(wire_switch_out_stage5[34]), .inData_35(wire_switch_out_stage5[35]), .inData_36(wire_switch_out_stage5[36]), .inData_37(wire_switch_out_stage5[37]), .inData_38(wire_switch_out_stage5[38]), .inData_39(wire_switch_out_stage5[39]), .inData_40(wire_switch_out_stage5[40]), .inData_41(wire_switch_out_stage5[41]), .inData_42(wire_switch_out_stage5[42]), .inData_43(wire_switch_out_stage5[43]), .inData_44(wire_switch_out_stage5[44]), .inData_45(wire_switch_out_stage5[45]), .inData_46(wire_switch_out_stage5[46]), .inData_47(wire_switch_out_stage5[47]), .inData_48(wire_switch_out_stage5[48]), .inData_49(wire_switch_out_stage5[49]), .inData_50(wire_switch_out_stage5[50]), .inData_51(wire_switch_out_stage5[51]), .inData_52(wire_switch_out_stage5[52]), .inData_53(wire_switch_out_stage5[53]), .inData_54(wire_switch_out_stage5[54]), .inData_55(wire_switch_out_stage5[55]), .inData_56(wire_switch_out_stage5[56]), .inData_57(wire_switch_out_stage5[57]), .inData_58(wire_switch_out_stage5[58]), .inData_59(wire_switch_out_stage5[59]), .inData_60(wire_switch_out_stage5[60]), .inData_61(wire_switch_out_stage5[61]), .inData_62(wire_switch_out_stage5[62]), .inData_63(wire_switch_out_stage5[63]), 
        .outData_0(wire_switch_in_stage4[0]), .outData_1(wire_switch_in_stage4[1]), .outData_2(wire_switch_in_stage4[2]), .outData_3(wire_switch_in_stage4[3]), .outData_4(wire_switch_in_stage4[4]), .outData_5(wire_switch_in_stage4[5]), .outData_6(wire_switch_in_stage4[6]), .outData_7(wire_switch_in_stage4[7]), .outData_8(wire_switch_in_stage4[8]), .outData_9(wire_switch_in_stage4[9]), .outData_10(wire_switch_in_stage4[10]), .outData_11(wire_switch_in_stage4[11]), .outData_12(wire_switch_in_stage4[12]), .outData_13(wire_switch_in_stage4[13]), .outData_14(wire_switch_in_stage4[14]), .outData_15(wire_switch_in_stage4[15]), .outData_16(wire_switch_in_stage4[16]), .outData_17(wire_switch_in_stage4[17]), .outData_18(wire_switch_in_stage4[18]), .outData_19(wire_switch_in_stage4[19]), .outData_20(wire_switch_in_stage4[20]), .outData_21(wire_switch_in_stage4[21]), .outData_22(wire_switch_in_stage4[22]), .outData_23(wire_switch_in_stage4[23]), .outData_24(wire_switch_in_stage4[24]), .outData_25(wire_switch_in_stage4[25]), .outData_26(wire_switch_in_stage4[26]), .outData_27(wire_switch_in_stage4[27]), .outData_28(wire_switch_in_stage4[28]), .outData_29(wire_switch_in_stage4[29]), .outData_30(wire_switch_in_stage4[30]), .outData_31(wire_switch_in_stage4[31]), .outData_32(wire_switch_in_stage4[32]), .outData_33(wire_switch_in_stage4[33]), .outData_34(wire_switch_in_stage4[34]), .outData_35(wire_switch_in_stage4[35]), .outData_36(wire_switch_in_stage4[36]), .outData_37(wire_switch_in_stage4[37]), .outData_38(wire_switch_in_stage4[38]), .outData_39(wire_switch_in_stage4[39]), .outData_40(wire_switch_in_stage4[40]), .outData_41(wire_switch_in_stage4[41]), .outData_42(wire_switch_in_stage4[42]), .outData_43(wire_switch_in_stage4[43]), .outData_44(wire_switch_in_stage4[44]), .outData_45(wire_switch_in_stage4[45]), .outData_46(wire_switch_in_stage4[46]), .outData_47(wire_switch_in_stage4[47]), .outData_48(wire_switch_in_stage4[48]), .outData_49(wire_switch_in_stage4[49]), .outData_50(wire_switch_in_stage4[50]), .outData_51(wire_switch_in_stage4[51]), .outData_52(wire_switch_in_stage4[52]), .outData_53(wire_switch_in_stage4[53]), .outData_54(wire_switch_in_stage4[54]), .outData_55(wire_switch_in_stage4[55]), .outData_56(wire_switch_in_stage4[56]), .outData_57(wire_switch_in_stage4[57]), .outData_58(wire_switch_in_stage4[58]), .outData_59(wire_switch_in_stage4[59]), .outData_60(wire_switch_in_stage4[60]), .outData_61(wire_switch_in_stage4[61]), .outData_62(wire_switch_in_stage4[62]), .outData_63(wire_switch_in_stage4[63]), 
        .in_start(in_start_stage4), .out_start(con_in_start_stage4), .clk(clk), .rst(rst)); 

  
  s10_switch_ctrl_dp64_st4_per0R s8_switch_ctrl_stage_4(.in_start(con_in_start_stage4),.ctrl_out(wire_ctrl_stage4),.clk(clk), .rst(rst));

  wire [DATA_WIDTH-1:0] wire_switch_in_stage3[63:0];
  wire [DATA_WIDTH-1:0] wire_switch_out_stage3[63:0];
  reg [31:0] wire_ctrl_stage3;

  s10_switches_stage_st3_0_R switch_stage_3(
        .inData_0(wire_switch_in_stage3[0]), .inData_1(wire_switch_in_stage3[1]), .inData_2(wire_switch_in_stage3[2]), .inData_3(wire_switch_in_stage3[3]), .inData_4(wire_switch_in_stage3[4]), .inData_5(wire_switch_in_stage3[5]), .inData_6(wire_switch_in_stage3[6]), .inData_7(wire_switch_in_stage3[7]), .inData_8(wire_switch_in_stage3[8]), .inData_9(wire_switch_in_stage3[9]), .inData_10(wire_switch_in_stage3[10]), .inData_11(wire_switch_in_stage3[11]), .inData_12(wire_switch_in_stage3[12]), .inData_13(wire_switch_in_stage3[13]), .inData_14(wire_switch_in_stage3[14]), .inData_15(wire_switch_in_stage3[15]), .inData_16(wire_switch_in_stage3[16]), .inData_17(wire_switch_in_stage3[17]), .inData_18(wire_switch_in_stage3[18]), .inData_19(wire_switch_in_stage3[19]), .inData_20(wire_switch_in_stage3[20]), .inData_21(wire_switch_in_stage3[21]), .inData_22(wire_switch_in_stage3[22]), .inData_23(wire_switch_in_stage3[23]), .inData_24(wire_switch_in_stage3[24]), .inData_25(wire_switch_in_stage3[25]), .inData_26(wire_switch_in_stage3[26]), .inData_27(wire_switch_in_stage3[27]), .inData_28(wire_switch_in_stage3[28]), .inData_29(wire_switch_in_stage3[29]), .inData_30(wire_switch_in_stage3[30]), .inData_31(wire_switch_in_stage3[31]), .inData_32(wire_switch_in_stage3[32]), .inData_33(wire_switch_in_stage3[33]), .inData_34(wire_switch_in_stage3[34]), .inData_35(wire_switch_in_stage3[35]), .inData_36(wire_switch_in_stage3[36]), .inData_37(wire_switch_in_stage3[37]), .inData_38(wire_switch_in_stage3[38]), .inData_39(wire_switch_in_stage3[39]), .inData_40(wire_switch_in_stage3[40]), .inData_41(wire_switch_in_stage3[41]), .inData_42(wire_switch_in_stage3[42]), .inData_43(wire_switch_in_stage3[43]), .inData_44(wire_switch_in_stage3[44]), .inData_45(wire_switch_in_stage3[45]), .inData_46(wire_switch_in_stage3[46]), .inData_47(wire_switch_in_stage3[47]), .inData_48(wire_switch_in_stage3[48]), .inData_49(wire_switch_in_stage3[49]), .inData_50(wire_switch_in_stage3[50]), .inData_51(wire_switch_in_stage3[51]), .inData_52(wire_switch_in_stage3[52]), .inData_53(wire_switch_in_stage3[53]), .inData_54(wire_switch_in_stage3[54]), .inData_55(wire_switch_in_stage3[55]), .inData_56(wire_switch_in_stage3[56]), .inData_57(wire_switch_in_stage3[57]), .inData_58(wire_switch_in_stage3[58]), .inData_59(wire_switch_in_stage3[59]), .inData_60(wire_switch_in_stage3[60]), .inData_61(wire_switch_in_stage3[61]), .inData_62(wire_switch_in_stage3[62]), .inData_63(wire_switch_in_stage3[63]), 
        .outData_0(wire_switch_out_stage3[0]), .outData_1(wire_switch_out_stage3[1]), .outData_2(wire_switch_out_stage3[2]), .outData_3(wire_switch_out_stage3[3]), .outData_4(wire_switch_out_stage3[4]), .outData_5(wire_switch_out_stage3[5]), .outData_6(wire_switch_out_stage3[6]), .outData_7(wire_switch_out_stage3[7]), .outData_8(wire_switch_out_stage3[8]), .outData_9(wire_switch_out_stage3[9]), .outData_10(wire_switch_out_stage3[10]), .outData_11(wire_switch_out_stage3[11]), .outData_12(wire_switch_out_stage3[12]), .outData_13(wire_switch_out_stage3[13]), .outData_14(wire_switch_out_stage3[14]), .outData_15(wire_switch_out_stage3[15]), .outData_16(wire_switch_out_stage3[16]), .outData_17(wire_switch_out_stage3[17]), .outData_18(wire_switch_out_stage3[18]), .outData_19(wire_switch_out_stage3[19]), .outData_20(wire_switch_out_stage3[20]), .outData_21(wire_switch_out_stage3[21]), .outData_22(wire_switch_out_stage3[22]), .outData_23(wire_switch_out_stage3[23]), .outData_24(wire_switch_out_stage3[24]), .outData_25(wire_switch_out_stage3[25]), .outData_26(wire_switch_out_stage3[26]), .outData_27(wire_switch_out_stage3[27]), .outData_28(wire_switch_out_stage3[28]), .outData_29(wire_switch_out_stage3[29]), .outData_30(wire_switch_out_stage3[30]), .outData_31(wire_switch_out_stage3[31]), .outData_32(wire_switch_out_stage3[32]), .outData_33(wire_switch_out_stage3[33]), .outData_34(wire_switch_out_stage3[34]), .outData_35(wire_switch_out_stage3[35]), .outData_36(wire_switch_out_stage3[36]), .outData_37(wire_switch_out_stage3[37]), .outData_38(wire_switch_out_stage3[38]), .outData_39(wire_switch_out_stage3[39]), .outData_40(wire_switch_out_stage3[40]), .outData_41(wire_switch_out_stage3[41]), .outData_42(wire_switch_out_stage3[42]), .outData_43(wire_switch_out_stage3[43]), .outData_44(wire_switch_out_stage3[44]), .outData_45(wire_switch_out_stage3[45]), .outData_46(wire_switch_out_stage3[46]), .outData_47(wire_switch_out_stage3[47]), .outData_48(wire_switch_out_stage3[48]), .outData_49(wire_switch_out_stage3[49]), .outData_50(wire_switch_out_stage3[50]), .outData_51(wire_switch_out_stage3[51]), .outData_52(wire_switch_out_stage3[52]), .outData_53(wire_switch_out_stage3[53]), .outData_54(wire_switch_out_stage3[54]), .outData_55(wire_switch_out_stage3[55]), .outData_56(wire_switch_out_stage3[56]), .outData_57(wire_switch_out_stage3[57]), .outData_58(wire_switch_out_stage3[58]), .outData_59(wire_switch_out_stage3[59]), .outData_60(wire_switch_out_stage3[60]), .outData_61(wire_switch_out_stage3[61]), .outData_62(wire_switch_out_stage3[62]), .outData_63(wire_switch_out_stage3[63]), 
        .in_start(con_in_start_stage3), .out_start(in_start_stage2), .ctrl(wire_ctrl_stage3), .clk(clk), .rst(rst));
  
  s10_wireCon_dp64_st3_R wire_stage_3(
        .inData_0(wire_switch_out_stage4[0]), .inData_1(wire_switch_out_stage4[1]), .inData_2(wire_switch_out_stage4[2]), .inData_3(wire_switch_out_stage4[3]), .inData_4(wire_switch_out_stage4[4]), .inData_5(wire_switch_out_stage4[5]), .inData_6(wire_switch_out_stage4[6]), .inData_7(wire_switch_out_stage4[7]), .inData_8(wire_switch_out_stage4[8]), .inData_9(wire_switch_out_stage4[9]), .inData_10(wire_switch_out_stage4[10]), .inData_11(wire_switch_out_stage4[11]), .inData_12(wire_switch_out_stage4[12]), .inData_13(wire_switch_out_stage4[13]), .inData_14(wire_switch_out_stage4[14]), .inData_15(wire_switch_out_stage4[15]), .inData_16(wire_switch_out_stage4[16]), .inData_17(wire_switch_out_stage4[17]), .inData_18(wire_switch_out_stage4[18]), .inData_19(wire_switch_out_stage4[19]), .inData_20(wire_switch_out_stage4[20]), .inData_21(wire_switch_out_stage4[21]), .inData_22(wire_switch_out_stage4[22]), .inData_23(wire_switch_out_stage4[23]), .inData_24(wire_switch_out_stage4[24]), .inData_25(wire_switch_out_stage4[25]), .inData_26(wire_switch_out_stage4[26]), .inData_27(wire_switch_out_stage4[27]), .inData_28(wire_switch_out_stage4[28]), .inData_29(wire_switch_out_stage4[29]), .inData_30(wire_switch_out_stage4[30]), .inData_31(wire_switch_out_stage4[31]), .inData_32(wire_switch_out_stage4[32]), .inData_33(wire_switch_out_stage4[33]), .inData_34(wire_switch_out_stage4[34]), .inData_35(wire_switch_out_stage4[35]), .inData_36(wire_switch_out_stage4[36]), .inData_37(wire_switch_out_stage4[37]), .inData_38(wire_switch_out_stage4[38]), .inData_39(wire_switch_out_stage4[39]), .inData_40(wire_switch_out_stage4[40]), .inData_41(wire_switch_out_stage4[41]), .inData_42(wire_switch_out_stage4[42]), .inData_43(wire_switch_out_stage4[43]), .inData_44(wire_switch_out_stage4[44]), .inData_45(wire_switch_out_stage4[45]), .inData_46(wire_switch_out_stage4[46]), .inData_47(wire_switch_out_stage4[47]), .inData_48(wire_switch_out_stage4[48]), .inData_49(wire_switch_out_stage4[49]), .inData_50(wire_switch_out_stage4[50]), .inData_51(wire_switch_out_stage4[51]), .inData_52(wire_switch_out_stage4[52]), .inData_53(wire_switch_out_stage4[53]), .inData_54(wire_switch_out_stage4[54]), .inData_55(wire_switch_out_stage4[55]), .inData_56(wire_switch_out_stage4[56]), .inData_57(wire_switch_out_stage4[57]), .inData_58(wire_switch_out_stage4[58]), .inData_59(wire_switch_out_stage4[59]), .inData_60(wire_switch_out_stage4[60]), .inData_61(wire_switch_out_stage4[61]), .inData_62(wire_switch_out_stage4[62]), .inData_63(wire_switch_out_stage4[63]), 
        .outData_0(wire_switch_in_stage3[0]), .outData_1(wire_switch_in_stage3[1]), .outData_2(wire_switch_in_stage3[2]), .outData_3(wire_switch_in_stage3[3]), .outData_4(wire_switch_in_stage3[4]), .outData_5(wire_switch_in_stage3[5]), .outData_6(wire_switch_in_stage3[6]), .outData_7(wire_switch_in_stage3[7]), .outData_8(wire_switch_in_stage3[8]), .outData_9(wire_switch_in_stage3[9]), .outData_10(wire_switch_in_stage3[10]), .outData_11(wire_switch_in_stage3[11]), .outData_12(wire_switch_in_stage3[12]), .outData_13(wire_switch_in_stage3[13]), .outData_14(wire_switch_in_stage3[14]), .outData_15(wire_switch_in_stage3[15]), .outData_16(wire_switch_in_stage3[16]), .outData_17(wire_switch_in_stage3[17]), .outData_18(wire_switch_in_stage3[18]), .outData_19(wire_switch_in_stage3[19]), .outData_20(wire_switch_in_stage3[20]), .outData_21(wire_switch_in_stage3[21]), .outData_22(wire_switch_in_stage3[22]), .outData_23(wire_switch_in_stage3[23]), .outData_24(wire_switch_in_stage3[24]), .outData_25(wire_switch_in_stage3[25]), .outData_26(wire_switch_in_stage3[26]), .outData_27(wire_switch_in_stage3[27]), .outData_28(wire_switch_in_stage3[28]), .outData_29(wire_switch_in_stage3[29]), .outData_30(wire_switch_in_stage3[30]), .outData_31(wire_switch_in_stage3[31]), .outData_32(wire_switch_in_stage3[32]), .outData_33(wire_switch_in_stage3[33]), .outData_34(wire_switch_in_stage3[34]), .outData_35(wire_switch_in_stage3[35]), .outData_36(wire_switch_in_stage3[36]), .outData_37(wire_switch_in_stage3[37]), .outData_38(wire_switch_in_stage3[38]), .outData_39(wire_switch_in_stage3[39]), .outData_40(wire_switch_in_stage3[40]), .outData_41(wire_switch_in_stage3[41]), .outData_42(wire_switch_in_stage3[42]), .outData_43(wire_switch_in_stage3[43]), .outData_44(wire_switch_in_stage3[44]), .outData_45(wire_switch_in_stage3[45]), .outData_46(wire_switch_in_stage3[46]), .outData_47(wire_switch_in_stage3[47]), .outData_48(wire_switch_in_stage3[48]), .outData_49(wire_switch_in_stage3[49]), .outData_50(wire_switch_in_stage3[50]), .outData_51(wire_switch_in_stage3[51]), .outData_52(wire_switch_in_stage3[52]), .outData_53(wire_switch_in_stage3[53]), .outData_54(wire_switch_in_stage3[54]), .outData_55(wire_switch_in_stage3[55]), .outData_56(wire_switch_in_stage3[56]), .outData_57(wire_switch_in_stage3[57]), .outData_58(wire_switch_in_stage3[58]), .outData_59(wire_switch_in_stage3[59]), .outData_60(wire_switch_in_stage3[60]), .outData_61(wire_switch_in_stage3[61]), .outData_62(wire_switch_in_stage3[62]), .outData_63(wire_switch_in_stage3[63]), 
        .in_start(in_start_stage3), .out_start(con_in_start_stage3), .clk(clk), .rst(rst)); 

  
  s10_switch_ctrl_dp64_st3_per0R s8_switch_ctrl_stage_3(.in_start(con_in_start_stage3),.ctrl_out(wire_ctrl_stage3),.clk(clk), .rst(rst));

  wire [DATA_WIDTH-1:0] wire_switch_in_stage2[63:0];
  wire [DATA_WIDTH-1:0] wire_switch_out_stage2[63:0];
  reg [31:0] wire_ctrl_stage2;

  s10_switches_stage_st2_0_R switch_stage_2(
        .inData_0(wire_switch_in_stage2[0]), .inData_1(wire_switch_in_stage2[1]), .inData_2(wire_switch_in_stage2[2]), .inData_3(wire_switch_in_stage2[3]), .inData_4(wire_switch_in_stage2[4]), .inData_5(wire_switch_in_stage2[5]), .inData_6(wire_switch_in_stage2[6]), .inData_7(wire_switch_in_stage2[7]), .inData_8(wire_switch_in_stage2[8]), .inData_9(wire_switch_in_stage2[9]), .inData_10(wire_switch_in_stage2[10]), .inData_11(wire_switch_in_stage2[11]), .inData_12(wire_switch_in_stage2[12]), .inData_13(wire_switch_in_stage2[13]), .inData_14(wire_switch_in_stage2[14]), .inData_15(wire_switch_in_stage2[15]), .inData_16(wire_switch_in_stage2[16]), .inData_17(wire_switch_in_stage2[17]), .inData_18(wire_switch_in_stage2[18]), .inData_19(wire_switch_in_stage2[19]), .inData_20(wire_switch_in_stage2[20]), .inData_21(wire_switch_in_stage2[21]), .inData_22(wire_switch_in_stage2[22]), .inData_23(wire_switch_in_stage2[23]), .inData_24(wire_switch_in_stage2[24]), .inData_25(wire_switch_in_stage2[25]), .inData_26(wire_switch_in_stage2[26]), .inData_27(wire_switch_in_stage2[27]), .inData_28(wire_switch_in_stage2[28]), .inData_29(wire_switch_in_stage2[29]), .inData_30(wire_switch_in_stage2[30]), .inData_31(wire_switch_in_stage2[31]), .inData_32(wire_switch_in_stage2[32]), .inData_33(wire_switch_in_stage2[33]), .inData_34(wire_switch_in_stage2[34]), .inData_35(wire_switch_in_stage2[35]), .inData_36(wire_switch_in_stage2[36]), .inData_37(wire_switch_in_stage2[37]), .inData_38(wire_switch_in_stage2[38]), .inData_39(wire_switch_in_stage2[39]), .inData_40(wire_switch_in_stage2[40]), .inData_41(wire_switch_in_stage2[41]), .inData_42(wire_switch_in_stage2[42]), .inData_43(wire_switch_in_stage2[43]), .inData_44(wire_switch_in_stage2[44]), .inData_45(wire_switch_in_stage2[45]), .inData_46(wire_switch_in_stage2[46]), .inData_47(wire_switch_in_stage2[47]), .inData_48(wire_switch_in_stage2[48]), .inData_49(wire_switch_in_stage2[49]), .inData_50(wire_switch_in_stage2[50]), .inData_51(wire_switch_in_stage2[51]), .inData_52(wire_switch_in_stage2[52]), .inData_53(wire_switch_in_stage2[53]), .inData_54(wire_switch_in_stage2[54]), .inData_55(wire_switch_in_stage2[55]), .inData_56(wire_switch_in_stage2[56]), .inData_57(wire_switch_in_stage2[57]), .inData_58(wire_switch_in_stage2[58]), .inData_59(wire_switch_in_stage2[59]), .inData_60(wire_switch_in_stage2[60]), .inData_61(wire_switch_in_stage2[61]), .inData_62(wire_switch_in_stage2[62]), .inData_63(wire_switch_in_stage2[63]), 
        .outData_0(wire_switch_out_stage2[0]), .outData_1(wire_switch_out_stage2[1]), .outData_2(wire_switch_out_stage2[2]), .outData_3(wire_switch_out_stage2[3]), .outData_4(wire_switch_out_stage2[4]), .outData_5(wire_switch_out_stage2[5]), .outData_6(wire_switch_out_stage2[6]), .outData_7(wire_switch_out_stage2[7]), .outData_8(wire_switch_out_stage2[8]), .outData_9(wire_switch_out_stage2[9]), .outData_10(wire_switch_out_stage2[10]), .outData_11(wire_switch_out_stage2[11]), .outData_12(wire_switch_out_stage2[12]), .outData_13(wire_switch_out_stage2[13]), .outData_14(wire_switch_out_stage2[14]), .outData_15(wire_switch_out_stage2[15]), .outData_16(wire_switch_out_stage2[16]), .outData_17(wire_switch_out_stage2[17]), .outData_18(wire_switch_out_stage2[18]), .outData_19(wire_switch_out_stage2[19]), .outData_20(wire_switch_out_stage2[20]), .outData_21(wire_switch_out_stage2[21]), .outData_22(wire_switch_out_stage2[22]), .outData_23(wire_switch_out_stage2[23]), .outData_24(wire_switch_out_stage2[24]), .outData_25(wire_switch_out_stage2[25]), .outData_26(wire_switch_out_stage2[26]), .outData_27(wire_switch_out_stage2[27]), .outData_28(wire_switch_out_stage2[28]), .outData_29(wire_switch_out_stage2[29]), .outData_30(wire_switch_out_stage2[30]), .outData_31(wire_switch_out_stage2[31]), .outData_32(wire_switch_out_stage2[32]), .outData_33(wire_switch_out_stage2[33]), .outData_34(wire_switch_out_stage2[34]), .outData_35(wire_switch_out_stage2[35]), .outData_36(wire_switch_out_stage2[36]), .outData_37(wire_switch_out_stage2[37]), .outData_38(wire_switch_out_stage2[38]), .outData_39(wire_switch_out_stage2[39]), .outData_40(wire_switch_out_stage2[40]), .outData_41(wire_switch_out_stage2[41]), .outData_42(wire_switch_out_stage2[42]), .outData_43(wire_switch_out_stage2[43]), .outData_44(wire_switch_out_stage2[44]), .outData_45(wire_switch_out_stage2[45]), .outData_46(wire_switch_out_stage2[46]), .outData_47(wire_switch_out_stage2[47]), .outData_48(wire_switch_out_stage2[48]), .outData_49(wire_switch_out_stage2[49]), .outData_50(wire_switch_out_stage2[50]), .outData_51(wire_switch_out_stage2[51]), .outData_52(wire_switch_out_stage2[52]), .outData_53(wire_switch_out_stage2[53]), .outData_54(wire_switch_out_stage2[54]), .outData_55(wire_switch_out_stage2[55]), .outData_56(wire_switch_out_stage2[56]), .outData_57(wire_switch_out_stage2[57]), .outData_58(wire_switch_out_stage2[58]), .outData_59(wire_switch_out_stage2[59]), .outData_60(wire_switch_out_stage2[60]), .outData_61(wire_switch_out_stage2[61]), .outData_62(wire_switch_out_stage2[62]), .outData_63(wire_switch_out_stage2[63]), 
        .in_start(con_in_start_stage2), .out_start(in_start_stage1), .ctrl(wire_ctrl_stage2), .clk(clk), .rst(rst));
  
  s10_wireCon_dp64_st2_R wire_stage_2(
        .inData_0(wire_switch_out_stage3[0]), .inData_1(wire_switch_out_stage3[1]), .inData_2(wire_switch_out_stage3[2]), .inData_3(wire_switch_out_stage3[3]), .inData_4(wire_switch_out_stage3[4]), .inData_5(wire_switch_out_stage3[5]), .inData_6(wire_switch_out_stage3[6]), .inData_7(wire_switch_out_stage3[7]), .inData_8(wire_switch_out_stage3[8]), .inData_9(wire_switch_out_stage3[9]), .inData_10(wire_switch_out_stage3[10]), .inData_11(wire_switch_out_stage3[11]), .inData_12(wire_switch_out_stage3[12]), .inData_13(wire_switch_out_stage3[13]), .inData_14(wire_switch_out_stage3[14]), .inData_15(wire_switch_out_stage3[15]), .inData_16(wire_switch_out_stage3[16]), .inData_17(wire_switch_out_stage3[17]), .inData_18(wire_switch_out_stage3[18]), .inData_19(wire_switch_out_stage3[19]), .inData_20(wire_switch_out_stage3[20]), .inData_21(wire_switch_out_stage3[21]), .inData_22(wire_switch_out_stage3[22]), .inData_23(wire_switch_out_stage3[23]), .inData_24(wire_switch_out_stage3[24]), .inData_25(wire_switch_out_stage3[25]), .inData_26(wire_switch_out_stage3[26]), .inData_27(wire_switch_out_stage3[27]), .inData_28(wire_switch_out_stage3[28]), .inData_29(wire_switch_out_stage3[29]), .inData_30(wire_switch_out_stage3[30]), .inData_31(wire_switch_out_stage3[31]), .inData_32(wire_switch_out_stage3[32]), .inData_33(wire_switch_out_stage3[33]), .inData_34(wire_switch_out_stage3[34]), .inData_35(wire_switch_out_stage3[35]), .inData_36(wire_switch_out_stage3[36]), .inData_37(wire_switch_out_stage3[37]), .inData_38(wire_switch_out_stage3[38]), .inData_39(wire_switch_out_stage3[39]), .inData_40(wire_switch_out_stage3[40]), .inData_41(wire_switch_out_stage3[41]), .inData_42(wire_switch_out_stage3[42]), .inData_43(wire_switch_out_stage3[43]), .inData_44(wire_switch_out_stage3[44]), .inData_45(wire_switch_out_stage3[45]), .inData_46(wire_switch_out_stage3[46]), .inData_47(wire_switch_out_stage3[47]), .inData_48(wire_switch_out_stage3[48]), .inData_49(wire_switch_out_stage3[49]), .inData_50(wire_switch_out_stage3[50]), .inData_51(wire_switch_out_stage3[51]), .inData_52(wire_switch_out_stage3[52]), .inData_53(wire_switch_out_stage3[53]), .inData_54(wire_switch_out_stage3[54]), .inData_55(wire_switch_out_stage3[55]), .inData_56(wire_switch_out_stage3[56]), .inData_57(wire_switch_out_stage3[57]), .inData_58(wire_switch_out_stage3[58]), .inData_59(wire_switch_out_stage3[59]), .inData_60(wire_switch_out_stage3[60]), .inData_61(wire_switch_out_stage3[61]), .inData_62(wire_switch_out_stage3[62]), .inData_63(wire_switch_out_stage3[63]), 
        .outData_0(wire_switch_in_stage2[0]), .outData_1(wire_switch_in_stage2[1]), .outData_2(wire_switch_in_stage2[2]), .outData_3(wire_switch_in_stage2[3]), .outData_4(wire_switch_in_stage2[4]), .outData_5(wire_switch_in_stage2[5]), .outData_6(wire_switch_in_stage2[6]), .outData_7(wire_switch_in_stage2[7]), .outData_8(wire_switch_in_stage2[8]), .outData_9(wire_switch_in_stage2[9]), .outData_10(wire_switch_in_stage2[10]), .outData_11(wire_switch_in_stage2[11]), .outData_12(wire_switch_in_stage2[12]), .outData_13(wire_switch_in_stage2[13]), .outData_14(wire_switch_in_stage2[14]), .outData_15(wire_switch_in_stage2[15]), .outData_16(wire_switch_in_stage2[16]), .outData_17(wire_switch_in_stage2[17]), .outData_18(wire_switch_in_stage2[18]), .outData_19(wire_switch_in_stage2[19]), .outData_20(wire_switch_in_stage2[20]), .outData_21(wire_switch_in_stage2[21]), .outData_22(wire_switch_in_stage2[22]), .outData_23(wire_switch_in_stage2[23]), .outData_24(wire_switch_in_stage2[24]), .outData_25(wire_switch_in_stage2[25]), .outData_26(wire_switch_in_stage2[26]), .outData_27(wire_switch_in_stage2[27]), .outData_28(wire_switch_in_stage2[28]), .outData_29(wire_switch_in_stage2[29]), .outData_30(wire_switch_in_stage2[30]), .outData_31(wire_switch_in_stage2[31]), .outData_32(wire_switch_in_stage2[32]), .outData_33(wire_switch_in_stage2[33]), .outData_34(wire_switch_in_stage2[34]), .outData_35(wire_switch_in_stage2[35]), .outData_36(wire_switch_in_stage2[36]), .outData_37(wire_switch_in_stage2[37]), .outData_38(wire_switch_in_stage2[38]), .outData_39(wire_switch_in_stage2[39]), .outData_40(wire_switch_in_stage2[40]), .outData_41(wire_switch_in_stage2[41]), .outData_42(wire_switch_in_stage2[42]), .outData_43(wire_switch_in_stage2[43]), .outData_44(wire_switch_in_stage2[44]), .outData_45(wire_switch_in_stage2[45]), .outData_46(wire_switch_in_stage2[46]), .outData_47(wire_switch_in_stage2[47]), .outData_48(wire_switch_in_stage2[48]), .outData_49(wire_switch_in_stage2[49]), .outData_50(wire_switch_in_stage2[50]), .outData_51(wire_switch_in_stage2[51]), .outData_52(wire_switch_in_stage2[52]), .outData_53(wire_switch_in_stage2[53]), .outData_54(wire_switch_in_stage2[54]), .outData_55(wire_switch_in_stage2[55]), .outData_56(wire_switch_in_stage2[56]), .outData_57(wire_switch_in_stage2[57]), .outData_58(wire_switch_in_stage2[58]), .outData_59(wire_switch_in_stage2[59]), .outData_60(wire_switch_in_stage2[60]), .outData_61(wire_switch_in_stage2[61]), .outData_62(wire_switch_in_stage2[62]), .outData_63(wire_switch_in_stage2[63]), 
        .in_start(in_start_stage2), .out_start(con_in_start_stage2), .clk(clk), .rst(rst)); 

  
  s10_switch_ctrl_dp64_st2_per0R s8_switch_ctrl_stage_2(.in_start(con_in_start_stage2),.ctrl_out(wire_ctrl_stage2),.clk(clk), .rst(rst));

  wire [DATA_WIDTH-1:0] wire_switch_in_stage1[63:0];
  wire [DATA_WIDTH-1:0] wire_switch_out_stage1[63:0];
  reg [31:0] wire_ctrl_stage1;

  s10_switches_stage_st1_0_R switch_stage_1(
        .inData_0(wire_switch_in_stage1[0]), .inData_1(wire_switch_in_stage1[1]), .inData_2(wire_switch_in_stage1[2]), .inData_3(wire_switch_in_stage1[3]), .inData_4(wire_switch_in_stage1[4]), .inData_5(wire_switch_in_stage1[5]), .inData_6(wire_switch_in_stage1[6]), .inData_7(wire_switch_in_stage1[7]), .inData_8(wire_switch_in_stage1[8]), .inData_9(wire_switch_in_stage1[9]), .inData_10(wire_switch_in_stage1[10]), .inData_11(wire_switch_in_stage1[11]), .inData_12(wire_switch_in_stage1[12]), .inData_13(wire_switch_in_stage1[13]), .inData_14(wire_switch_in_stage1[14]), .inData_15(wire_switch_in_stage1[15]), .inData_16(wire_switch_in_stage1[16]), .inData_17(wire_switch_in_stage1[17]), .inData_18(wire_switch_in_stage1[18]), .inData_19(wire_switch_in_stage1[19]), .inData_20(wire_switch_in_stage1[20]), .inData_21(wire_switch_in_stage1[21]), .inData_22(wire_switch_in_stage1[22]), .inData_23(wire_switch_in_stage1[23]), .inData_24(wire_switch_in_stage1[24]), .inData_25(wire_switch_in_stage1[25]), .inData_26(wire_switch_in_stage1[26]), .inData_27(wire_switch_in_stage1[27]), .inData_28(wire_switch_in_stage1[28]), .inData_29(wire_switch_in_stage1[29]), .inData_30(wire_switch_in_stage1[30]), .inData_31(wire_switch_in_stage1[31]), .inData_32(wire_switch_in_stage1[32]), .inData_33(wire_switch_in_stage1[33]), .inData_34(wire_switch_in_stage1[34]), .inData_35(wire_switch_in_stage1[35]), .inData_36(wire_switch_in_stage1[36]), .inData_37(wire_switch_in_stage1[37]), .inData_38(wire_switch_in_stage1[38]), .inData_39(wire_switch_in_stage1[39]), .inData_40(wire_switch_in_stage1[40]), .inData_41(wire_switch_in_stage1[41]), .inData_42(wire_switch_in_stage1[42]), .inData_43(wire_switch_in_stage1[43]), .inData_44(wire_switch_in_stage1[44]), .inData_45(wire_switch_in_stage1[45]), .inData_46(wire_switch_in_stage1[46]), .inData_47(wire_switch_in_stage1[47]), .inData_48(wire_switch_in_stage1[48]), .inData_49(wire_switch_in_stage1[49]), .inData_50(wire_switch_in_stage1[50]), .inData_51(wire_switch_in_stage1[51]), .inData_52(wire_switch_in_stage1[52]), .inData_53(wire_switch_in_stage1[53]), .inData_54(wire_switch_in_stage1[54]), .inData_55(wire_switch_in_stage1[55]), .inData_56(wire_switch_in_stage1[56]), .inData_57(wire_switch_in_stage1[57]), .inData_58(wire_switch_in_stage1[58]), .inData_59(wire_switch_in_stage1[59]), .inData_60(wire_switch_in_stage1[60]), .inData_61(wire_switch_in_stage1[61]), .inData_62(wire_switch_in_stage1[62]), .inData_63(wire_switch_in_stage1[63]), 
        .outData_0(wire_switch_out_stage1[0]), .outData_1(wire_switch_out_stage1[1]), .outData_2(wire_switch_out_stage1[2]), .outData_3(wire_switch_out_stage1[3]), .outData_4(wire_switch_out_stage1[4]), .outData_5(wire_switch_out_stage1[5]), .outData_6(wire_switch_out_stage1[6]), .outData_7(wire_switch_out_stage1[7]), .outData_8(wire_switch_out_stage1[8]), .outData_9(wire_switch_out_stage1[9]), .outData_10(wire_switch_out_stage1[10]), .outData_11(wire_switch_out_stage1[11]), .outData_12(wire_switch_out_stage1[12]), .outData_13(wire_switch_out_stage1[13]), .outData_14(wire_switch_out_stage1[14]), .outData_15(wire_switch_out_stage1[15]), .outData_16(wire_switch_out_stage1[16]), .outData_17(wire_switch_out_stage1[17]), .outData_18(wire_switch_out_stage1[18]), .outData_19(wire_switch_out_stage1[19]), .outData_20(wire_switch_out_stage1[20]), .outData_21(wire_switch_out_stage1[21]), .outData_22(wire_switch_out_stage1[22]), .outData_23(wire_switch_out_stage1[23]), .outData_24(wire_switch_out_stage1[24]), .outData_25(wire_switch_out_stage1[25]), .outData_26(wire_switch_out_stage1[26]), .outData_27(wire_switch_out_stage1[27]), .outData_28(wire_switch_out_stage1[28]), .outData_29(wire_switch_out_stage1[29]), .outData_30(wire_switch_out_stage1[30]), .outData_31(wire_switch_out_stage1[31]), .outData_32(wire_switch_out_stage1[32]), .outData_33(wire_switch_out_stage1[33]), .outData_34(wire_switch_out_stage1[34]), .outData_35(wire_switch_out_stage1[35]), .outData_36(wire_switch_out_stage1[36]), .outData_37(wire_switch_out_stage1[37]), .outData_38(wire_switch_out_stage1[38]), .outData_39(wire_switch_out_stage1[39]), .outData_40(wire_switch_out_stage1[40]), .outData_41(wire_switch_out_stage1[41]), .outData_42(wire_switch_out_stage1[42]), .outData_43(wire_switch_out_stage1[43]), .outData_44(wire_switch_out_stage1[44]), .outData_45(wire_switch_out_stage1[45]), .outData_46(wire_switch_out_stage1[46]), .outData_47(wire_switch_out_stage1[47]), .outData_48(wire_switch_out_stage1[48]), .outData_49(wire_switch_out_stage1[49]), .outData_50(wire_switch_out_stage1[50]), .outData_51(wire_switch_out_stage1[51]), .outData_52(wire_switch_out_stage1[52]), .outData_53(wire_switch_out_stage1[53]), .outData_54(wire_switch_out_stage1[54]), .outData_55(wire_switch_out_stage1[55]), .outData_56(wire_switch_out_stage1[56]), .outData_57(wire_switch_out_stage1[57]), .outData_58(wire_switch_out_stage1[58]), .outData_59(wire_switch_out_stage1[59]), .outData_60(wire_switch_out_stage1[60]), .outData_61(wire_switch_out_stage1[61]), .outData_62(wire_switch_out_stage1[62]), .outData_63(wire_switch_out_stage1[63]), 
        .in_start(con_in_start_stage1), .out_start(in_start_stage0), .ctrl(wire_ctrl_stage1), .clk(clk), .rst(rst));
  
  s10_wireCon_dp64_st1_R wire_stage_1(
        .inData_0(wire_switch_out_stage2[0]), .inData_1(wire_switch_out_stage2[1]), .inData_2(wire_switch_out_stage2[2]), .inData_3(wire_switch_out_stage2[3]), .inData_4(wire_switch_out_stage2[4]), .inData_5(wire_switch_out_stage2[5]), .inData_6(wire_switch_out_stage2[6]), .inData_7(wire_switch_out_stage2[7]), .inData_8(wire_switch_out_stage2[8]), .inData_9(wire_switch_out_stage2[9]), .inData_10(wire_switch_out_stage2[10]), .inData_11(wire_switch_out_stage2[11]), .inData_12(wire_switch_out_stage2[12]), .inData_13(wire_switch_out_stage2[13]), .inData_14(wire_switch_out_stage2[14]), .inData_15(wire_switch_out_stage2[15]), .inData_16(wire_switch_out_stage2[16]), .inData_17(wire_switch_out_stage2[17]), .inData_18(wire_switch_out_stage2[18]), .inData_19(wire_switch_out_stage2[19]), .inData_20(wire_switch_out_stage2[20]), .inData_21(wire_switch_out_stage2[21]), .inData_22(wire_switch_out_stage2[22]), .inData_23(wire_switch_out_stage2[23]), .inData_24(wire_switch_out_stage2[24]), .inData_25(wire_switch_out_stage2[25]), .inData_26(wire_switch_out_stage2[26]), .inData_27(wire_switch_out_stage2[27]), .inData_28(wire_switch_out_stage2[28]), .inData_29(wire_switch_out_stage2[29]), .inData_30(wire_switch_out_stage2[30]), .inData_31(wire_switch_out_stage2[31]), .inData_32(wire_switch_out_stage2[32]), .inData_33(wire_switch_out_stage2[33]), .inData_34(wire_switch_out_stage2[34]), .inData_35(wire_switch_out_stage2[35]), .inData_36(wire_switch_out_stage2[36]), .inData_37(wire_switch_out_stage2[37]), .inData_38(wire_switch_out_stage2[38]), .inData_39(wire_switch_out_stage2[39]), .inData_40(wire_switch_out_stage2[40]), .inData_41(wire_switch_out_stage2[41]), .inData_42(wire_switch_out_stage2[42]), .inData_43(wire_switch_out_stage2[43]), .inData_44(wire_switch_out_stage2[44]), .inData_45(wire_switch_out_stage2[45]), .inData_46(wire_switch_out_stage2[46]), .inData_47(wire_switch_out_stage2[47]), .inData_48(wire_switch_out_stage2[48]), .inData_49(wire_switch_out_stage2[49]), .inData_50(wire_switch_out_stage2[50]), .inData_51(wire_switch_out_stage2[51]), .inData_52(wire_switch_out_stage2[52]), .inData_53(wire_switch_out_stage2[53]), .inData_54(wire_switch_out_stage2[54]), .inData_55(wire_switch_out_stage2[55]), .inData_56(wire_switch_out_stage2[56]), .inData_57(wire_switch_out_stage2[57]), .inData_58(wire_switch_out_stage2[58]), .inData_59(wire_switch_out_stage2[59]), .inData_60(wire_switch_out_stage2[60]), .inData_61(wire_switch_out_stage2[61]), .inData_62(wire_switch_out_stage2[62]), .inData_63(wire_switch_out_stage2[63]), 
        .outData_0(wire_switch_in_stage1[0]), .outData_1(wire_switch_in_stage1[1]), .outData_2(wire_switch_in_stage1[2]), .outData_3(wire_switch_in_stage1[3]), .outData_4(wire_switch_in_stage1[4]), .outData_5(wire_switch_in_stage1[5]), .outData_6(wire_switch_in_stage1[6]), .outData_7(wire_switch_in_stage1[7]), .outData_8(wire_switch_in_stage1[8]), .outData_9(wire_switch_in_stage1[9]), .outData_10(wire_switch_in_stage1[10]), .outData_11(wire_switch_in_stage1[11]), .outData_12(wire_switch_in_stage1[12]), .outData_13(wire_switch_in_stage1[13]), .outData_14(wire_switch_in_stage1[14]), .outData_15(wire_switch_in_stage1[15]), .outData_16(wire_switch_in_stage1[16]), .outData_17(wire_switch_in_stage1[17]), .outData_18(wire_switch_in_stage1[18]), .outData_19(wire_switch_in_stage1[19]), .outData_20(wire_switch_in_stage1[20]), .outData_21(wire_switch_in_stage1[21]), .outData_22(wire_switch_in_stage1[22]), .outData_23(wire_switch_in_stage1[23]), .outData_24(wire_switch_in_stage1[24]), .outData_25(wire_switch_in_stage1[25]), .outData_26(wire_switch_in_stage1[26]), .outData_27(wire_switch_in_stage1[27]), .outData_28(wire_switch_in_stage1[28]), .outData_29(wire_switch_in_stage1[29]), .outData_30(wire_switch_in_stage1[30]), .outData_31(wire_switch_in_stage1[31]), .outData_32(wire_switch_in_stage1[32]), .outData_33(wire_switch_in_stage1[33]), .outData_34(wire_switch_in_stage1[34]), .outData_35(wire_switch_in_stage1[35]), .outData_36(wire_switch_in_stage1[36]), .outData_37(wire_switch_in_stage1[37]), .outData_38(wire_switch_in_stage1[38]), .outData_39(wire_switch_in_stage1[39]), .outData_40(wire_switch_in_stage1[40]), .outData_41(wire_switch_in_stage1[41]), .outData_42(wire_switch_in_stage1[42]), .outData_43(wire_switch_in_stage1[43]), .outData_44(wire_switch_in_stage1[44]), .outData_45(wire_switch_in_stage1[45]), .outData_46(wire_switch_in_stage1[46]), .outData_47(wire_switch_in_stage1[47]), .outData_48(wire_switch_in_stage1[48]), .outData_49(wire_switch_in_stage1[49]), .outData_50(wire_switch_in_stage1[50]), .outData_51(wire_switch_in_stage1[51]), .outData_52(wire_switch_in_stage1[52]), .outData_53(wire_switch_in_stage1[53]), .outData_54(wire_switch_in_stage1[54]), .outData_55(wire_switch_in_stage1[55]), .outData_56(wire_switch_in_stage1[56]), .outData_57(wire_switch_in_stage1[57]), .outData_58(wire_switch_in_stage1[58]), .outData_59(wire_switch_in_stage1[59]), .outData_60(wire_switch_in_stage1[60]), .outData_61(wire_switch_in_stage1[61]), .outData_62(wire_switch_in_stage1[62]), .outData_63(wire_switch_in_stage1[63]), 
        .in_start(in_start_stage1), .out_start(con_in_start_stage1), .clk(clk), .rst(rst)); 

  
  s10_switch_ctrl_dp64_st1_per0R s8_switch_ctrl_stage_1(.in_start(con_in_start_stage1),.ctrl_out(wire_ctrl_stage1),.clk(clk), .rst(rst));

  wire [DATA_WIDTH-1:0] wire_switch_in_stage0[63:0];
  wire [DATA_WIDTH-1:0] wire_switch_out_stage0[63:0];
  reg [31:0] wire_ctrl_stage0;

  s10_switches_stage_st0_0_R switch_stage_0(
        .inData_0(wire_switch_in_stage0[0]), .inData_1(wire_switch_in_stage0[1]), .inData_2(wire_switch_in_stage0[2]), .inData_3(wire_switch_in_stage0[3]), .inData_4(wire_switch_in_stage0[4]), .inData_5(wire_switch_in_stage0[5]), .inData_6(wire_switch_in_stage0[6]), .inData_7(wire_switch_in_stage0[7]), .inData_8(wire_switch_in_stage0[8]), .inData_9(wire_switch_in_stage0[9]), .inData_10(wire_switch_in_stage0[10]), .inData_11(wire_switch_in_stage0[11]), .inData_12(wire_switch_in_stage0[12]), .inData_13(wire_switch_in_stage0[13]), .inData_14(wire_switch_in_stage0[14]), .inData_15(wire_switch_in_stage0[15]), .inData_16(wire_switch_in_stage0[16]), .inData_17(wire_switch_in_stage0[17]), .inData_18(wire_switch_in_stage0[18]), .inData_19(wire_switch_in_stage0[19]), .inData_20(wire_switch_in_stage0[20]), .inData_21(wire_switch_in_stage0[21]), .inData_22(wire_switch_in_stage0[22]), .inData_23(wire_switch_in_stage0[23]), .inData_24(wire_switch_in_stage0[24]), .inData_25(wire_switch_in_stage0[25]), .inData_26(wire_switch_in_stage0[26]), .inData_27(wire_switch_in_stage0[27]), .inData_28(wire_switch_in_stage0[28]), .inData_29(wire_switch_in_stage0[29]), .inData_30(wire_switch_in_stage0[30]), .inData_31(wire_switch_in_stage0[31]), .inData_32(wire_switch_in_stage0[32]), .inData_33(wire_switch_in_stage0[33]), .inData_34(wire_switch_in_stage0[34]), .inData_35(wire_switch_in_stage0[35]), .inData_36(wire_switch_in_stage0[36]), .inData_37(wire_switch_in_stage0[37]), .inData_38(wire_switch_in_stage0[38]), .inData_39(wire_switch_in_stage0[39]), .inData_40(wire_switch_in_stage0[40]), .inData_41(wire_switch_in_stage0[41]), .inData_42(wire_switch_in_stage0[42]), .inData_43(wire_switch_in_stage0[43]), .inData_44(wire_switch_in_stage0[44]), .inData_45(wire_switch_in_stage0[45]), .inData_46(wire_switch_in_stage0[46]), .inData_47(wire_switch_in_stage0[47]), .inData_48(wire_switch_in_stage0[48]), .inData_49(wire_switch_in_stage0[49]), .inData_50(wire_switch_in_stage0[50]), .inData_51(wire_switch_in_stage0[51]), .inData_52(wire_switch_in_stage0[52]), .inData_53(wire_switch_in_stage0[53]), .inData_54(wire_switch_in_stage0[54]), .inData_55(wire_switch_in_stage0[55]), .inData_56(wire_switch_in_stage0[56]), .inData_57(wire_switch_in_stage0[57]), .inData_58(wire_switch_in_stage0[58]), .inData_59(wire_switch_in_stage0[59]), .inData_60(wire_switch_in_stage0[60]), .inData_61(wire_switch_in_stage0[61]), .inData_62(wire_switch_in_stage0[62]), .inData_63(wire_switch_in_stage0[63]), 
        .outData_0(wireOut[0]), .outData_1(wireOut[1]), .outData_2(wireOut[2]), .outData_3(wireOut[3]), .outData_4(wireOut[4]), .outData_5(wireOut[5]), .outData_6(wireOut[6]), .outData_7(wireOut[7]), .outData_8(wireOut[8]), .outData_9(wireOut[9]), .outData_10(wireOut[10]), .outData_11(wireOut[11]), .outData_12(wireOut[12]), .outData_13(wireOut[13]), .outData_14(wireOut[14]), .outData_15(wireOut[15]), .outData_16(wireOut[16]), .outData_17(wireOut[17]), .outData_18(wireOut[18]), .outData_19(wireOut[19]), .outData_20(wireOut[20]), .outData_21(wireOut[21]), .outData_22(wireOut[22]), .outData_23(wireOut[23]), .outData_24(wireOut[24]), .outData_25(wireOut[25]), .outData_26(wireOut[26]), .outData_27(wireOut[27]), .outData_28(wireOut[28]), .outData_29(wireOut[29]), .outData_30(wireOut[30]), .outData_31(wireOut[31]), .outData_32(wireOut[32]), .outData_33(wireOut[33]), .outData_34(wireOut[34]), .outData_35(wireOut[35]), .outData_36(wireOut[36]), .outData_37(wireOut[37]), .outData_38(wireOut[38]), .outData_39(wireOut[39]), .outData_40(wireOut[40]), .outData_41(wireOut[41]), .outData_42(wireOut[42]), .outData_43(wireOut[43]), .outData_44(wireOut[44]), .outData_45(wireOut[45]), .outData_46(wireOut[46]), .outData_47(wireOut[47]), .outData_48(wireOut[48]), .outData_49(wireOut[49]), .outData_50(wireOut[50]), .outData_51(wireOut[51]), .outData_52(wireOut[52]), .outData_53(wireOut[53]), .outData_54(wireOut[54]), .outData_55(wireOut[55]), .outData_56(wireOut[56]), .outData_57(wireOut[57]), .outData_58(wireOut[58]), .outData_59(wireOut[59]), .outData_60(wireOut[60]), .outData_61(wireOut[61]), .outData_62(wireOut[62]), .outData_63(wireOut[63]), 
        .in_start(con_in_start_stage0), .out_start(out_start_w), .ctrl(wire_ctrl_stage0), .clk(clk), .rst(rst));
  
  s10_wireCon_dp64_st0_R wire_stage_0(
        .inData_0(wire_switch_out_stage1[0]), .inData_1(wire_switch_out_stage1[1]), .inData_2(wire_switch_out_stage1[2]), .inData_3(wire_switch_out_stage1[3]), .inData_4(wire_switch_out_stage1[4]), .inData_5(wire_switch_out_stage1[5]), .inData_6(wire_switch_out_stage1[6]), .inData_7(wire_switch_out_stage1[7]), .inData_8(wire_switch_out_stage1[8]), .inData_9(wire_switch_out_stage1[9]), .inData_10(wire_switch_out_stage1[10]), .inData_11(wire_switch_out_stage1[11]), .inData_12(wire_switch_out_stage1[12]), .inData_13(wire_switch_out_stage1[13]), .inData_14(wire_switch_out_stage1[14]), .inData_15(wire_switch_out_stage1[15]), .inData_16(wire_switch_out_stage1[16]), .inData_17(wire_switch_out_stage1[17]), .inData_18(wire_switch_out_stage1[18]), .inData_19(wire_switch_out_stage1[19]), .inData_20(wire_switch_out_stage1[20]), .inData_21(wire_switch_out_stage1[21]), .inData_22(wire_switch_out_stage1[22]), .inData_23(wire_switch_out_stage1[23]), .inData_24(wire_switch_out_stage1[24]), .inData_25(wire_switch_out_stage1[25]), .inData_26(wire_switch_out_stage1[26]), .inData_27(wire_switch_out_stage1[27]), .inData_28(wire_switch_out_stage1[28]), .inData_29(wire_switch_out_stage1[29]), .inData_30(wire_switch_out_stage1[30]), .inData_31(wire_switch_out_stage1[31]), .inData_32(wire_switch_out_stage1[32]), .inData_33(wire_switch_out_stage1[33]), .inData_34(wire_switch_out_stage1[34]), .inData_35(wire_switch_out_stage1[35]), .inData_36(wire_switch_out_stage1[36]), .inData_37(wire_switch_out_stage1[37]), .inData_38(wire_switch_out_stage1[38]), .inData_39(wire_switch_out_stage1[39]), .inData_40(wire_switch_out_stage1[40]), .inData_41(wire_switch_out_stage1[41]), .inData_42(wire_switch_out_stage1[42]), .inData_43(wire_switch_out_stage1[43]), .inData_44(wire_switch_out_stage1[44]), .inData_45(wire_switch_out_stage1[45]), .inData_46(wire_switch_out_stage1[46]), .inData_47(wire_switch_out_stage1[47]), .inData_48(wire_switch_out_stage1[48]), .inData_49(wire_switch_out_stage1[49]), .inData_50(wire_switch_out_stage1[50]), .inData_51(wire_switch_out_stage1[51]), .inData_52(wire_switch_out_stage1[52]), .inData_53(wire_switch_out_stage1[53]), .inData_54(wire_switch_out_stage1[54]), .inData_55(wire_switch_out_stage1[55]), .inData_56(wire_switch_out_stage1[56]), .inData_57(wire_switch_out_stage1[57]), .inData_58(wire_switch_out_stage1[58]), .inData_59(wire_switch_out_stage1[59]), .inData_60(wire_switch_out_stage1[60]), .inData_61(wire_switch_out_stage1[61]), .inData_62(wire_switch_out_stage1[62]), .inData_63(wire_switch_out_stage1[63]), 
        .outData_0(wire_switch_in_stage0[0]), .outData_1(wire_switch_in_stage0[1]), .outData_2(wire_switch_in_stage0[2]), .outData_3(wire_switch_in_stage0[3]), .outData_4(wire_switch_in_stage0[4]), .outData_5(wire_switch_in_stage0[5]), .outData_6(wire_switch_in_stage0[6]), .outData_7(wire_switch_in_stage0[7]), .outData_8(wire_switch_in_stage0[8]), .outData_9(wire_switch_in_stage0[9]), .outData_10(wire_switch_in_stage0[10]), .outData_11(wire_switch_in_stage0[11]), .outData_12(wire_switch_in_stage0[12]), .outData_13(wire_switch_in_stage0[13]), .outData_14(wire_switch_in_stage0[14]), .outData_15(wire_switch_in_stage0[15]), .outData_16(wire_switch_in_stage0[16]), .outData_17(wire_switch_in_stage0[17]), .outData_18(wire_switch_in_stage0[18]), .outData_19(wire_switch_in_stage0[19]), .outData_20(wire_switch_in_stage0[20]), .outData_21(wire_switch_in_stage0[21]), .outData_22(wire_switch_in_stage0[22]), .outData_23(wire_switch_in_stage0[23]), .outData_24(wire_switch_in_stage0[24]), .outData_25(wire_switch_in_stage0[25]), .outData_26(wire_switch_in_stage0[26]), .outData_27(wire_switch_in_stage0[27]), .outData_28(wire_switch_in_stage0[28]), .outData_29(wire_switch_in_stage0[29]), .outData_30(wire_switch_in_stage0[30]), .outData_31(wire_switch_in_stage0[31]), .outData_32(wire_switch_in_stage0[32]), .outData_33(wire_switch_in_stage0[33]), .outData_34(wire_switch_in_stage0[34]), .outData_35(wire_switch_in_stage0[35]), .outData_36(wire_switch_in_stage0[36]), .outData_37(wire_switch_in_stage0[37]), .outData_38(wire_switch_in_stage0[38]), .outData_39(wire_switch_in_stage0[39]), .outData_40(wire_switch_in_stage0[40]), .outData_41(wire_switch_in_stage0[41]), .outData_42(wire_switch_in_stage0[42]), .outData_43(wire_switch_in_stage0[43]), .outData_44(wire_switch_in_stage0[44]), .outData_45(wire_switch_in_stage0[45]), .outData_46(wire_switch_in_stage0[46]), .outData_47(wire_switch_in_stage0[47]), .outData_48(wire_switch_in_stage0[48]), .outData_49(wire_switch_in_stage0[49]), .outData_50(wire_switch_in_stage0[50]), .outData_51(wire_switch_in_stage0[51]), .outData_52(wire_switch_in_stage0[52]), .outData_53(wire_switch_in_stage0[53]), .outData_54(wire_switch_in_stage0[54]), .outData_55(wire_switch_in_stage0[55]), .outData_56(wire_switch_in_stage0[56]), .outData_57(wire_switch_in_stage0[57]), .outData_58(wire_switch_in_stage0[58]), .outData_59(wire_switch_in_stage0[59]), .outData_60(wire_switch_in_stage0[60]), .outData_61(wire_switch_in_stage0[61]), .outData_62(wire_switch_in_stage0[62]), .outData_63(wire_switch_in_stage0[63]), 
        .in_start(in_start_stage0), .out_start(con_in_start_stage0), .clk(clk), .rst(rst)); 

  
  s10_switch_ctrl_dp64_st0_per0R s8_switch_ctrl_stage_0(.in_start(con_in_start_stage0),.ctrl_out(wire_ctrl_stage0),.clk(clk), .rst(rst));

  
  assign in_start_stage5 = in_start;    
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign outData_32 = wireOut[32];    
  assign outData_33 = wireOut[33];    
  assign outData_34 = wireOut[34];    
  assign outData_35 = wireOut[35];    
  assign outData_36 = wireOut[36];    
  assign outData_37 = wireOut[37];    
  assign outData_38 = wireOut[38];    
  assign outData_39 = wireOut[39];    
  assign outData_40 = wireOut[40];    
  assign outData_41 = wireOut[41];    
  assign outData_42 = wireOut[42];    
  assign outData_43 = wireOut[43];    
  assign outData_44 = wireOut[44];    
  assign outData_45 = wireOut[45];    
  assign outData_46 = wireOut[46];    
  assign outData_47 = wireOut[47];    
  assign outData_48 = wireOut[48];    
  assign outData_49 = wireOut[49];    
  assign outData_50 = wireOut[50];    
  assign outData_51 = wireOut[51];    
  assign outData_52 = wireOut[52];    
  assign outData_53 = wireOut[53];    
  assign outData_54 = wireOut[54];    
  assign outData_55 = wireOut[55];    
  assign outData_56 = wireOut[56];    
  assign outData_57 = wireOut[57];    
  assign outData_58 = wireOut[58];    
  assign outData_59 = wireOut[59];    
  assign outData_60 = wireOut[60];    
  assign outData_61 = wireOut[61];    
  assign outData_62 = wireOut[62];    
  assign outData_63 = wireOut[63];    
  assign out_start = out_start_w;    
  
endmodule                        


module  s10_addr_rom_dp64_mem0(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem1(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem2(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem3(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem4(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem5(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem6(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem7(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem8(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem9(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem10(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem11(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem12(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem13(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem14(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem15(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem16(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem17(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem18(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem19(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem20(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem21(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem22(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem23(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem24(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem25(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem26(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem27(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem28(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem29(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem30(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem31(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem32(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem33(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem34(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem35(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem36(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem37(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem38(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem39(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem40(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem41(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem42(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem43(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem44(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem45(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem46(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem47(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem48(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem49(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem50(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem51(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem52(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem53(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem54(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem55(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem56(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem57(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem58(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem59(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem60(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem61(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem62(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000000; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b001111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000010; 
          6'b100010: data <= 6'b000100; 
          6'b100011: data <= 6'b000110; 
          6'b100100: data <= 6'b001000; 
          6'b100101: data <= 6'b001010; 
          6'b100110: data <= 6'b001100; 
          6'b100111: data <= 6'b001110; 
          6'b101000: data <= 6'b000001; 
          6'b101001: data <= 6'b000011; 
          6'b101010: data <= 6'b000101; 
          6'b101011: data <= 6'b000111; 
          6'b101100: data <= 6'b001001; 
          6'b101101: data <= 6'b001011; 
          6'b101110: data <= 6'b001101; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b000000; 
          6'b110001: data <= 6'b000001; 
          6'b110010: data <= 6'b000010; 
          6'b110011: data <= 6'b000011; 
          6'b110100: data <= 6'b000100; 
          6'b110101: data <= 6'b000101; 
          6'b110110: data <= 6'b000110; 
          6'b110111: data <= 6'b000111; 
          6'b111000: data <= 6'b001000; 
          6'b111001: data <= 6'b001001; 
          6'b111010: data <= 6'b001010; 
          6'b111011: data <= 6'b001011; 
          6'b111100: data <= 6'b001100; 
          6'b111101: data <= 6'b001101; 
          6'b111110: data <= 6'b001110; 
          6'b111111: data <= 6'b001111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_dp64_mem63(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [3:0] addr;                        
  output reg [3:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 4'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          4'b0000: data <= 4'b1000; 
          4'b0001: data <= 4'b0000; 
          4'b0010: data <= 4'b1001; 
          4'b0011: data <= 4'b0001; 
          4'b0100: data <= 4'b1010; 
          4'b0101: data <= 4'b0010; 
          4'b0110: data <= 4'b1011; 
          4'b0111: data <= 4'b0011; 
          4'b1000: data <= 4'b1100; 
          4'b1001: data <= 4'b0100; 
          4'b1010: data <= 4'b1101; 
          4'b1011: data <= 4'b0101; 
          4'b1100: data <= 4'b1110; 
          4'b1101: data <= 4'b0110; 
          4'b1110: data <= 4'b1111; 
          4'b1111: data <= 4'b0111; 
          default: data <= 4'b0; 
        endcase
    end
  end                              

endmodule                        


module  s10_addr_rom_ctrl_dp64_per0(
in_start,                          
wen_out,                         
out_start,                         
rom_out_0,                         
rom_out_1,                         
rom_out_2,                         
rom_out_3,                         
rom_out_4,                         
rom_out_5,                         
rom_out_6,                         
rom_out_7,                         
rom_out_8,                         
rom_out_9,                         
rom_out_10,                         
rom_out_11,                         
rom_out_12,                         
rom_out_13,                         
rom_out_14,                         
rom_out_15,                         
rom_out_16,                         
rom_out_17,                         
rom_out_18,                         
rom_out_19,                         
rom_out_20,                         
rom_out_21,                         
rom_out_22,                         
rom_out_23,                         
rom_out_24,                         
rom_out_25,                         
rom_out_26,                         
rom_out_27,                         
rom_out_28,                         
rom_out_29,                         
rom_out_30,                         
rom_out_31,                         
rom_out_32,                         
rom_out_33,                         
rom_out_34,                         
rom_out_35,                         
rom_out_36,                         
rom_out_37,                         
rom_out_38,                         
rom_out_39,                         
rom_out_40,                         
rom_out_41,                         
rom_out_42,                         
rom_out_43,                         
rom_out_44,                         
rom_out_45,                         
rom_out_46,                         
rom_out_47,                         
rom_out_48,                         
rom_out_49,                         
rom_out_50,                         
rom_out_51,                         
rom_out_52,                         
rom_out_53,                         
rom_out_54,                         
rom_out_55,                         
rom_out_56,                         
rom_out_57,                         
rom_out_58,                         
rom_out_59,                         
rom_out_60,                         
rom_out_61,                         
rom_out_62,                         
rom_out_63,                         
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [5:0] rom_out_0;            
  output [3:0] rom_out_1;            
  output [5:0] rom_out_2;            
  output [3:0] rom_out_3;            
  output [5:0] rom_out_4;            
  output [3:0] rom_out_5;            
  output [5:0] rom_out_6;            
  output [3:0] rom_out_7;            
  output [5:0] rom_out_8;            
  output [3:0] rom_out_9;            
  output [5:0] rom_out_10;            
  output [3:0] rom_out_11;            
  output [5:0] rom_out_12;            
  output [3:0] rom_out_13;            
  output [5:0] rom_out_14;            
  output [3:0] rom_out_15;            
  output [5:0] rom_out_16;            
  output [3:0] rom_out_17;            
  output [5:0] rom_out_18;            
  output [3:0] rom_out_19;            
  output [5:0] rom_out_20;            
  output [3:0] rom_out_21;            
  output [5:0] rom_out_22;            
  output [3:0] rom_out_23;            
  output [5:0] rom_out_24;            
  output [3:0] rom_out_25;            
  output [5:0] rom_out_26;            
  output [3:0] rom_out_27;            
  output [5:0] rom_out_28;            
  output [3:0] rom_out_29;            
  output [5:0] rom_out_30;            
  output [3:0] rom_out_31;            
  output [5:0] rom_out_32;            
  output [3:0] rom_out_33;            
  output [5:0] rom_out_34;            
  output [3:0] rom_out_35;            
  output [5:0] rom_out_36;            
  output [3:0] rom_out_37;            
  output [5:0] rom_out_38;            
  output [3:0] rom_out_39;            
  output [5:0] rom_out_40;            
  output [3:0] rom_out_41;            
  output [5:0] rom_out_42;            
  output [3:0] rom_out_43;            
  output [5:0] rom_out_44;            
  output [3:0] rom_out_45;            
  output [5:0] rom_out_46;            
  output [3:0] rom_out_47;            
  output [5:0] rom_out_48;            
  output [3:0] rom_out_49;            
  output [5:0] rom_out_50;            
  output [3:0] rom_out_51;            
  output [5:0] rom_out_52;            
  output [3:0] rom_out_53;            
  output [5:0] rom_out_54;            
  output [3:0] rom_out_55;            
  output [5:0] rom_out_56;            
  output [3:0] rom_out_57;            
  output [5:0] rom_out_58;            
  output [3:0] rom_out_59;            
  output [5:0] rom_out_60;            
  output [3:0] rom_out_61;            
  output [5:0] rom_out_62;            
  output [3:0] rom_out_63;            
  output wen_out;
  output out_start;
  
  /*
  reg [3:0] rom_addr_0;        
  reg [5:0] rom_addr_1;        
  reg [1:0] state;        
  
  s10_addr_rom_dp64_mem0 addr_rom_inst_0(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_0)); 
  s10_addr_rom_dp64_mem1 addr_rom_inst_1(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_1)); 
  s10_addr_rom_dp64_mem2 addr_rom_inst_2(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_2)); 
  s10_addr_rom_dp64_mem3 addr_rom_inst_3(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_3)); 
  s10_addr_rom_dp64_mem4 addr_rom_inst_4(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_4)); 
  s10_addr_rom_dp64_mem5 addr_rom_inst_5(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_5)); 
  s10_addr_rom_dp64_mem6 addr_rom_inst_6(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_6)); 
  s10_addr_rom_dp64_mem7 addr_rom_inst_7(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_7)); 
  s10_addr_rom_dp64_mem8 addr_rom_inst_8(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_8)); 
  s10_addr_rom_dp64_mem9 addr_rom_inst_9(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_9)); 
  s10_addr_rom_dp64_mem10 addr_rom_inst_10(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_10)); 
  s10_addr_rom_dp64_mem11 addr_rom_inst_11(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_11)); 
  s10_addr_rom_dp64_mem12 addr_rom_inst_12(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_12)); 
  s10_addr_rom_dp64_mem13 addr_rom_inst_13(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_13)); 
  s10_addr_rom_dp64_mem14 addr_rom_inst_14(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_14)); 
  s10_addr_rom_dp64_mem15 addr_rom_inst_15(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_15)); 
  s10_addr_rom_dp64_mem16 addr_rom_inst_16(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_16)); 
  s10_addr_rom_dp64_mem17 addr_rom_inst_17(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_17)); 
  s10_addr_rom_dp64_mem18 addr_rom_inst_18(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_18)); 
  s10_addr_rom_dp64_mem19 addr_rom_inst_19(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_19)); 
  s10_addr_rom_dp64_mem20 addr_rom_inst_20(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_20)); 
  s10_addr_rom_dp64_mem21 addr_rom_inst_21(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_21)); 
  s10_addr_rom_dp64_mem22 addr_rom_inst_22(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_22)); 
  s10_addr_rom_dp64_mem23 addr_rom_inst_23(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_23)); 
  s10_addr_rom_dp64_mem24 addr_rom_inst_24(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_24)); 
  s10_addr_rom_dp64_mem25 addr_rom_inst_25(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_25)); 
  s10_addr_rom_dp64_mem26 addr_rom_inst_26(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_26)); 
  s10_addr_rom_dp64_mem27 addr_rom_inst_27(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_27)); 
  s10_addr_rom_dp64_mem28 addr_rom_inst_28(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_28)); 
  s10_addr_rom_dp64_mem29 addr_rom_inst_29(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_29)); 
  s10_addr_rom_dp64_mem30 addr_rom_inst_30(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_30)); 
  s10_addr_rom_dp64_mem31 addr_rom_inst_31(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_31)); 
  s10_addr_rom_dp64_mem32 addr_rom_inst_32(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_32)); 
  s10_addr_rom_dp64_mem33 addr_rom_inst_33(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_33)); 
  s10_addr_rom_dp64_mem34 addr_rom_inst_34(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_34)); 
  s10_addr_rom_dp64_mem35 addr_rom_inst_35(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_35)); 
  s10_addr_rom_dp64_mem36 addr_rom_inst_36(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_36)); 
  s10_addr_rom_dp64_mem37 addr_rom_inst_37(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_37)); 
  s10_addr_rom_dp64_mem38 addr_rom_inst_38(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_38)); 
  s10_addr_rom_dp64_mem39 addr_rom_inst_39(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_39)); 
  s10_addr_rom_dp64_mem40 addr_rom_inst_40(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_40)); 
  s10_addr_rom_dp64_mem41 addr_rom_inst_41(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_41)); 
  s10_addr_rom_dp64_mem42 addr_rom_inst_42(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_42)); 
  s10_addr_rom_dp64_mem43 addr_rom_inst_43(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_43)); 
  s10_addr_rom_dp64_mem44 addr_rom_inst_44(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_44)); 
  s10_addr_rom_dp64_mem45 addr_rom_inst_45(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_45)); 
  s10_addr_rom_dp64_mem46 addr_rom_inst_46(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_46)); 
  s10_addr_rom_dp64_mem47 addr_rom_inst_47(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_47)); 
  s10_addr_rom_dp64_mem48 addr_rom_inst_48(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_48)); 
  s10_addr_rom_dp64_mem49 addr_rom_inst_49(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_49)); 
  s10_addr_rom_dp64_mem50 addr_rom_inst_50(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_50)); 
  s10_addr_rom_dp64_mem51 addr_rom_inst_51(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_51)); 
  s10_addr_rom_dp64_mem52 addr_rom_inst_52(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_52)); 
  s10_addr_rom_dp64_mem53 addr_rom_inst_53(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_53)); 
  s10_addr_rom_dp64_mem54 addr_rom_inst_54(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_54)); 
  s10_addr_rom_dp64_mem55 addr_rom_inst_55(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_55)); 
  s10_addr_rom_dp64_mem56 addr_rom_inst_56(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_56)); 
  s10_addr_rom_dp64_mem57 addr_rom_inst_57(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_57)); 
  s10_addr_rom_dp64_mem58 addr_rom_inst_58(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_58)); 
  s10_addr_rom_dp64_mem59 addr_rom_inst_59(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_59)); 
  s10_addr_rom_dp64_mem60 addr_rom_inst_60(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_60)); 
  s10_addr_rom_dp64_mem61 addr_rom_inst_61(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_61)); 
  s10_addr_rom_dp64_mem62 addr_rom_inst_62(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_62)); 
  s10_addr_rom_dp64_mem63 addr_rom_inst_63(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_63)); 
  
  assign wen_out = state[0];        
  assign out_start = (state == 2'b01) && (rom_addr_0[3:0] == {4{1'b0}}); 

  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      rom_addr_0 <= 4'b0;    
      rom_addr_1 <= 6'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case (state)              
        2'b00: begin              
          rom_addr_0 <= 4'b0;   
          rom_addr_1 <= 6'b0;   
          if (in_start)  begin              
            state <= 2'b01;              
            rom_addr_0 <= rom_addr_0 + 1;    
          rom_addr_1 <= rom_addr_1 + 1;    
          end
        end
        2'b01: begin              
          rom_addr_0 <= rom_addr_0 + 1;    
          rom_addr_1 <= rom_addr_1 + 1;    
          if (rom_addr_0 == {4{1'b0}})  begin 
            state <= 2'b11;              
          end
        end
        2'b11: begin              
          rom_addr_0 <= rom_addr_0 + 1;    
          rom_addr_1 <= rom_addr_1 + 1;    
          if (in_start)  begin              
            state <= 2'b01;              
          end
          else if (rom_addr_0 == {4{1'b0}})  begin 
            state <= 2'b00;              
          end
        end
        default: state <= 2'b00;       
      endcase
    end
  end                              
  */

  reg [3:0] offset;
  reg [2:0] state;
  always @ (posedge clk) begin
    if (rst | in_start) begin
      state <= 3'b110;
      offset <= 0;
    end else begin
      if (state != 3'b000) begin
        state <= state - 3'b001;
      end else begin
        offset <= offset + 1'b1;
      end
    end
  end

  assign wen_out = (state == 3'b0);
  assign out_start = (offset == 2);

  assign rom_out_0 = offset;
  assign rom_out_1 = (offset[3:0] >= 4'b1000) ? offset - 4'b1000 : offset + 4'b1000;

  assign rom_out_2 = offset;
  assign rom_out_3 = (offset[3:0] >= 4'b1000) ? offset - 4'b1000 : offset + 4'b1000;

  assign rom_out_4 = offset;
  assign rom_out_5 = (offset[3:0] >= 4'b1000) ? offset - 4'b1000 : offset + 4'b1000;

  assign rom_out_6 = offset;
  assign rom_out_7 = (offset[3:0] >= 4'b1000) ? offset - 4'b1000 : offset + 4'b1000;

  assign rom_out_8 = offset;
  assign rom_out_9 = (offset[3:0] >= 4'b1000) ? offset - 4'b1000 : offset + 4'b1000;

  assign rom_out_10 = offset;
  assign rom_out_11 = (offset[3:0] >= 4'b1000) ? offset - 4'b1000 : offset + 4'b1000;

  assign rom_out_12 = offset;
  assign rom_out_13 = (offset[3:0] >= 4'b1000) ? offset - 4'b1000 : offset + 4'b1000;

  assign rom_out_14 = offset;
  assign rom_out_15 = (offset[3:0] >= 4'b1000) ? offset - 4'b1000 : offset + 4'b1000;

  assign rom_out_16 = offset;
  assign rom_out_17 = (offset[3:0] >= 4'b1000) ? offset - 4'b1000 : offset + 4'b1000;

  assign rom_out_18 = offset;
  assign rom_out_19 = (offset[3:0] >= 4'b1000) ? offset - 4'b1000 : offset + 4'b1000;

  assign rom_out_20 = offset;
  assign rom_out_21 = (offset[3:0] >= 4'b1000) ? offset - 4'b1000 : offset + 4'b1000;

  assign rom_out_22 = offset;
  assign rom_out_23 = (offset[3:0] >= 4'b1000) ? offset - 4'b1000 : offset + 4'b1000;

  assign rom_out_24 = offset;
  assign rom_out_25 = (offset[3:0] >= 4'b1000) ? offset - 4'b1000 : offset + 4'b1000;

  assign rom_out_26 = offset;
  assign rom_out_27 = (offset[3:0] >= 4'b1000) ? offset - 4'b1000 : offset + 4'b1000;

  assign rom_out_28 = offset;
  assign rom_out_29 = (offset[3:0] >= 4'b1000) ? offset - 4'b1000 : offset + 4'b1000;

  assign rom_out_30 = offset;
  assign rom_out_31 = (offset[3:0] >= 4'b1000) ? offset - 4'b1000 : offset + 4'b1000;

endmodule                        


module s10_mem_stage_dp64_r(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
clk,                             
counter_in,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [4-1:0] counter_in;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output reg [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63;
  output reg out_start; 
  
  wire [DATA_WIDTH-1:0] wire_in [63:0];              
  wire [DATA_WIDTH-1:0] wire_out [63:0];              
  
  wire wen_wire;              
  wire out_start_wire;              
  assign wire_in[0] = inData_0;    
  assign wire_in[1] = inData_1;    
  assign wire_in[2] = inData_2;    
  assign wire_in[3] = inData_3;    
  assign wire_in[4] = inData_4;    
  assign wire_in[5] = inData_5;    
  assign wire_in[6] = inData_6;    
  assign wire_in[7] = inData_7;    
  assign wire_in[8] = inData_8;    
  assign wire_in[9] = inData_9;    
  assign wire_in[10] = inData_10;    
  assign wire_in[11] = inData_11;    
  assign wire_in[12] = inData_12;    
  assign wire_in[13] = inData_13;    
  assign wire_in[14] = inData_14;    
  assign wire_in[15] = inData_15;    
  assign wire_in[16] = inData_16;    
  assign wire_in[17] = inData_17;    
  assign wire_in[18] = inData_18;    
  assign wire_in[19] = inData_19;    
  assign wire_in[20] = inData_20;    
  assign wire_in[21] = inData_21;    
  assign wire_in[22] = inData_22;    
  assign wire_in[23] = inData_23;    
  assign wire_in[24] = inData_24;    
  assign wire_in[25] = inData_25;    
  assign wire_in[26] = inData_26;    
  assign wire_in[27] = inData_27;    
  assign wire_in[28] = inData_28;    
  assign wire_in[29] = inData_29;    
  assign wire_in[30] = inData_30;    
  assign wire_in[31] = inData_31;    
  assign wire_in[32] = inData_32;    
  assign wire_in[33] = inData_33;    
  assign wire_in[34] = inData_34;    
  assign wire_in[35] = inData_35;    
  assign wire_in[36] = inData_36;    
  assign wire_in[37] = inData_37;    
  assign wire_in[38] = inData_38;    
  assign wire_in[39] = inData_39;    
  assign wire_in[40] = inData_40;    
  assign wire_in[41] = inData_41;    
  assign wire_in[42] = inData_42;    
  assign wire_in[43] = inData_43;    
  assign wire_in[44] = inData_44;    
  assign wire_in[45] = inData_45;    
  assign wire_in[46] = inData_46;    
  assign wire_in[47] = inData_47;    
  assign wire_in[48] = inData_48;    
  assign wire_in[49] = inData_49;    
  assign wire_in[50] = inData_50;    
  assign wire_in[51] = inData_51;    
  assign wire_in[52] = inData_52;    
  assign wire_in[53] = inData_53;    
  assign wire_in[54] = inData_54;    
  assign wire_in[55] = inData_55;    
  assign wire_in[56] = inData_56;    
  assign wire_in[57] = inData_57;    
  assign wire_in[58] = inData_58;    
  assign wire_in[59] = inData_59;    
  assign wire_in[60] = inData_60;    
  assign wire_in[61] = inData_61;    
  assign wire_in[62] = inData_62;    
  assign wire_in[63] = inData_63;    
  
  wire [3:0] addr_w_wire_0;        

  wire [3:0] addr_w_wire_1;        

  wire [3:0] addr_w_wire_2;        

  wire [3:0] addr_w_wire_3;        

  wire [3:0] addr_w_wire_4;        

  wire [3:0] addr_w_wire_5;        

  wire [3:0] addr_w_wire_6;        

  wire [3:0] addr_w_wire_7;        

  wire [3:0] addr_w_wire_8;        

  wire [3:0] addr_w_wire_9;        

  wire [3:0] addr_w_wire_10;        

  wire [3:0] addr_w_wire_11;        

  wire [3:0] addr_w_wire_12;        

  wire [3:0] addr_w_wire_13;        

  wire [3:0] addr_w_wire_14;        

  wire [3:0] addr_w_wire_15;        

  wire [3:0] addr_w_wire_16;        

  wire [3:0] addr_w_wire_17;        

  wire [3:0] addr_w_wire_18;        

  wire [3:0] addr_w_wire_19;        

  wire [3:0] addr_w_wire_20;        

  wire [3:0] addr_w_wire_21;        

  wire [3:0] addr_w_wire_22;        

  wire [3:0] addr_w_wire_23;        

  wire [3:0] addr_w_wire_24;        

  wire [3:0] addr_w_wire_25;        

  wire [3:0] addr_w_wire_26;        

  wire [3:0] addr_w_wire_27;        

  wire [3:0] addr_w_wire_28;        

  wire [3:0] addr_w_wire_29;        

  wire [3:0] addr_w_wire_30;        

  wire [3:0] addr_w_wire_31;        

  wire [3:0] addr_w_wire_32;        

  wire [3:0] addr_w_wire_33;        

  wire [3:0] addr_w_wire_34;        

  wire [3:0] addr_w_wire_35;        

  wire [3:0] addr_w_wire_36;        

  wire [3:0] addr_w_wire_37;        

  wire [3:0] addr_w_wire_38;        

  wire [3:0] addr_w_wire_39;        

  wire [3:0] addr_w_wire_40;        

  wire [3:0] addr_w_wire_41;        

  wire [3:0] addr_w_wire_42;        

  wire [3:0] addr_w_wire_43;        

  wire [3:0] addr_w_wire_44;        

  wire [3:0] addr_w_wire_45;        

  wire [3:0] addr_w_wire_46;        

  wire [3:0] addr_w_wire_47;        

  wire [3:0] addr_w_wire_48;        

  wire [3:0] addr_w_wire_49;        

  wire [3:0] addr_w_wire_50;        

  wire [3:0] addr_w_wire_51;        

  wire [3:0] addr_w_wire_52;        

  wire [3:0] addr_w_wire_53;        

  wire [3:0] addr_w_wire_54;        

  wire [3:0] addr_w_wire_55;        

  wire [3:0] addr_w_wire_56;        

  wire [3:0] addr_w_wire_57;        

  wire [3:0] addr_w_wire_58;        

  wire [3:0] addr_w_wire_59;        

  wire [3:0] addr_w_wire_60;        

  wire [3:0] addr_w_wire_61;        

  wire [3:0] addr_w_wire_62;        

  wire [3:0] addr_w_wire_63;        

  wire [3:0] addr_r_wire_0;        

  reg [3:0] read_address;

  always @ (posedge clk) begin
    if (rst | in_start) begin
      // - log(64) - 1
      // - distance
      // -1: read - write turnaround
      read_address <= 4'b1111 - 3'b101 - 4'b1000 - 1'b1;
    end else begin
      read_address <= read_address + 1'b1;
    end
  end

  assign addr_r_wire_0 = read_address;

  s10_addr_rom_ctrl_dp64_per0 addr_gen_inst(.in_start(in_start), .wen_out(wen_wire), .out_start(out_start_wire), .rom_out_0(addr_w_wire_0), .rom_out_1(addr_w_wire_1), .rom_out_2(addr_w_wire_2), .rom_out_3(addr_w_wire_3), .rom_out_4(addr_w_wire_4), .rom_out_5(addr_w_wire_5), .rom_out_6(addr_w_wire_6), .rom_out_7(addr_w_wire_7), .rom_out_8(addr_w_wire_8), .rom_out_9(addr_w_wire_9), .rom_out_10(addr_w_wire_10), .rom_out_11(addr_w_wire_11), .rom_out_12(addr_w_wire_12), .rom_out_13(addr_w_wire_13), .rom_out_14(addr_w_wire_14), .rom_out_15(addr_w_wire_15), .rom_out_16(addr_w_wire_16), .rom_out_17(addr_w_wire_17), .rom_out_18(addr_w_wire_18), .rom_out_19(addr_w_wire_19), .rom_out_20(addr_w_wire_20), .rom_out_21(addr_w_wire_21), .rom_out_22(addr_w_wire_22), .rom_out_23(addr_w_wire_23), .rom_out_24(addr_w_wire_24), .rom_out_25(addr_w_wire_25), .rom_out_26(addr_w_wire_26), .rom_out_27(addr_w_wire_27), .rom_out_28(addr_w_wire_28), .rom_out_29(addr_w_wire_29), .rom_out_30(addr_w_wire_30), .rom_out_31(addr_w_wire_31), .rom_out_32(addr_w_wire_32), .rom_out_33(addr_w_wire_33), .rom_out_34(addr_w_wire_34), .rom_out_35(addr_w_wire_35), .rom_out_36(addr_w_wire_36), .rom_out_37(addr_w_wire_37), .rom_out_38(addr_w_wire_38), .rom_out_39(addr_w_wire_39), .rom_out_40(addr_w_wire_40), .rom_out_41(addr_w_wire_41), .rom_out_42(addr_w_wire_42), .rom_out_43(addr_w_wire_43), .rom_out_44(addr_w_wire_44), .rom_out_45(addr_w_wire_45), .rom_out_46(addr_w_wire_46), .rom_out_47(addr_w_wire_47), .rom_out_48(addr_w_wire_48), .rom_out_49(addr_w_wire_49), .rom_out_50(addr_w_wire_50), .rom_out_51(addr_w_wire_51), .rom_out_52(addr_w_wire_52), .rom_out_53(addr_w_wire_53), .rom_out_54(addr_w_wire_54), .rom_out_55(addr_w_wire_55), .rom_out_56(addr_w_wire_56), .rom_out_57(addr_w_wire_57), .rom_out_58(addr_w_wire_58), .rom_out_59(addr_w_wire_59), .rom_out_60(addr_w_wire_60), .rom_out_61(addr_w_wire_61), .rom_out_62(addr_w_wire_62), .rom_out_63(addr_w_wire_63), .clk(clk), .rst(rst));

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_0(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_0), .din(wire_in[0]), .dout(wire_out[0]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_1(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_1), .din(wire_in[1]), .dout(wire_out[1]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_2(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_2), .din(wire_in[2]), .dout(wire_out[2]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_3(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_3), .din(wire_in[3]), .dout(wire_out[3]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_4(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_4), .din(wire_in[4]), .dout(wire_out[4]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_5(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_5), .din(wire_in[5]), .dout(wire_out[5]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_6(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_6), .din(wire_in[6]), .dout(wire_out[6]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_7(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_7), .din(wire_in[7]), .dout(wire_out[7]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_8(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_8), .din(wire_in[8]), .dout(wire_out[8]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_9(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_9), .din(wire_in[9]), .dout(wire_out[9]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_10(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_10), .din(wire_in[10]), .dout(wire_out[10]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_11(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_11), .din(wire_in[11]), .dout(wire_out[11]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_12(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_12), .din(wire_in[12]), .dout(wire_out[12]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_13(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_13), .din(wire_in[13]), .dout(wire_out[13]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_14(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_14), .din(wire_in[14]), .dout(wire_out[14]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_15(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_15), .din(wire_in[15]), .dout(wire_out[15]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_16(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_16), .din(wire_in[16]), .dout(wire_out[16]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_17(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_17), .din(wire_in[17]), .dout(wire_out[17]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_18(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_18), .din(wire_in[18]), .dout(wire_out[18]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_19(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_19), .din(wire_in[19]), .dout(wire_out[19]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_20(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_20), .din(wire_in[20]), .dout(wire_out[20]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_21(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_21), .din(wire_in[21]), .dout(wire_out[21]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_22(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_22), .din(wire_in[22]), .dout(wire_out[22]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_23(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_23), .din(wire_in[23]), .dout(wire_out[23]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_24(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_24), .din(wire_in[24]), .dout(wire_out[24]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_25(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_25), .din(wire_in[25]), .dout(wire_out[25]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_26(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_26), .din(wire_in[26]), .dout(wire_out[26]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_27(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_27), .din(wire_in[27]), .dout(wire_out[27]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_28(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_28), .din(wire_in[28]), .dout(wire_out[28]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_29(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_29), .din(wire_in[29]), .dout(wire_out[29]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_30(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_30), .din(wire_in[30]), .dout(wire_out[30]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_31(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_31), .din(wire_in[31]), .dout(wire_out[31]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_32(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_32), .din(wire_in[32]), .dout(wire_out[32]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_33(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_33), .din(wire_in[33]), .dout(wire_out[33]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_34(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_34), .din(wire_in[34]), .dout(wire_out[34]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_35(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_35), .din(wire_in[35]), .dout(wire_out[35]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_36(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_36), .din(wire_in[36]), .dout(wire_out[36]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_37(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_37), .din(wire_in[37]), .dout(wire_out[37]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_38(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_38), .din(wire_in[38]), .dout(wire_out[38]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_39(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_39), .din(wire_in[39]), .dout(wire_out[39]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_40(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_40), .din(wire_in[40]), .dout(wire_out[40]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_41(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_41), .din(wire_in[41]), .dout(wire_out[41]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_42(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_42), .din(wire_in[42]), .dout(wire_out[42]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_43(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_43), .din(wire_in[43]), .dout(wire_out[43]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_44(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_44), .din(wire_in[44]), .dout(wire_out[44]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_45(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_45), .din(wire_in[45]), .dout(wire_out[45]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_46(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_46), .din(wire_in[46]), .dout(wire_out[46]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_47(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_47), .din(wire_in[47]), .dout(wire_out[47]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_48(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_48), .din(wire_in[48]), .dout(wire_out[48]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_49(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_49), .din(wire_in[49]), .dout(wire_out[49]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_50(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_50), .din(wire_in[50]), .dout(wire_out[50]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_51(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_51), .din(wire_in[51]), .dout(wire_out[51]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_52(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_52), .din(wire_in[52]), .dout(wire_out[52]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_53(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_53), .din(wire_in[53]), .dout(wire_out[53]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_54(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_54), .din(wire_in[54]), .dout(wire_out[54]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_55(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_55), .din(wire_in[55]), .dout(wire_out[55]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_56(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_56), .din(wire_in[56]), .dout(wire_out[56]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_57(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_57), .din(wire_in[57]), .dout(wire_out[57]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_58(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_58), .din(wire_in[58]), .dout(wire_out[58]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_59(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_59), .din(wire_in[59]), .dout(wire_out[59]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_60(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_60), .din(wire_in[60]), .dout(wire_out[60]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_61(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_61), .din(wire_in[61]), .dout(wire_out[61]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_62(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_62), .din(wire_in[62]), .dout(wire_out[62]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(4)) 
         ram_inst_63(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_63), .din(wire_in[63]), .dout(wire_out[63]), .clk(clk) );

  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      outData_0 <= 0;    
      outData_1 <= 0;    
      outData_2 <= 0;    
      outData_3 <= 0;    
      outData_4 <= 0;    
      outData_5 <= 0;    
      outData_6 <= 0;    
      outData_7 <= 0;    
      outData_8 <= 0;    
      outData_9 <= 0;    
      outData_10 <= 0;    
      outData_11 <= 0;    
      outData_12 <= 0;    
      outData_13 <= 0;    
      outData_14 <= 0;    
      outData_15 <= 0;    
      outData_16 <= 0;    
      outData_17 <= 0;    
      outData_18 <= 0;    
      outData_19 <= 0;    
      outData_20 <= 0;    
      outData_21 <= 0;    
      outData_22 <= 0;    
      outData_23 <= 0;    
      outData_24 <= 0;    
      outData_25 <= 0;    
      outData_26 <= 0;    
      outData_27 <= 0;    
      outData_28 <= 0;    
      outData_29 <= 0;    
      outData_30 <= 0;    
      outData_31 <= 0;    
      outData_32 <= 0;    
      outData_33 <= 0;    
      outData_34 <= 0;    
      outData_35 <= 0;    
      outData_36 <= 0;    
      outData_37 <= 0;    
      outData_38 <= 0;    
      outData_39 <= 0;    
      outData_40 <= 0;    
      outData_41 <= 0;    
      outData_42 <= 0;    
      outData_43 <= 0;    
      outData_44 <= 0;    
      outData_45 <= 0;    
      outData_46 <= 0;    
      outData_47 <= 0;    
      outData_48 <= 0;    
      outData_49 <= 0;    
      outData_50 <= 0;    
      outData_51 <= 0;    
      outData_52 <= 0;    
      outData_53 <= 0;    
      outData_54 <= 0;    
      outData_55 <= 0;    
      outData_56 <= 0;    
      outData_57 <= 0;    
      outData_58 <= 0;    
      outData_59 <= 0;    
      outData_60 <= 0;    
      outData_61 <= 0;    
      outData_62 <= 0;    
      outData_63 <= 0;    
      out_start <= 1'b0;              
      end
    else begin                        
      outData_0 <= wire_out[0];    
      outData_1 <= wire_out[1];    
      outData_2 <= wire_out[2];    
      outData_3 <= wire_out[3];    
      outData_4 <= wire_out[4];    
      outData_5 <= wire_out[5];    
      outData_6 <= wire_out[6];    
      outData_7 <= wire_out[7];    
      outData_8 <= wire_out[8];    
      outData_9 <= wire_out[9];    
      outData_10 <= wire_out[10];    
      outData_11 <= wire_out[11];    
      outData_12 <= wire_out[12];    
      outData_13 <= wire_out[13];    
      outData_14 <= wire_out[14];    
      outData_15 <= wire_out[15];    
      outData_16 <= wire_out[16];    
      outData_17 <= wire_out[17];    
      outData_18 <= wire_out[18];    
      outData_19 <= wire_out[19];    
      outData_20 <= wire_out[20];    
      outData_21 <= wire_out[21];    
      outData_22 <= wire_out[22];    
      outData_23 <= wire_out[23];    
      outData_24 <= wire_out[24];    
      outData_25 <= wire_out[25];    
      outData_26 <= wire_out[26];    
      outData_27 <= wire_out[27];    
      outData_28 <= wire_out[28];    
      outData_29 <= wire_out[29];    
      outData_30 <= wire_out[30];    
      outData_31 <= wire_out[31];    
      outData_32 <= wire_out[32];    
      outData_33 <= wire_out[33];    
      outData_34 <= wire_out[34];    
      outData_35 <= wire_out[35];    
      outData_36 <= wire_out[36];    
      outData_37 <= wire_out[37];    
      outData_38 <= wire_out[38];    
      outData_39 <= wire_out[39];    
      outData_40 <= wire_out[40];    
      outData_41 <= wire_out[41];    
      outData_42 <= wire_out[42];    
      outData_43 <= wire_out[43];    
      outData_44 <= wire_out[44];    
      outData_45 <= wire_out[45];    
      outData_46 <= wire_out[46];    
      outData_47 <= wire_out[47];    
      outData_48 <= wire_out[48];    
      outData_49 <= wire_out[49];    
      outData_50 <= wire_out[50];    
      outData_51 <= wire_out[51];    
      outData_52 <= wire_out[52];    
      outData_53 <= wire_out[53];    
      outData_54 <= wire_out[54];    
      outData_55 <= wire_out[55];    
      outData_56 <= wire_out[56];    
      outData_57 <= wire_out[57];    
      outData_58 <= wire_out[58];    
      outData_59 <= wire_out[59];    
      outData_60 <= wire_out[60];    
      outData_61 <= wire_out[61];    
      outData_62 <= wire_out[62];    
      outData_63 <= wire_out[63];    
      out_start <= out_start_wire;    
      end
  end                              

endmodule                        


module stage_8_permutation(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
inData_32,
inData_33,
inData_34,
inData_35,
inData_36,
inData_37,
inData_38,
inData_39,
inData_40,
inData_41,
inData_42,
inData_43,
inData_44,
inData_45,
inData_46,
inData_47,
inData_48,
inData_49,
inData_50,
inData_51,
inData_52,
inData_53,
inData_54,
inData_55,
inData_56,
inData_57,
inData_58,
inData_59,
inData_60,
inData_61,
inData_62,
inData_63,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
outData_32,
outData_33,
outData_34,
outData_35,
outData_36,
outData_37,
outData_38,
outData_39,
outData_40,
outData_41,
outData_42,
outData_43,
outData_44,
outData_45,
outData_46,
outData_47,
outData_48,
outData_49,
outData_50,
outData_51,
outData_52,
outData_53,
outData_54,
outData_55,
outData_56,
outData_57,
outData_58,
outData_59,
outData_60,
outData_61,
outData_62,
outData_63,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31,
      inData_32,
      inData_33,
      inData_34,
      inData_35,
      inData_36,
      inData_37,
      inData_38,
      inData_39,
      inData_40,
      inData_41,
      inData_42,
      inData_43,
      inData_44,
      inData_45,
      inData_46,
      inData_47,
      inData_48,
      inData_49,
      inData_50,
      inData_51,
      inData_52,
      inData_53,
      inData_54,
      inData_55,
      inData_56,
      inData_57,
      inData_58,
      inData_59,
      inData_60,
      inData_61,
      inData_62,
      inData_63;
  output reg [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31,
      outData_32,
      outData_33,
      outData_34,
      outData_35,
      outData_36,
      outData_37,
      outData_38,
      outData_39,
      outData_40,
      outData_41,
      outData_42,
      outData_43,
      outData_44,
      outData_45,
      outData_46,
      outData_47,
      outData_48,
      outData_49,
      outData_50,
      outData_51,
      outData_52,
      outData_53,
      outData_54,
      outData_55,
      outData_56,
      outData_57,
      outData_58,
      outData_59,
      outData_60,
      outData_61,
      outData_62,
      outData_63; 
  output reg out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [63:0];                  
  wire [DATA_WIDTH-1:0] wireOut [63:0];                 
  wire [DATA_WIDTH-1:0] wireOut_LB [63:0];              
  wire [DATA_WIDTH-1:0] wireIn_RB [63:0];               
  wire out_start_LB;               
  wire out_start_MemStage;               
  wire out_start_RB;               

  wire [3:0] counter_out_w;               
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  assign wireIn[32] = inData_32;    
  assign wireIn[33] = inData_33;    
  assign wireIn[34] = inData_34;    
  assign wireIn[35] = inData_35;    
  assign wireIn[36] = inData_36;    
  assign wireIn[37] = inData_37;    
  assign wireIn[38] = inData_38;    
  assign wireIn[39] = inData_39;    
  assign wireIn[40] = inData_40;    
  assign wireIn[41] = inData_41;    
  assign wireIn[42] = inData_42;    
  assign wireIn[43] = inData_43;    
  assign wireIn[44] = inData_44;    
  assign wireIn[45] = inData_45;    
  assign wireIn[46] = inData_46;    
  assign wireIn[47] = inData_47;    
  assign wireIn[48] = inData_48;    
  assign wireIn[49] = inData_49;    
  assign wireIn[50] = inData_50;    
  assign wireIn[51] = inData_51;    
  assign wireIn[52] = inData_52;    
  assign wireIn[53] = inData_53;    
  assign wireIn[54] = inData_54;    
  assign wireIn[55] = inData_55;    
  assign wireIn[56] = inData_56;    
  assign wireIn[57] = inData_57;    
  assign wireIn[58] = inData_58;    
  assign wireIn[59] = inData_59;    
  assign wireIn[60] = inData_60;    
  assign wireIn[61] = inData_61;    
  assign wireIn[62] = inData_62;    
  assign wireIn[63] = inData_63;    
  
  counter_32 ctrl_unit(.in_start(in_start), .counter_out(counter_out_w), .clk(clk), .rst(rst));

  s10_ingressStage_p64 ingressStage_p64_inst(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .inData_2(wireIn[2]), .inData_3(wireIn[3]), .inData_4(wireIn[4]), .inData_5(wireIn[5]), .inData_6(wireIn[6]), .inData_7(wireIn[7]), .inData_8(wireIn[8]), .inData_9(wireIn[9]), .inData_10(wireIn[10]), .inData_11(wireIn[11]), .inData_12(wireIn[12]), .inData_13(wireIn[13]), .inData_14(wireIn[14]), .inData_15(wireIn[15]), .inData_16(wireIn[16]), .inData_17(wireIn[17]), .inData_18(wireIn[18]), .inData_19(wireIn[19]), .inData_20(wireIn[20]), .inData_21(wireIn[21]), .inData_22(wireIn[22]), .inData_23(wireIn[23]), .inData_24(wireIn[24]), .inData_25(wireIn[25]), .inData_26(wireIn[26]), .inData_27(wireIn[27]), .inData_28(wireIn[28]), .inData_29(wireIn[29]), .inData_30(wireIn[30]), .inData_31(wireIn[31]), .inData_32(wireIn[32]), .inData_33(wireIn[33]), .inData_34(wireIn[34]), .inData_35(wireIn[35]), .inData_36(wireIn[36]), .inData_37(wireIn[37]), .inData_38(wireIn[38]), .inData_39(wireIn[39]), .inData_40(wireIn[40]), .inData_41(wireIn[41]), .inData_42(wireIn[42]), .inData_43(wireIn[43]), .inData_44(wireIn[44]), .inData_45(wireIn[45]), .inData_46(wireIn[46]), .inData_47(wireIn[47]), .inData_48(wireIn[48]), .inData_49(wireIn[49]), .inData_50(wireIn[50]), .inData_51(wireIn[51]), .inData_52(wireIn[52]), .inData_53(wireIn[53]), .inData_54(wireIn[54]), .inData_55(wireIn[55]), .inData_56(wireIn[56]), .inData_57(wireIn[57]), .inData_58(wireIn[58]), .inData_59(wireIn[59]), .inData_60(wireIn[60]), .inData_61(wireIn[61]), .inData_62(wireIn[62]), .inData_63(wireIn[63]), .outData_0(wireOut_LB[0]), .outData_1(wireOut_LB[1]), .outData_2(wireOut_LB[2]), .outData_3(wireOut_LB[3]), .outData_4(wireOut_LB[4]), .outData_5(wireOut_LB[5]), .outData_6(wireOut_LB[6]), .outData_7(wireOut_LB[7]), .outData_8(wireOut_LB[8]), .outData_9(wireOut_LB[9]), .outData_10(wireOut_LB[10]), .outData_11(wireOut_LB[11]), .outData_12(wireOut_LB[12]), .outData_13(wireOut_LB[13]), .outData_14(wireOut_LB[14]), .outData_15(wireOut_LB[15]), .outData_16(wireOut_LB[16]), .outData_17(wireOut_LB[17]), .outData_18(wireOut_LB[18]), .outData_19(wireOut_LB[19]), .outData_20(wireOut_LB[20]), .outData_21(wireOut_LB[21]), .outData_22(wireOut_LB[22]), .outData_23(wireOut_LB[23]), .outData_24(wireOut_LB[24]), .outData_25(wireOut_LB[25]), .outData_26(wireOut_LB[26]), .outData_27(wireOut_LB[27]), .outData_28(wireOut_LB[28]), .outData_29(wireOut_LB[29]), .outData_30(wireOut_LB[30]), .outData_31(wireOut_LB[31]), .outData_32(wireOut_LB[32]), .outData_33(wireOut_LB[33]), .outData_34(wireOut_LB[34]), .outData_35(wireOut_LB[35]), .outData_36(wireOut_LB[36]), .outData_37(wireOut_LB[37]), .outData_38(wireOut_LB[38]), .outData_39(wireOut_LB[39]), .outData_40(wireOut_LB[40]), .outData_41(wireOut_LB[41]), .outData_42(wireOut_LB[42]), .outData_43(wireOut_LB[43]), .outData_44(wireOut_LB[44]), .outData_45(wireOut_LB[45]), .outData_46(wireOut_LB[46]), .outData_47(wireOut_LB[47]), .outData_48(wireOut_LB[48]), .outData_49(wireOut_LB[49]), .outData_50(wireOut_LB[50]), .outData_51(wireOut_LB[51]), .outData_52(wireOut_LB[52]), .outData_53(wireOut_LB[53]), .outData_54(wireOut_LB[54]), .outData_55(wireOut_LB[55]), .outData_56(wireOut_LB[56]), .outData_57(wireOut_LB[57]), .outData_58(wireOut_LB[58]), .outData_59(wireOut_LB[59]), .outData_60(wireOut_LB[60]), .outData_61(wireOut_LB[61]), .outData_62(wireOut_LB[62]), .outData_63(wireOut_LB[63]), .in_start(in_start), .out_start(out_start_LB), .counter_in(counter_out_w), .clk(clk), .rst(rst));
  
  s10_mem_stage_dp64_r mem_stage_dp64_r_inst(.inData_0(wireOut_LB[0]), .inData_1(wireOut_LB[1]), .inData_2(wireOut_LB[2]), .inData_3(wireOut_LB[3]), .inData_4(wireOut_LB[4]), .inData_5(wireOut_LB[5]), .inData_6(wireOut_LB[6]), .inData_7(wireOut_LB[7]), .inData_8(wireOut_LB[8]), .inData_9(wireOut_LB[9]), .inData_10(wireOut_LB[10]), .inData_11(wireOut_LB[11]), .inData_12(wireOut_LB[12]), .inData_13(wireOut_LB[13]), .inData_14(wireOut_LB[14]), .inData_15(wireOut_LB[15]), .inData_16(wireOut_LB[16]), .inData_17(wireOut_LB[17]), .inData_18(wireOut_LB[18]), .inData_19(wireOut_LB[19]), .inData_20(wireOut_LB[20]), .inData_21(wireOut_LB[21]), .inData_22(wireOut_LB[22]), .inData_23(wireOut_LB[23]), .inData_24(wireOut_LB[24]), .inData_25(wireOut_LB[25]), .inData_26(wireOut_LB[26]), .inData_27(wireOut_LB[27]), .inData_28(wireOut_LB[28]), .inData_29(wireOut_LB[29]), .inData_30(wireOut_LB[30]), .inData_31(wireOut_LB[31]), .inData_32(wireOut_LB[32]), .inData_33(wireOut_LB[33]), .inData_34(wireOut_LB[34]), .inData_35(wireOut_LB[35]), .inData_36(wireOut_LB[36]), .inData_37(wireOut_LB[37]), .inData_38(wireOut_LB[38]), .inData_39(wireOut_LB[39]), .inData_40(wireOut_LB[40]), .inData_41(wireOut_LB[41]), .inData_42(wireOut_LB[42]), .inData_43(wireOut_LB[43]), .inData_44(wireOut_LB[44]), .inData_45(wireOut_LB[45]), .inData_46(wireOut_LB[46]), .inData_47(wireOut_LB[47]), .inData_48(wireOut_LB[48]), .inData_49(wireOut_LB[49]), .inData_50(wireOut_LB[50]), .inData_51(wireOut_LB[51]), .inData_52(wireOut_LB[52]), .inData_53(wireOut_LB[53]), .inData_54(wireOut_LB[54]), .inData_55(wireOut_LB[55]), .inData_56(wireOut_LB[56]), .inData_57(wireOut_LB[57]), .inData_58(wireOut_LB[58]), .inData_59(wireOut_LB[59]), .inData_60(wireOut_LB[60]), .inData_61(wireOut_LB[61]), .inData_62(wireOut_LB[62]), .inData_63(wireOut_LB[63]), .outData_0(wireIn_RB[0]), .outData_1(wireIn_RB[1]), .outData_2(wireIn_RB[2]), .outData_3(wireIn_RB[3]), .outData_4(wireIn_RB[4]), .outData_5(wireIn_RB[5]), .outData_6(wireIn_RB[6]), .outData_7(wireIn_RB[7]), .outData_8(wireIn_RB[8]), .outData_9(wireIn_RB[9]), .outData_10(wireIn_RB[10]), .outData_11(wireIn_RB[11]), .outData_12(wireIn_RB[12]), .outData_13(wireIn_RB[13]), .outData_14(wireIn_RB[14]), .outData_15(wireIn_RB[15]), .outData_16(wireIn_RB[16]), .outData_17(wireIn_RB[17]), .outData_18(wireIn_RB[18]), .outData_19(wireIn_RB[19]), .outData_20(wireIn_RB[20]), .outData_21(wireIn_RB[21]), .outData_22(wireIn_RB[22]), .outData_23(wireIn_RB[23]), .outData_24(wireIn_RB[24]), .outData_25(wireIn_RB[25]), .outData_26(wireIn_RB[26]), .outData_27(wireIn_RB[27]), .outData_28(wireIn_RB[28]), .outData_29(wireIn_RB[29]), .outData_30(wireIn_RB[30]), .outData_31(wireIn_RB[31]), .outData_32(wireIn_RB[32]), .outData_33(wireIn_RB[33]), .outData_34(wireIn_RB[34]), .outData_35(wireIn_RB[35]), .outData_36(wireIn_RB[36]), .outData_37(wireIn_RB[37]), .outData_38(wireIn_RB[38]), .outData_39(wireIn_RB[39]), .outData_40(wireIn_RB[40]), .outData_41(wireIn_RB[41]), .outData_42(wireIn_RB[42]), .outData_43(wireIn_RB[43]), .outData_44(wireIn_RB[44]), .outData_45(wireIn_RB[45]), .outData_46(wireIn_RB[46]), .outData_47(wireIn_RB[47]), .outData_48(wireIn_RB[48]), .outData_49(wireIn_RB[49]), .outData_50(wireIn_RB[50]), .outData_51(wireIn_RB[51]), .outData_52(wireIn_RB[52]), .outData_53(wireIn_RB[53]), .outData_54(wireIn_RB[54]), .outData_55(wireIn_RB[55]), .outData_56(wireIn_RB[56]), .outData_57(wireIn_RB[57]), .outData_58(wireIn_RB[58]), .outData_59(wireIn_RB[59]), .outData_60(wireIn_RB[60]), .outData_61(wireIn_RB[61]), .outData_62(wireIn_RB[62]), .outData_63(wireIn_RB[63]), .in_start(out_start_LB), .out_start(out_start_MemStage), .clk(clk), 
 .counter_in(counter_out_w), .rst(rst));
  
  s10_egressStage_p64 egressStage_p64_inst(.inData_0(wireIn_RB[0]), .inData_1(wireIn_RB[1]), .inData_2(wireIn_RB[2]), .inData_3(wireIn_RB[3]), .inData_4(wireIn_RB[4]), .inData_5(wireIn_RB[5]), .inData_6(wireIn_RB[6]), .inData_7(wireIn_RB[7]), .inData_8(wireIn_RB[8]), .inData_9(wireIn_RB[9]), .inData_10(wireIn_RB[10]), .inData_11(wireIn_RB[11]), .inData_12(wireIn_RB[12]), .inData_13(wireIn_RB[13]), .inData_14(wireIn_RB[14]), .inData_15(wireIn_RB[15]), .inData_16(wireIn_RB[16]), .inData_17(wireIn_RB[17]), .inData_18(wireIn_RB[18]), .inData_19(wireIn_RB[19]), .inData_20(wireIn_RB[20]), .inData_21(wireIn_RB[21]), .inData_22(wireIn_RB[22]), .inData_23(wireIn_RB[23]), .inData_24(wireIn_RB[24]), .inData_25(wireIn_RB[25]), .inData_26(wireIn_RB[26]), .inData_27(wireIn_RB[27]), .inData_28(wireIn_RB[28]), .inData_29(wireIn_RB[29]), .inData_30(wireIn_RB[30]), .inData_31(wireIn_RB[31]), .inData_32(wireIn_RB[32]), .inData_33(wireIn_RB[33]), .inData_34(wireIn_RB[34]), .inData_35(wireIn_RB[35]), .inData_36(wireIn_RB[36]), .inData_37(wireIn_RB[37]), .inData_38(wireIn_RB[38]), .inData_39(wireIn_RB[39]), .inData_40(wireIn_RB[40]), .inData_41(wireIn_RB[41]), .inData_42(wireIn_RB[42]), .inData_43(wireIn_RB[43]), .inData_44(wireIn_RB[44]), .inData_45(wireIn_RB[45]), .inData_46(wireIn_RB[46]), .inData_47(wireIn_RB[47]), .inData_48(wireIn_RB[48]), .inData_49(wireIn_RB[49]), .inData_50(wireIn_RB[50]), .inData_51(wireIn_RB[51]), .inData_52(wireIn_RB[52]), .inData_53(wireIn_RB[53]), .inData_54(wireIn_RB[54]), .inData_55(wireIn_RB[55]), .inData_56(wireIn_RB[56]), .inData_57(wireIn_RB[57]), .inData_58(wireIn_RB[58]), .inData_59(wireIn_RB[59]), .inData_60(wireIn_RB[60]), .inData_61(wireIn_RB[61]), .inData_62(wireIn_RB[62]), .inData_63(wireIn_RB[63]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .outData_2(wireOut[2]), .outData_3(wireOut[3]), .outData_4(wireOut[4]), .outData_5(wireOut[5]), .outData_6(wireOut[6]), .outData_7(wireOut[7]), .outData_8(wireOut[8]), .outData_9(wireOut[9]), .outData_10(wireOut[10]), .outData_11(wireOut[11]), .outData_12(wireOut[12]), .outData_13(wireOut[13]), .outData_14(wireOut[14]), .outData_15(wireOut[15]), .outData_16(wireOut[16]), .outData_17(wireOut[17]), .outData_18(wireOut[18]), .outData_19(wireOut[19]), .outData_20(wireOut[20]), .outData_21(wireOut[21]), .outData_22(wireOut[22]), .outData_23(wireOut[23]), .outData_24(wireOut[24]), .outData_25(wireOut[25]), .outData_26(wireOut[26]), .outData_27(wireOut[27]), .outData_28(wireOut[28]), .outData_29(wireOut[29]), .outData_30(wireOut[30]), .outData_31(wireOut[31]), .outData_32(wireOut[32]), .outData_33(wireOut[33]), .outData_34(wireOut[34]), .outData_35(wireOut[35]), .outData_36(wireOut[36]), .outData_37(wireOut[37]), .outData_38(wireOut[38]), .outData_39(wireOut[39]), .outData_40(wireOut[40]), .outData_41(wireOut[41]), .outData_42(wireOut[42]), .outData_43(wireOut[43]), .outData_44(wireOut[44]), .outData_45(wireOut[45]), .outData_46(wireOut[46]), .outData_47(wireOut[47]), .outData_48(wireOut[48]), .outData_49(wireOut[49]), .outData_50(wireOut[50]), .outData_51(wireOut[51]), .outData_52(wireOut[52]), .outData_53(wireOut[53]), .outData_54(wireOut[54]), .outData_55(wireOut[55]), .outData_56(wireOut[56]), .outData_57(wireOut[57]), .outData_58(wireOut[58]), .outData_59(wireOut[59]), .outData_60(wireOut[60]), .outData_61(wireOut[61]), .outData_62(wireOut[62]), .outData_63(wireOut[63]), .in_start(out_start_MemStage), .out_start(out_start_RB), .counter_in(counter_out_w), .clk(clk), .rst(rst));
  
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      outData_0 <= 0;    
      outData_1 <= 0;    
      outData_2 <= 0;    
      outData_3 <= 0;    
      outData_4 <= 0;    
      outData_5 <= 0;    
      outData_6 <= 0;    
      outData_7 <= 0;    
      outData_8 <= 0;    
      outData_9 <= 0;    
      outData_10 <= 0;    
      outData_11 <= 0;    
      outData_12 <= 0;    
      outData_13 <= 0;    
      outData_14 <= 0;    
      outData_15 <= 0;    
      outData_16 <= 0;    
      outData_17 <= 0;    
      outData_18 <= 0;    
      outData_19 <= 0;    
      outData_20 <= 0;    
      outData_21 <= 0;    
      outData_22 <= 0;    
      outData_23 <= 0;    
      outData_24 <= 0;    
      outData_25 <= 0;    
      outData_26 <= 0;    
      outData_27 <= 0;    
      outData_28 <= 0;    
      outData_29 <= 0;    
      outData_30 <= 0;    
      outData_31 <= 0;    
      outData_32 <= 0;    
      outData_33 <= 0;    
      outData_34 <= 0;    
      outData_35 <= 0;    
      outData_36 <= 0;    
      outData_37 <= 0;    
      outData_38 <= 0;    
      outData_39 <= 0;    
      outData_40 <= 0;    
      outData_41 <= 0;    
      outData_42 <= 0;    
      outData_43 <= 0;    
      outData_44 <= 0;    
      outData_45 <= 0;    
      outData_46 <= 0;    
      outData_47 <= 0;    
      outData_48 <= 0;    
      outData_49 <= 0;    
      outData_50 <= 0;    
      outData_51 <= 0;    
      outData_52 <= 0;    
      outData_53 <= 0;    
      outData_54 <= 0;    
      outData_55 <= 0;    
      outData_56 <= 0;    
      outData_57 <= 0;    
      outData_58 <= 0;    
      outData_59 <= 0;    
      outData_60 <= 0;    
      outData_61 <= 0;    
      outData_62 <= 0;    
      outData_63 <= 0;    
      out_start <= 1'b0;    
      end
    else begin                        
      outData_0 <= wireOut[0];    
      outData_1 <= wireOut[1];    
      outData_2 <= wireOut[2];    
      outData_3 <= wireOut[3];    
      outData_4 <= wireOut[4];    
      outData_5 <= wireOut[5];    
      outData_6 <= wireOut[6];    
      outData_7 <= wireOut[7];    
      outData_8 <= wireOut[8];    
      outData_9 <= wireOut[9];    
      outData_10 <= wireOut[10];    
      outData_11 <= wireOut[11];    
      outData_12 <= wireOut[12];    
      outData_13 <= wireOut[13];    
      outData_14 <= wireOut[14];    
      outData_15 <= wireOut[15];    
      outData_16 <= wireOut[16];    
      outData_17 <= wireOut[17];    
      outData_18 <= wireOut[18];    
      outData_19 <= wireOut[19];    
      outData_20 <= wireOut[20];    
      outData_21 <= wireOut[21];    
      outData_22 <= wireOut[22];    
      outData_23 <= wireOut[23];    
      outData_24 <= wireOut[24];    
      outData_25 <= wireOut[25];    
      outData_26 <= wireOut[26];    
      outData_27 <= wireOut[27];    
      outData_28 <= wireOut[28];    
      outData_29 <= wireOut[29];    
      outData_30 <= wireOut[30];    
      outData_31 <= wireOut[31];    
      outData_32 <= wireOut[32];    
      outData_33 <= wireOut[33];    
      outData_34 <= wireOut[34];    
      outData_35 <= wireOut[35];    
      outData_36 <= wireOut[36];    
      outData_37 <= wireOut[37];    
      outData_38 <= wireOut[38];    
      outData_39 <= wireOut[39];    
      outData_40 <= wireOut[40];    
      outData_41 <= wireOut[41];    
      outData_42 <= wireOut[42];    
      outData_43 <= wireOut[43];    
      outData_44 <= wireOut[44];    
      outData_45 <= wireOut[45];    
      outData_46 <= wireOut[46];    
      outData_47 <= wireOut[47];    
      outData_48 <= wireOut[48];    
      outData_49 <= wireOut[49];    
      outData_50 <= wireOut[50];    
      outData_51 <= wireOut[51];    
      outData_52 <= wireOut[52];    
      outData_53 <= wireOut[53];    
      outData_54 <= wireOut[54];    
      outData_55 <= wireOut[55];    
      outData_56 <= wireOut[56];    
      outData_57 <= wireOut[57];    
      outData_58 <= wireOut[58];    
      outData_59 <= wireOut[59];    
      outData_60 <= wireOut[60];    
      outData_61 <= wireOut[61];    
      outData_62 <= wireOut[62];    
      outData_63 <= wireOut[63];    
      out_start <= out_start_RB;    
      end
  end                              

endmodule                        

