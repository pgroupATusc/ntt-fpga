
/* This source file contains a Verilog description of an IP core     
 * automatically generated by the RPN HDL Generator.                                        
 *                                                                                          
 * This product includes a hardware design developed by University of Southern California.  
 *                                                                                          
 * Copyright (c) 2012-2016 by Ren Chen for the RPN Project,                                 
 * University of Southern California.                                                       
 *                                                                                          
 * This design is provided for internal, non-commercial research use only                   
 * and is not for redistribution, with or without modifications.                            
 *                                                                                          
 * You may not use the name "University of Southern California" or derivations            
 * thereof to endorse or promote products derived from this software.                       
 *                                                                                          
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER              
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY                 
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY                
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,                 
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY                
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,                
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN                  
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,                
 * CONTRACT, TORT OR OTHERWISE).                                                            
 *                                                                                          
 *                                                                                          
*/                                                                                         
 
module s4_switches_stage_st0_0_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [16-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = in_start;    
  
endmodule                        


module s4_ctrl_rom_dp32_st0_per0L(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [4:0] addr;                        
  output reg [15:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 16'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          5'b00000: data <= 16'b0000000000000000; 
          5'b00001: data <= 16'b1111111111111111; 
          5'b00010: data <= 16'b0000000000000000; 
          5'b00011: data <= 16'b1111111111111111; 
          5'b00100: data <= 16'b0000000000000000; 
          5'b00101: data <= 16'b1111111111111111; 
          5'b00110: data <= 16'b0000000000000000; 
          5'b00111: data <= 16'b1111111111111111; 
          5'b01000: data <= 16'b0000000000000000; 
          5'b01001: data <= 16'b1111111111111111; 
          5'b01010: data <= 16'b0000000000000000; 
          5'b01011: data <= 16'b1111111111111111; 
          5'b01100: data <= 16'b0000000000000000; 
          5'b01101: data <= 16'b1111111111111111; 
          5'b01110: data <= 16'b0000000000000000; 
          5'b01111: data <= 16'b1111111111111111; 
          5'b10000: data <= 16'b0000000000000000; 
          5'b10001: data <= 16'b1111111111111111; 
          5'b10010: data <= 16'b0000000000000000; 
          5'b10011: data <= 16'b1111111111111111; 
          5'b10100: data <= 16'b0000000000000000; 
          5'b10101: data <= 16'b1111111111111111; 
          5'b10110: data <= 16'b0000000000000000; 
          5'b10111: data <= 16'b1111111111111111; 
          5'b11000: data <= 16'b0000000000000000; 
          5'b11001: data <= 16'b1111111111111111; 
          5'b11010: data <= 16'b0000000000000000; 
          5'b11011: data <= 16'b1111111111111111; 
          5'b11100: data <= 16'b0000000000000000; 
          5'b11101: data <= 16'b1111111111111111; 
          5'b11110: data <= 16'b0000000000000000; 
          5'b11111: data <= 16'b1111111111111111; 
          default: data <= 16'b0; 
        endcase
    end
  end                              

endmodule                        


module s4_switch_ctrl_dp32_st0_per0L(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [15:0] ctrl_out;        
  
  reg [4:0] addr;        
  reg state;        
  
  s4_ctrl_rom_dp32_st0_per0L s4_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 5'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 5'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {5{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s4_wireCon_dp32_st0_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[2];    
  assign wireOut[2] = wireIn[4];    
  assign wireOut[3] = wireIn[6];    
  assign wireOut[4] = wireIn[8];    
  assign wireOut[5] = wireIn[10];    
  assign wireOut[6] = wireIn[12];    
  assign wireOut[7] = wireIn[14];    
  assign wireOut[8] = wireIn[16];    
  assign wireOut[9] = wireIn[18];    
  assign wireOut[10] = wireIn[20];    
  assign wireOut[11] = wireIn[22];    
  assign wireOut[12] = wireIn[24];    
  assign wireOut[13] = wireIn[26];    
  assign wireOut[14] = wireIn[28];    
  assign wireOut[15] = wireIn[30];    
  assign wireOut[16] = wireIn[1];    
  assign wireOut[17] = wireIn[3];    
  assign wireOut[18] = wireIn[5];    
  assign wireOut[19] = wireIn[7];    
  assign wireOut[20] = wireIn[9];    
  assign wireOut[21] = wireIn[11];    
  assign wireOut[22] = wireIn[13];    
  assign wireOut[23] = wireIn[15];    
  assign wireOut[24] = wireIn[17];    
  assign wireOut[25] = wireIn[19];    
  assign wireOut[26] = wireIn[21];    
  assign wireOut[27] = wireIn[23];    
  assign wireOut[28] = wireIn[25];    
  assign wireOut[29] = wireIn[27];    
  assign wireOut[30] = wireIn[29];    
  assign wireOut[31] = wireIn[31];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = in_start;    
  
endmodule                        


module s4_switches_stage_st1_0_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [16-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = in_start;    
  
endmodule                        


module s4_ctrl_rom_dp32_st1_per0L(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [4:0] addr;                        
  output reg [15:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 16'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          5'b00000: data <= 16'b0000000000000000; 
          5'b00001: data <= 16'b0000000000000000; 
          5'b00010: data <= 16'b1111111111111111; 
          5'b00011: data <= 16'b1111111111111111; 
          5'b00100: data <= 16'b0000000000000000; 
          5'b00101: data <= 16'b0000000000000000; 
          5'b00110: data <= 16'b1111111111111111; 
          5'b00111: data <= 16'b1111111111111111; 
          5'b01000: data <= 16'b0000000000000000; 
          5'b01001: data <= 16'b0000000000000000; 
          5'b01010: data <= 16'b1111111111111111; 
          5'b01011: data <= 16'b1111111111111111; 
          5'b01100: data <= 16'b0000000000000000; 
          5'b01101: data <= 16'b0000000000000000; 
          5'b01110: data <= 16'b1111111111111111; 
          5'b01111: data <= 16'b1111111111111111; 
          5'b10000: data <= 16'b0000000000000000; 
          5'b10001: data <= 16'b0000000000000000; 
          5'b10010: data <= 16'b1111111111111111; 
          5'b10011: data <= 16'b1111111111111111; 
          5'b10100: data <= 16'b0000000000000000; 
          5'b10101: data <= 16'b0000000000000000; 
          5'b10110: data <= 16'b1111111111111111; 
          5'b10111: data <= 16'b1111111111111111; 
          5'b11000: data <= 16'b0000000000000000; 
          5'b11001: data <= 16'b0000000000000000; 
          5'b11010: data <= 16'b1111111111111111; 
          5'b11011: data <= 16'b1111111111111111; 
          5'b11100: data <= 16'b0000000000000000; 
          5'b11101: data <= 16'b0000000000000000; 
          5'b11110: data <= 16'b1111111111111111; 
          5'b11111: data <= 16'b1111111111111111; 
          default: data <= 16'b0; 
        endcase
    end
  end                              

endmodule                        


module s4_switch_ctrl_dp32_st1_per0L(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [15:0] ctrl_out;        
  
  reg [4:0] addr;        
  reg state;        
  
  s4_ctrl_rom_dp32_st1_per0L s4_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 5'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 5'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {5{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s4_wireCon_dp32_st1_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[2];    
  assign wireOut[2] = wireIn[4];    
  assign wireOut[3] = wireIn[6];    
  assign wireOut[4] = wireIn[8];    
  assign wireOut[5] = wireIn[10];    
  assign wireOut[6] = wireIn[12];    
  assign wireOut[7] = wireIn[14];    
  assign wireOut[8] = wireIn[1];    
  assign wireOut[9] = wireIn[3];    
  assign wireOut[10] = wireIn[5];    
  assign wireOut[11] = wireIn[7];    
  assign wireOut[12] = wireIn[9];    
  assign wireOut[13] = wireIn[11];    
  assign wireOut[14] = wireIn[13];    
  assign wireOut[15] = wireIn[15];    
  assign wireOut[16] = wireIn[16];    
  assign wireOut[17] = wireIn[18];    
  assign wireOut[18] = wireIn[20];    
  assign wireOut[19] = wireIn[22];    
  assign wireOut[20] = wireIn[24];    
  assign wireOut[21] = wireIn[26];    
  assign wireOut[22] = wireIn[28];    
  assign wireOut[23] = wireIn[30];    
  assign wireOut[24] = wireIn[17];    
  assign wireOut[25] = wireIn[19];    
  assign wireOut[26] = wireIn[21];    
  assign wireOut[27] = wireIn[23];    
  assign wireOut[28] = wireIn[25];    
  assign wireOut[29] = wireIn[27];    
  assign wireOut[30] = wireIn[29];    
  assign wireOut[31] = wireIn[31];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = in_start;    
  
endmodule                        


module s4_switches_stage_st2_0_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [16-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = in_start;    
  
endmodule                        


module s4_ctrl_rom_dp32_st2_per0L(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [4:0] addr;                        
  output reg [15:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 16'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          5'b00000: data <= 16'b0000000000000000; 
          5'b00001: data <= 16'b0000000000000000; 
          5'b00010: data <= 16'b0000000000000000; 
          5'b00011: data <= 16'b0000000000000000; 
          5'b00100: data <= 16'b1111111111111111; 
          5'b00101: data <= 16'b1111111111111111; 
          5'b00110: data <= 16'b1111111111111111; 
          5'b00111: data <= 16'b1111111111111111; 
          5'b01000: data <= 16'b0000000000000000; 
          5'b01001: data <= 16'b0000000000000000; 
          5'b01010: data <= 16'b0000000000000000; 
          5'b01011: data <= 16'b0000000000000000; 
          5'b01100: data <= 16'b1111111111111111; 
          5'b01101: data <= 16'b1111111111111111; 
          5'b01110: data <= 16'b1111111111111111; 
          5'b01111: data <= 16'b1111111111111111; 
          5'b10000: data <= 16'b0000000000000000; 
          5'b10001: data <= 16'b0000000000000000; 
          5'b10010: data <= 16'b0000000000000000; 
          5'b10011: data <= 16'b0000000000000000; 
          5'b10100: data <= 16'b1111111111111111; 
          5'b10101: data <= 16'b1111111111111111; 
          5'b10110: data <= 16'b1111111111111111; 
          5'b10111: data <= 16'b1111111111111111; 
          5'b11000: data <= 16'b0000000000000000; 
          5'b11001: data <= 16'b0000000000000000; 
          5'b11010: data <= 16'b0000000000000000; 
          5'b11011: data <= 16'b0000000000000000; 
          5'b11100: data <= 16'b1111111111111111; 
          5'b11101: data <= 16'b1111111111111111; 
          5'b11110: data <= 16'b1111111111111111; 
          5'b11111: data <= 16'b1111111111111111; 
          default: data <= 16'b0; 
        endcase
    end
  end                              

endmodule                        


module s4_switch_ctrl_dp32_st2_per0L(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [15:0] ctrl_out;        
  
  reg [4:0] addr;        
  reg state;        
  
  s4_ctrl_rom_dp32_st2_per0L s4_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 5'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 5'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {5{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s4_wireCon_dp32_st2_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[2];    
  assign wireOut[2] = wireIn[4];    
  assign wireOut[3] = wireIn[6];    
  assign wireOut[4] = wireIn[1];    
  assign wireOut[5] = wireIn[3];    
  assign wireOut[6] = wireIn[5];    
  assign wireOut[7] = wireIn[7];    
  assign wireOut[8] = wireIn[8];    
  assign wireOut[9] = wireIn[10];    
  assign wireOut[10] = wireIn[12];    
  assign wireOut[11] = wireIn[14];    
  assign wireOut[12] = wireIn[9];    
  assign wireOut[13] = wireIn[11];    
  assign wireOut[14] = wireIn[13];    
  assign wireOut[15] = wireIn[15];    
  assign wireOut[16] = wireIn[16];    
  assign wireOut[17] = wireIn[18];    
  assign wireOut[18] = wireIn[20];    
  assign wireOut[19] = wireIn[22];    
  assign wireOut[20] = wireIn[17];    
  assign wireOut[21] = wireIn[19];    
  assign wireOut[22] = wireIn[21];    
  assign wireOut[23] = wireIn[23];    
  assign wireOut[24] = wireIn[24];    
  assign wireOut[25] = wireIn[26];    
  assign wireOut[26] = wireIn[28];    
  assign wireOut[27] = wireIn[30];    
  assign wireOut[28] = wireIn[25];    
  assign wireOut[29] = wireIn[27];    
  assign wireOut[30] = wireIn[29];    
  assign wireOut[31] = wireIn[31];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = in_start;    
  
endmodule                        


module s4_switches_stage_st3_0_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [16-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = in_start;    
  
endmodule                        


module s4_ctrl_rom_dp32_st3_per0L(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [4:0] addr;                        
  output reg [15:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 16'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          5'b00000: data <= 16'b0000000000000000; 
          5'b00001: data <= 16'b0000000000000000; 
          5'b00010: data <= 16'b0000000000000000; 
          5'b00011: data <= 16'b0000000000000000; 
          5'b00100: data <= 16'b0000000000000000; 
          5'b00101: data <= 16'b0000000000000000; 
          5'b00110: data <= 16'b0000000000000000; 
          5'b00111: data <= 16'b0000000000000000; 
          5'b01000: data <= 16'b1111111111111111; 
          5'b01001: data <= 16'b1111111111111111; 
          5'b01010: data <= 16'b1111111111111111; 
          5'b01011: data <= 16'b1111111111111111; 
          5'b01100: data <= 16'b1111111111111111; 
          5'b01101: data <= 16'b1111111111111111; 
          5'b01110: data <= 16'b1111111111111111; 
          5'b01111: data <= 16'b1111111111111111; 
          5'b10000: data <= 16'b0000000000000000; 
          5'b10001: data <= 16'b0000000000000000; 
          5'b10010: data <= 16'b0000000000000000; 
          5'b10011: data <= 16'b0000000000000000; 
          5'b10100: data <= 16'b0000000000000000; 
          5'b10101: data <= 16'b0000000000000000; 
          5'b10110: data <= 16'b0000000000000000; 
          5'b10111: data <= 16'b0000000000000000; 
          5'b11000: data <= 16'b1111111111111111; 
          5'b11001: data <= 16'b1111111111111111; 
          5'b11010: data <= 16'b1111111111111111; 
          5'b11011: data <= 16'b1111111111111111; 
          5'b11100: data <= 16'b1111111111111111; 
          5'b11101: data <= 16'b1111111111111111; 
          5'b11110: data <= 16'b1111111111111111; 
          5'b11111: data <= 16'b1111111111111111; 
          default: data <= 16'b0; 
        endcase
    end
  end                              

endmodule                        


module s4_switch_ctrl_dp32_st3_per0L(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [15:0] ctrl_out;        
  
  reg [4:0] addr;        
  reg state;        
  
  s4_ctrl_rom_dp32_st3_per0L s4_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 5'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 5'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {5{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s4_wireCon_dp32_st3_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[2];    
  assign wireOut[2] = wireIn[1];    
  assign wireOut[3] = wireIn[3];    
  assign wireOut[4] = wireIn[4];    
  assign wireOut[5] = wireIn[6];    
  assign wireOut[6] = wireIn[5];    
  assign wireOut[7] = wireIn[7];    
  assign wireOut[8] = wireIn[8];    
  assign wireOut[9] = wireIn[10];    
  assign wireOut[10] = wireIn[9];    
  assign wireOut[11] = wireIn[11];    
  assign wireOut[12] = wireIn[12];    
  assign wireOut[13] = wireIn[14];    
  assign wireOut[14] = wireIn[13];    
  assign wireOut[15] = wireIn[15];    
  assign wireOut[16] = wireIn[16];    
  assign wireOut[17] = wireIn[18];    
  assign wireOut[18] = wireIn[17];    
  assign wireOut[19] = wireIn[19];    
  assign wireOut[20] = wireIn[20];    
  assign wireOut[21] = wireIn[22];    
  assign wireOut[22] = wireIn[21];    
  assign wireOut[23] = wireIn[23];    
  assign wireOut[24] = wireIn[24];    
  assign wireOut[25] = wireIn[26];    
  assign wireOut[26] = wireIn[25];    
  assign wireOut[27] = wireIn[27];    
  assign wireOut[28] = wireIn[28];    
  assign wireOut[29] = wireIn[30];    
  assign wireOut[30] = wireIn[29];    
  assign wireOut[31] = wireIn[31];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = in_start;    
  
endmodule                        


module s4_switches_stage_st4_0_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [16-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = in_start;    
  
endmodule                        


module s4_ctrl_rom_dp32_st4_per0L(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [4:0] addr;                        
  output reg [15:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 16'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          5'b00000: data <= 16'b0000000000000000; 
          5'b00001: data <= 16'b0000000000000000; 
          5'b00010: data <= 16'b0000000000000000; 
          5'b00011: data <= 16'b0000000000000000; 
          5'b00100: data <= 16'b0000000000000000; 
          5'b00101: data <= 16'b0000000000000000; 
          5'b00110: data <= 16'b0000000000000000; 
          5'b00111: data <= 16'b0000000000000000; 
          5'b01000: data <= 16'b0000000000000000; 
          5'b01001: data <= 16'b0000000000000000; 
          5'b01010: data <= 16'b0000000000000000; 
          5'b01011: data <= 16'b0000000000000000; 
          5'b01100: data <= 16'b0000000000000000; 
          5'b01101: data <= 16'b0000000000000000; 
          5'b01110: data <= 16'b0000000000000000; 
          5'b01111: data <= 16'b0000000000000000; 
          5'b10000: data <= 16'b1111111111111111; 
          5'b10001: data <= 16'b1111111111111111; 
          5'b10010: data <= 16'b1111111111111111; 
          5'b10011: data <= 16'b1111111111111111; 
          5'b10100: data <= 16'b1111111111111111; 
          5'b10101: data <= 16'b1111111111111111; 
          5'b10110: data <= 16'b1111111111111111; 
          5'b10111: data <= 16'b1111111111111111; 
          5'b11000: data <= 16'b1111111111111111; 
          5'b11001: data <= 16'b1111111111111111; 
          5'b11010: data <= 16'b1111111111111111; 
          5'b11011: data <= 16'b1111111111111111; 
          5'b11100: data <= 16'b1111111111111111; 
          5'b11101: data <= 16'b1111111111111111; 
          5'b11110: data <= 16'b1111111111111111; 
          5'b11111: data <= 16'b1111111111111111; 
          default: data <= 16'b0; 
        endcase
    end
  end                              

endmodule                        


module s4_switch_ctrl_dp32_st4_per0L(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [15:0] ctrl_out;        
  
  reg [4:0] addr;        
  reg state;        
  
  s4_ctrl_rom_dp32_st4_per0L s4_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 5'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 5'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {5{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s4_wireCon_dp32_st4_L(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[1];    
  assign wireOut[2] = wireIn[2];    
  assign wireOut[3] = wireIn[3];    
  assign wireOut[4] = wireIn[4];    
  assign wireOut[5] = wireIn[5];    
  assign wireOut[6] = wireIn[6];    
  assign wireOut[7] = wireIn[7];    
  assign wireOut[8] = wireIn[8];    
  assign wireOut[9] = wireIn[9];    
  assign wireOut[10] = wireIn[10];    
  assign wireOut[11] = wireIn[11];    
  assign wireOut[12] = wireIn[12];    
  assign wireOut[13] = wireIn[13];    
  assign wireOut[14] = wireIn[14];    
  assign wireOut[15] = wireIn[15];    
  assign wireOut[16] = wireIn[16];    
  assign wireOut[17] = wireIn[17];    
  assign wireOut[18] = wireIn[18];    
  assign wireOut[19] = wireIn[19];    
  assign wireOut[20] = wireIn[20];    
  assign wireOut[21] = wireIn[21];    
  assign wireOut[22] = wireIn[22];    
  assign wireOut[23] = wireIn[23];    
  assign wireOut[24] = wireIn[24];    
  assign wireOut[25] = wireIn[25];    
  assign wireOut[26] = wireIn[26];    
  assign wireOut[27] = wireIn[27];    
  assign wireOut[28] = wireIn[28];    
  assign wireOut[29] = wireIn[29];    
  assign wireOut[30] = wireIn[30];    
  assign wireOut[31] = wireIn[31];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = in_start;    
  
endmodule                        


module s4_ingressStage_p32(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
counter_in,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  input [4:0] counter_in; 
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31;
  output out_start; 
  
  
  wire out_start_w; 
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  wire in_start_stage0;
  wire con_in_start_stage0;

  wire in_start_stage1;
  wire con_in_start_stage1;

  wire in_start_stage2;
  wire con_in_start_stage2;

  wire in_start_stage3;
  wire con_in_start_stage3;

  wire in_start_stage4;
  wire con_in_start_stage4;

  wire [DATA_WIDTH-1:0] wire_con_in_stage0[31:0];
  wire [DATA_WIDTH-1:0] wire_con_out_stage0[31:0];
  wire [15:0] wire_ctrl_stage0;

  s4_switches_stage_st0_0_L switch_stage_0(
        .inData_0(wireIn[0]), .inData_1(wireIn[1]), .inData_2(wireIn[2]), .inData_3(wireIn[3]), .inData_4(wireIn[4]), .inData_5(wireIn[5]), .inData_6(wireIn[6]), .inData_7(wireIn[7]), .inData_8(wireIn[8]), .inData_9(wireIn[9]), .inData_10(wireIn[10]), .inData_11(wireIn[11]), .inData_12(wireIn[12]), .inData_13(wireIn[13]), .inData_14(wireIn[14]), .inData_15(wireIn[15]), .inData_16(wireIn[16]), .inData_17(wireIn[17]), .inData_18(wireIn[18]), .inData_19(wireIn[19]), .inData_20(wireIn[20]), .inData_21(wireIn[21]), .inData_22(wireIn[22]), .inData_23(wireIn[23]), .inData_24(wireIn[24]), .inData_25(wireIn[25]), .inData_26(wireIn[26]), .inData_27(wireIn[27]), .inData_28(wireIn[28]), .inData_29(wireIn[29]), .inData_30(wireIn[30]), .inData_31(wireIn[31]), 
        .outData_0(wire_con_in_stage0[0]), .outData_1(wire_con_in_stage0[1]), .outData_2(wire_con_in_stage0[2]), .outData_3(wire_con_in_stage0[3]), .outData_4(wire_con_in_stage0[4]), .outData_5(wire_con_in_stage0[5]), .outData_6(wire_con_in_stage0[6]), .outData_7(wire_con_in_stage0[7]), .outData_8(wire_con_in_stage0[8]), .outData_9(wire_con_in_stage0[9]), .outData_10(wire_con_in_stage0[10]), .outData_11(wire_con_in_stage0[11]), .outData_12(wire_con_in_stage0[12]), .outData_13(wire_con_in_stage0[13]), .outData_14(wire_con_in_stage0[14]), .outData_15(wire_con_in_stage0[15]), .outData_16(wire_con_in_stage0[16]), .outData_17(wire_con_in_stage0[17]), .outData_18(wire_con_in_stage0[18]), .outData_19(wire_con_in_stage0[19]), .outData_20(wire_con_in_stage0[20]), .outData_21(wire_con_in_stage0[21]), .outData_22(wire_con_in_stage0[22]), .outData_23(wire_con_in_stage0[23]), .outData_24(wire_con_in_stage0[24]), .outData_25(wire_con_in_stage0[25]), .outData_26(wire_con_in_stage0[26]), .outData_27(wire_con_in_stage0[27]), .outData_28(wire_con_in_stage0[28]), .outData_29(wire_con_in_stage0[29]), .outData_30(wire_con_in_stage0[30]), .outData_31(wire_con_in_stage0[31]), 
        .in_start(in_start_stage0), .out_start(con_in_start_stage0), .ctrl(wire_ctrl_stage0), .clk(clk), .rst(rst));
  
  s4_wireCon_dp32_st0_L wire_stage_0(
        .inData_0(wire_con_in_stage0[0]), .inData_1(wire_con_in_stage0[1]), .inData_2(wire_con_in_stage0[2]), .inData_3(wire_con_in_stage0[3]), .inData_4(wire_con_in_stage0[4]), .inData_5(wire_con_in_stage0[5]), .inData_6(wire_con_in_stage0[6]), .inData_7(wire_con_in_stage0[7]), .inData_8(wire_con_in_stage0[8]), .inData_9(wire_con_in_stage0[9]), .inData_10(wire_con_in_stage0[10]), .inData_11(wire_con_in_stage0[11]), .inData_12(wire_con_in_stage0[12]), .inData_13(wire_con_in_stage0[13]), .inData_14(wire_con_in_stage0[14]), .inData_15(wire_con_in_stage0[15]), .inData_16(wire_con_in_stage0[16]), .inData_17(wire_con_in_stage0[17]), .inData_18(wire_con_in_stage0[18]), .inData_19(wire_con_in_stage0[19]), .inData_20(wire_con_in_stage0[20]), .inData_21(wire_con_in_stage0[21]), .inData_22(wire_con_in_stage0[22]), .inData_23(wire_con_in_stage0[23]), .inData_24(wire_con_in_stage0[24]), .inData_25(wire_con_in_stage0[25]), .inData_26(wire_con_in_stage0[26]), .inData_27(wire_con_in_stage0[27]), .inData_28(wire_con_in_stage0[28]), .inData_29(wire_con_in_stage0[29]), .inData_30(wire_con_in_stage0[30]), .inData_31(wire_con_in_stage0[31]), 
        .outData_0(wire_con_out_stage0[0]), .outData_1(wire_con_out_stage0[1]), .outData_2(wire_con_out_stage0[2]), .outData_3(wire_con_out_stage0[3]), .outData_4(wire_con_out_stage0[4]), .outData_5(wire_con_out_stage0[5]), .outData_6(wire_con_out_stage0[6]), .outData_7(wire_con_out_stage0[7]), .outData_8(wire_con_out_stage0[8]), .outData_9(wire_con_out_stage0[9]), .outData_10(wire_con_out_stage0[10]), .outData_11(wire_con_out_stage0[11]), .outData_12(wire_con_out_stage0[12]), .outData_13(wire_con_out_stage0[13]), .outData_14(wire_con_out_stage0[14]), .outData_15(wire_con_out_stage0[15]), .outData_16(wire_con_out_stage0[16]), .outData_17(wire_con_out_stage0[17]), .outData_18(wire_con_out_stage0[18]), .outData_19(wire_con_out_stage0[19]), .outData_20(wire_con_out_stage0[20]), .outData_21(wire_con_out_stage0[21]), .outData_22(wire_con_out_stage0[22]), .outData_23(wire_con_out_stage0[23]), .outData_24(wire_con_out_stage0[24]), .outData_25(wire_con_out_stage0[25]), .outData_26(wire_con_out_stage0[26]), .outData_27(wire_con_out_stage0[27]), .outData_28(wire_con_out_stage0[28]), .outData_29(wire_con_out_stage0[29]), .outData_30(wire_con_out_stage0[30]), .outData_31(wire_con_out_stage0[31]), 
        .in_start(con_in_start_stage0), .out_start(in_start_stage1), .clk(clk), .rst(rst)); 

  
  s4_switch_ctrl_dp32_st0_per0L s4_switch_ctrl_stage_0(.in_start(in_start_stage0),.ctrl_out(wire_ctrl_stage0),.clk(clk), .rst(rst));

  wire [DATA_WIDTH-1:0] wire_con_in_stage1[31:0];
  wire [DATA_WIDTH-1:0] wire_con_out_stage1[31:0];
  wire [15:0] wire_ctrl_stage1;

  s4_switches_stage_st1_0_L switch_stage_1(
        .inData_0(wire_con_out_stage0[0]), .inData_1(wire_con_out_stage0[1]), .inData_2(wire_con_out_stage0[2]), .inData_3(wire_con_out_stage0[3]), .inData_4(wire_con_out_stage0[4]), .inData_5(wire_con_out_stage0[5]), .inData_6(wire_con_out_stage0[6]), .inData_7(wire_con_out_stage0[7]), .inData_8(wire_con_out_stage0[8]), .inData_9(wire_con_out_stage0[9]), .inData_10(wire_con_out_stage0[10]), .inData_11(wire_con_out_stage0[11]), .inData_12(wire_con_out_stage0[12]), .inData_13(wire_con_out_stage0[13]), .inData_14(wire_con_out_stage0[14]), .inData_15(wire_con_out_stage0[15]), .inData_16(wire_con_out_stage0[16]), .inData_17(wire_con_out_stage0[17]), .inData_18(wire_con_out_stage0[18]), .inData_19(wire_con_out_stage0[19]), .inData_20(wire_con_out_stage0[20]), .inData_21(wire_con_out_stage0[21]), .inData_22(wire_con_out_stage0[22]), .inData_23(wire_con_out_stage0[23]), .inData_24(wire_con_out_stage0[24]), .inData_25(wire_con_out_stage0[25]), .inData_26(wire_con_out_stage0[26]), .inData_27(wire_con_out_stage0[27]), .inData_28(wire_con_out_stage0[28]), .inData_29(wire_con_out_stage0[29]), .inData_30(wire_con_out_stage0[30]), .inData_31(wire_con_out_stage0[31]), 
        .outData_0(wire_con_in_stage1[0]), .outData_1(wire_con_in_stage1[1]), .outData_2(wire_con_in_stage1[2]), .outData_3(wire_con_in_stage1[3]), .outData_4(wire_con_in_stage1[4]), .outData_5(wire_con_in_stage1[5]), .outData_6(wire_con_in_stage1[6]), .outData_7(wire_con_in_stage1[7]), .outData_8(wire_con_in_stage1[8]), .outData_9(wire_con_in_stage1[9]), .outData_10(wire_con_in_stage1[10]), .outData_11(wire_con_in_stage1[11]), .outData_12(wire_con_in_stage1[12]), .outData_13(wire_con_in_stage1[13]), .outData_14(wire_con_in_stage1[14]), .outData_15(wire_con_in_stage1[15]), .outData_16(wire_con_in_stage1[16]), .outData_17(wire_con_in_stage1[17]), .outData_18(wire_con_in_stage1[18]), .outData_19(wire_con_in_stage1[19]), .outData_20(wire_con_in_stage1[20]), .outData_21(wire_con_in_stage1[21]), .outData_22(wire_con_in_stage1[22]), .outData_23(wire_con_in_stage1[23]), .outData_24(wire_con_in_stage1[24]), .outData_25(wire_con_in_stage1[25]), .outData_26(wire_con_in_stage1[26]), .outData_27(wire_con_in_stage1[27]), .outData_28(wire_con_in_stage1[28]), .outData_29(wire_con_in_stage1[29]), .outData_30(wire_con_in_stage1[30]), .outData_31(wire_con_in_stage1[31]), 
        .in_start(in_start_stage1), .out_start(con_in_start_stage1), .ctrl(wire_ctrl_stage1), .clk(clk), .rst(rst));
  
  s4_wireCon_dp32_st1_L wire_stage_1(
        .inData_0(wire_con_in_stage1[0]), .inData_1(wire_con_in_stage1[1]), .inData_2(wire_con_in_stage1[2]), .inData_3(wire_con_in_stage1[3]), .inData_4(wire_con_in_stage1[4]), .inData_5(wire_con_in_stage1[5]), .inData_6(wire_con_in_stage1[6]), .inData_7(wire_con_in_stage1[7]), .inData_8(wire_con_in_stage1[8]), .inData_9(wire_con_in_stage1[9]), .inData_10(wire_con_in_stage1[10]), .inData_11(wire_con_in_stage1[11]), .inData_12(wire_con_in_stage1[12]), .inData_13(wire_con_in_stage1[13]), .inData_14(wire_con_in_stage1[14]), .inData_15(wire_con_in_stage1[15]), .inData_16(wire_con_in_stage1[16]), .inData_17(wire_con_in_stage1[17]), .inData_18(wire_con_in_stage1[18]), .inData_19(wire_con_in_stage1[19]), .inData_20(wire_con_in_stage1[20]), .inData_21(wire_con_in_stage1[21]), .inData_22(wire_con_in_stage1[22]), .inData_23(wire_con_in_stage1[23]), .inData_24(wire_con_in_stage1[24]), .inData_25(wire_con_in_stage1[25]), .inData_26(wire_con_in_stage1[26]), .inData_27(wire_con_in_stage1[27]), .inData_28(wire_con_in_stage1[28]), .inData_29(wire_con_in_stage1[29]), .inData_30(wire_con_in_stage1[30]), .inData_31(wire_con_in_stage1[31]), 
        .outData_0(wire_con_out_stage1[0]), .outData_1(wire_con_out_stage1[1]), .outData_2(wire_con_out_stage1[2]), .outData_3(wire_con_out_stage1[3]), .outData_4(wire_con_out_stage1[4]), .outData_5(wire_con_out_stage1[5]), .outData_6(wire_con_out_stage1[6]), .outData_7(wire_con_out_stage1[7]), .outData_8(wire_con_out_stage1[8]), .outData_9(wire_con_out_stage1[9]), .outData_10(wire_con_out_stage1[10]), .outData_11(wire_con_out_stage1[11]), .outData_12(wire_con_out_stage1[12]), .outData_13(wire_con_out_stage1[13]), .outData_14(wire_con_out_stage1[14]), .outData_15(wire_con_out_stage1[15]), .outData_16(wire_con_out_stage1[16]), .outData_17(wire_con_out_stage1[17]), .outData_18(wire_con_out_stage1[18]), .outData_19(wire_con_out_stage1[19]), .outData_20(wire_con_out_stage1[20]), .outData_21(wire_con_out_stage1[21]), .outData_22(wire_con_out_stage1[22]), .outData_23(wire_con_out_stage1[23]), .outData_24(wire_con_out_stage1[24]), .outData_25(wire_con_out_stage1[25]), .outData_26(wire_con_out_stage1[26]), .outData_27(wire_con_out_stage1[27]), .outData_28(wire_con_out_stage1[28]), .outData_29(wire_con_out_stage1[29]), .outData_30(wire_con_out_stage1[30]), .outData_31(wire_con_out_stage1[31]), 
        .in_start(con_in_start_stage1), .out_start(in_start_stage2), .clk(clk), .rst(rst)); 

  
  s4_switch_ctrl_dp32_st1_per0L s4_switch_ctrl_stage_1(.in_start(in_start_stage1),.ctrl_out(wire_ctrl_stage1),.clk(clk), .rst(rst));

  wire [DATA_WIDTH-1:0] wire_con_in_stage2[31:0];
  wire [DATA_WIDTH-1:0] wire_con_out_stage2[31:0];
  wire [15:0] wire_ctrl_stage2;

  s4_switches_stage_st2_0_L switch_stage_2(
        .inData_0(wire_con_out_stage1[0]), .inData_1(wire_con_out_stage1[1]), .inData_2(wire_con_out_stage1[2]), .inData_3(wire_con_out_stage1[3]), .inData_4(wire_con_out_stage1[4]), .inData_5(wire_con_out_stage1[5]), .inData_6(wire_con_out_stage1[6]), .inData_7(wire_con_out_stage1[7]), .inData_8(wire_con_out_stage1[8]), .inData_9(wire_con_out_stage1[9]), .inData_10(wire_con_out_stage1[10]), .inData_11(wire_con_out_stage1[11]), .inData_12(wire_con_out_stage1[12]), .inData_13(wire_con_out_stage1[13]), .inData_14(wire_con_out_stage1[14]), .inData_15(wire_con_out_stage1[15]), .inData_16(wire_con_out_stage1[16]), .inData_17(wire_con_out_stage1[17]), .inData_18(wire_con_out_stage1[18]), .inData_19(wire_con_out_stage1[19]), .inData_20(wire_con_out_stage1[20]), .inData_21(wire_con_out_stage1[21]), .inData_22(wire_con_out_stage1[22]), .inData_23(wire_con_out_stage1[23]), .inData_24(wire_con_out_stage1[24]), .inData_25(wire_con_out_stage1[25]), .inData_26(wire_con_out_stage1[26]), .inData_27(wire_con_out_stage1[27]), .inData_28(wire_con_out_stage1[28]), .inData_29(wire_con_out_stage1[29]), .inData_30(wire_con_out_stage1[30]), .inData_31(wire_con_out_stage1[31]), 
        .outData_0(wire_con_in_stage2[0]), .outData_1(wire_con_in_stage2[1]), .outData_2(wire_con_in_stage2[2]), .outData_3(wire_con_in_stage2[3]), .outData_4(wire_con_in_stage2[4]), .outData_5(wire_con_in_stage2[5]), .outData_6(wire_con_in_stage2[6]), .outData_7(wire_con_in_stage2[7]), .outData_8(wire_con_in_stage2[8]), .outData_9(wire_con_in_stage2[9]), .outData_10(wire_con_in_stage2[10]), .outData_11(wire_con_in_stage2[11]), .outData_12(wire_con_in_stage2[12]), .outData_13(wire_con_in_stage2[13]), .outData_14(wire_con_in_stage2[14]), .outData_15(wire_con_in_stage2[15]), .outData_16(wire_con_in_stage2[16]), .outData_17(wire_con_in_stage2[17]), .outData_18(wire_con_in_stage2[18]), .outData_19(wire_con_in_stage2[19]), .outData_20(wire_con_in_stage2[20]), .outData_21(wire_con_in_stage2[21]), .outData_22(wire_con_in_stage2[22]), .outData_23(wire_con_in_stage2[23]), .outData_24(wire_con_in_stage2[24]), .outData_25(wire_con_in_stage2[25]), .outData_26(wire_con_in_stage2[26]), .outData_27(wire_con_in_stage2[27]), .outData_28(wire_con_in_stage2[28]), .outData_29(wire_con_in_stage2[29]), .outData_30(wire_con_in_stage2[30]), .outData_31(wire_con_in_stage2[31]), 
        .in_start(in_start_stage2), .out_start(con_in_start_stage2), .ctrl(wire_ctrl_stage2), .clk(clk), .rst(rst));
  
  s4_wireCon_dp32_st2_L wire_stage_2(
        .inData_0(wire_con_in_stage2[0]), .inData_1(wire_con_in_stage2[1]), .inData_2(wire_con_in_stage2[2]), .inData_3(wire_con_in_stage2[3]), .inData_4(wire_con_in_stage2[4]), .inData_5(wire_con_in_stage2[5]), .inData_6(wire_con_in_stage2[6]), .inData_7(wire_con_in_stage2[7]), .inData_8(wire_con_in_stage2[8]), .inData_9(wire_con_in_stage2[9]), .inData_10(wire_con_in_stage2[10]), .inData_11(wire_con_in_stage2[11]), .inData_12(wire_con_in_stage2[12]), .inData_13(wire_con_in_stage2[13]), .inData_14(wire_con_in_stage2[14]), .inData_15(wire_con_in_stage2[15]), .inData_16(wire_con_in_stage2[16]), .inData_17(wire_con_in_stage2[17]), .inData_18(wire_con_in_stage2[18]), .inData_19(wire_con_in_stage2[19]), .inData_20(wire_con_in_stage2[20]), .inData_21(wire_con_in_stage2[21]), .inData_22(wire_con_in_stage2[22]), .inData_23(wire_con_in_stage2[23]), .inData_24(wire_con_in_stage2[24]), .inData_25(wire_con_in_stage2[25]), .inData_26(wire_con_in_stage2[26]), .inData_27(wire_con_in_stage2[27]), .inData_28(wire_con_in_stage2[28]), .inData_29(wire_con_in_stage2[29]), .inData_30(wire_con_in_stage2[30]), .inData_31(wire_con_in_stage2[31]), 
        .outData_0(wire_con_out_stage2[0]), .outData_1(wire_con_out_stage2[1]), .outData_2(wire_con_out_stage2[2]), .outData_3(wire_con_out_stage2[3]), .outData_4(wire_con_out_stage2[4]), .outData_5(wire_con_out_stage2[5]), .outData_6(wire_con_out_stage2[6]), .outData_7(wire_con_out_stage2[7]), .outData_8(wire_con_out_stage2[8]), .outData_9(wire_con_out_stage2[9]), .outData_10(wire_con_out_stage2[10]), .outData_11(wire_con_out_stage2[11]), .outData_12(wire_con_out_stage2[12]), .outData_13(wire_con_out_stage2[13]), .outData_14(wire_con_out_stage2[14]), .outData_15(wire_con_out_stage2[15]), .outData_16(wire_con_out_stage2[16]), .outData_17(wire_con_out_stage2[17]), .outData_18(wire_con_out_stage2[18]), .outData_19(wire_con_out_stage2[19]), .outData_20(wire_con_out_stage2[20]), .outData_21(wire_con_out_stage2[21]), .outData_22(wire_con_out_stage2[22]), .outData_23(wire_con_out_stage2[23]), .outData_24(wire_con_out_stage2[24]), .outData_25(wire_con_out_stage2[25]), .outData_26(wire_con_out_stage2[26]), .outData_27(wire_con_out_stage2[27]), .outData_28(wire_con_out_stage2[28]), .outData_29(wire_con_out_stage2[29]), .outData_30(wire_con_out_stage2[30]), .outData_31(wire_con_out_stage2[31]), 
        .in_start(con_in_start_stage2), .out_start(in_start_stage3), .clk(clk), .rst(rst)); 

  
  s4_switch_ctrl_dp32_st2_per0L s4_switch_ctrl_stage_2(.in_start(in_start_stage2),.ctrl_out(wire_ctrl_stage2),.clk(clk), .rst(rst));

  wire [DATA_WIDTH-1:0] wire_con_in_stage3[31:0];
  wire [DATA_WIDTH-1:0] wire_con_out_stage3[31:0];
  wire [15:0] wire_ctrl_stage3;

  s4_switches_stage_st3_0_L switch_stage_3(
        .inData_0(wire_con_out_stage2[0]), .inData_1(wire_con_out_stage2[1]), .inData_2(wire_con_out_stage2[2]), .inData_3(wire_con_out_stage2[3]), .inData_4(wire_con_out_stage2[4]), .inData_5(wire_con_out_stage2[5]), .inData_6(wire_con_out_stage2[6]), .inData_7(wire_con_out_stage2[7]), .inData_8(wire_con_out_stage2[8]), .inData_9(wire_con_out_stage2[9]), .inData_10(wire_con_out_stage2[10]), .inData_11(wire_con_out_stage2[11]), .inData_12(wire_con_out_stage2[12]), .inData_13(wire_con_out_stage2[13]), .inData_14(wire_con_out_stage2[14]), .inData_15(wire_con_out_stage2[15]), .inData_16(wire_con_out_stage2[16]), .inData_17(wire_con_out_stage2[17]), .inData_18(wire_con_out_stage2[18]), .inData_19(wire_con_out_stage2[19]), .inData_20(wire_con_out_stage2[20]), .inData_21(wire_con_out_stage2[21]), .inData_22(wire_con_out_stage2[22]), .inData_23(wire_con_out_stage2[23]), .inData_24(wire_con_out_stage2[24]), .inData_25(wire_con_out_stage2[25]), .inData_26(wire_con_out_stage2[26]), .inData_27(wire_con_out_stage2[27]), .inData_28(wire_con_out_stage2[28]), .inData_29(wire_con_out_stage2[29]), .inData_30(wire_con_out_stage2[30]), .inData_31(wire_con_out_stage2[31]), 
        .outData_0(wire_con_in_stage3[0]), .outData_1(wire_con_in_stage3[1]), .outData_2(wire_con_in_stage3[2]), .outData_3(wire_con_in_stage3[3]), .outData_4(wire_con_in_stage3[4]), .outData_5(wire_con_in_stage3[5]), .outData_6(wire_con_in_stage3[6]), .outData_7(wire_con_in_stage3[7]), .outData_8(wire_con_in_stage3[8]), .outData_9(wire_con_in_stage3[9]), .outData_10(wire_con_in_stage3[10]), .outData_11(wire_con_in_stage3[11]), .outData_12(wire_con_in_stage3[12]), .outData_13(wire_con_in_stage3[13]), .outData_14(wire_con_in_stage3[14]), .outData_15(wire_con_in_stage3[15]), .outData_16(wire_con_in_stage3[16]), .outData_17(wire_con_in_stage3[17]), .outData_18(wire_con_in_stage3[18]), .outData_19(wire_con_in_stage3[19]), .outData_20(wire_con_in_stage3[20]), .outData_21(wire_con_in_stage3[21]), .outData_22(wire_con_in_stage3[22]), .outData_23(wire_con_in_stage3[23]), .outData_24(wire_con_in_stage3[24]), .outData_25(wire_con_in_stage3[25]), .outData_26(wire_con_in_stage3[26]), .outData_27(wire_con_in_stage3[27]), .outData_28(wire_con_in_stage3[28]), .outData_29(wire_con_in_stage3[29]), .outData_30(wire_con_in_stage3[30]), .outData_31(wire_con_in_stage3[31]), 
        .in_start(in_start_stage3), .out_start(con_in_start_stage3), .ctrl(wire_ctrl_stage3), .clk(clk), .rst(rst));
  
  s4_wireCon_dp32_st3_L wire_stage_3(
        .inData_0(wire_con_in_stage3[0]), .inData_1(wire_con_in_stage3[1]), .inData_2(wire_con_in_stage3[2]), .inData_3(wire_con_in_stage3[3]), .inData_4(wire_con_in_stage3[4]), .inData_5(wire_con_in_stage3[5]), .inData_6(wire_con_in_stage3[6]), .inData_7(wire_con_in_stage3[7]), .inData_8(wire_con_in_stage3[8]), .inData_9(wire_con_in_stage3[9]), .inData_10(wire_con_in_stage3[10]), .inData_11(wire_con_in_stage3[11]), .inData_12(wire_con_in_stage3[12]), .inData_13(wire_con_in_stage3[13]), .inData_14(wire_con_in_stage3[14]), .inData_15(wire_con_in_stage3[15]), .inData_16(wire_con_in_stage3[16]), .inData_17(wire_con_in_stage3[17]), .inData_18(wire_con_in_stage3[18]), .inData_19(wire_con_in_stage3[19]), .inData_20(wire_con_in_stage3[20]), .inData_21(wire_con_in_stage3[21]), .inData_22(wire_con_in_stage3[22]), .inData_23(wire_con_in_stage3[23]), .inData_24(wire_con_in_stage3[24]), .inData_25(wire_con_in_stage3[25]), .inData_26(wire_con_in_stage3[26]), .inData_27(wire_con_in_stage3[27]), .inData_28(wire_con_in_stage3[28]), .inData_29(wire_con_in_stage3[29]), .inData_30(wire_con_in_stage3[30]), .inData_31(wire_con_in_stage3[31]), 
        .outData_0(wire_con_out_stage3[0]), .outData_1(wire_con_out_stage3[1]), .outData_2(wire_con_out_stage3[2]), .outData_3(wire_con_out_stage3[3]), .outData_4(wire_con_out_stage3[4]), .outData_5(wire_con_out_stage3[5]), .outData_6(wire_con_out_stage3[6]), .outData_7(wire_con_out_stage3[7]), .outData_8(wire_con_out_stage3[8]), .outData_9(wire_con_out_stage3[9]), .outData_10(wire_con_out_stage3[10]), .outData_11(wire_con_out_stage3[11]), .outData_12(wire_con_out_stage3[12]), .outData_13(wire_con_out_stage3[13]), .outData_14(wire_con_out_stage3[14]), .outData_15(wire_con_out_stage3[15]), .outData_16(wire_con_out_stage3[16]), .outData_17(wire_con_out_stage3[17]), .outData_18(wire_con_out_stage3[18]), .outData_19(wire_con_out_stage3[19]), .outData_20(wire_con_out_stage3[20]), .outData_21(wire_con_out_stage3[21]), .outData_22(wire_con_out_stage3[22]), .outData_23(wire_con_out_stage3[23]), .outData_24(wire_con_out_stage3[24]), .outData_25(wire_con_out_stage3[25]), .outData_26(wire_con_out_stage3[26]), .outData_27(wire_con_out_stage3[27]), .outData_28(wire_con_out_stage3[28]), .outData_29(wire_con_out_stage3[29]), .outData_30(wire_con_out_stage3[30]), .outData_31(wire_con_out_stage3[31]), 
        .in_start(con_in_start_stage3), .out_start(in_start_stage4), .clk(clk), .rst(rst)); 

  
  s4_switch_ctrl_dp32_st3_per0L s4_switch_ctrl_stage_3(.in_start(in_start_stage3),.ctrl_out(wire_ctrl_stage3),.clk(clk), .rst(rst));

  wire [DATA_WIDTH-1:0] wire_con_in_stage4[31:0];
  wire [DATA_WIDTH-1:0] wire_con_out_stage4[31:0];
  wire [15:0] wire_ctrl_stage4;

  s4_switches_stage_st4_0_L switch_stage_4(
        .inData_0(wire_con_out_stage3[0]), .inData_1(wire_con_out_stage3[1]), .inData_2(wire_con_out_stage3[2]), .inData_3(wire_con_out_stage3[3]), .inData_4(wire_con_out_stage3[4]), .inData_5(wire_con_out_stage3[5]), .inData_6(wire_con_out_stage3[6]), .inData_7(wire_con_out_stage3[7]), .inData_8(wire_con_out_stage3[8]), .inData_9(wire_con_out_stage3[9]), .inData_10(wire_con_out_stage3[10]), .inData_11(wire_con_out_stage3[11]), .inData_12(wire_con_out_stage3[12]), .inData_13(wire_con_out_stage3[13]), .inData_14(wire_con_out_stage3[14]), .inData_15(wire_con_out_stage3[15]), .inData_16(wire_con_out_stage3[16]), .inData_17(wire_con_out_stage3[17]), .inData_18(wire_con_out_stage3[18]), .inData_19(wire_con_out_stage3[19]), .inData_20(wire_con_out_stage3[20]), .inData_21(wire_con_out_stage3[21]), .inData_22(wire_con_out_stage3[22]), .inData_23(wire_con_out_stage3[23]), .inData_24(wire_con_out_stage3[24]), .inData_25(wire_con_out_stage3[25]), .inData_26(wire_con_out_stage3[26]), .inData_27(wire_con_out_stage3[27]), .inData_28(wire_con_out_stage3[28]), .inData_29(wire_con_out_stage3[29]), .inData_30(wire_con_out_stage3[30]), .inData_31(wire_con_out_stage3[31]), 
        .outData_0(wire_con_in_stage4[0]), .outData_1(wire_con_in_stage4[1]), .outData_2(wire_con_in_stage4[2]), .outData_3(wire_con_in_stage4[3]), .outData_4(wire_con_in_stage4[4]), .outData_5(wire_con_in_stage4[5]), .outData_6(wire_con_in_stage4[6]), .outData_7(wire_con_in_stage4[7]), .outData_8(wire_con_in_stage4[8]), .outData_9(wire_con_in_stage4[9]), .outData_10(wire_con_in_stage4[10]), .outData_11(wire_con_in_stage4[11]), .outData_12(wire_con_in_stage4[12]), .outData_13(wire_con_in_stage4[13]), .outData_14(wire_con_in_stage4[14]), .outData_15(wire_con_in_stage4[15]), .outData_16(wire_con_in_stage4[16]), .outData_17(wire_con_in_stage4[17]), .outData_18(wire_con_in_stage4[18]), .outData_19(wire_con_in_stage4[19]), .outData_20(wire_con_in_stage4[20]), .outData_21(wire_con_in_stage4[21]), .outData_22(wire_con_in_stage4[22]), .outData_23(wire_con_in_stage4[23]), .outData_24(wire_con_in_stage4[24]), .outData_25(wire_con_in_stage4[25]), .outData_26(wire_con_in_stage4[26]), .outData_27(wire_con_in_stage4[27]), .outData_28(wire_con_in_stage4[28]), .outData_29(wire_con_in_stage4[29]), .outData_30(wire_con_in_stage4[30]), .outData_31(wire_con_in_stage4[31]), 
        .in_start(in_start_stage4), .out_start(con_in_start_stage4), .ctrl(wire_ctrl_stage4), .clk(clk), .rst(rst));
  
  s4_wireCon_dp32_st4_L wire_stage_4(
        .inData_0(wire_con_in_stage4[0]), .inData_1(wire_con_in_stage4[1]), .inData_2(wire_con_in_stage4[2]), .inData_3(wire_con_in_stage4[3]), .inData_4(wire_con_in_stage4[4]), .inData_5(wire_con_in_stage4[5]), .inData_6(wire_con_in_stage4[6]), .inData_7(wire_con_in_stage4[7]), .inData_8(wire_con_in_stage4[8]), .inData_9(wire_con_in_stage4[9]), .inData_10(wire_con_in_stage4[10]), .inData_11(wire_con_in_stage4[11]), .inData_12(wire_con_in_stage4[12]), .inData_13(wire_con_in_stage4[13]), .inData_14(wire_con_in_stage4[14]), .inData_15(wire_con_in_stage4[15]), .inData_16(wire_con_in_stage4[16]), .inData_17(wire_con_in_stage4[17]), .inData_18(wire_con_in_stage4[18]), .inData_19(wire_con_in_stage4[19]), .inData_20(wire_con_in_stage4[20]), .inData_21(wire_con_in_stage4[21]), .inData_22(wire_con_in_stage4[22]), .inData_23(wire_con_in_stage4[23]), .inData_24(wire_con_in_stage4[24]), .inData_25(wire_con_in_stage4[25]), .inData_26(wire_con_in_stage4[26]), .inData_27(wire_con_in_stage4[27]), .inData_28(wire_con_in_stage4[28]), .inData_29(wire_con_in_stage4[29]), .inData_30(wire_con_in_stage4[30]), .inData_31(wire_con_in_stage4[31]), 
        .outData_0(wireOut[0]), .outData_1(wireOut[1]), .outData_2(wireOut[2]), .outData_3(wireOut[3]), .outData_4(wireOut[4]), .outData_5(wireOut[5]), .outData_6(wireOut[6]), .outData_7(wireOut[7]), .outData_8(wireOut[8]), .outData_9(wireOut[9]), .outData_10(wireOut[10]), .outData_11(wireOut[11]), .outData_12(wireOut[12]), .outData_13(wireOut[13]), .outData_14(wireOut[14]), .outData_15(wireOut[15]), .outData_16(wireOut[16]), .outData_17(wireOut[17]), .outData_18(wireOut[18]), .outData_19(wireOut[19]), .outData_20(wireOut[20]), .outData_21(wireOut[21]), .outData_22(wireOut[22]), .outData_23(wireOut[23]), .outData_24(wireOut[24]), .outData_25(wireOut[25]), .outData_26(wireOut[26]), .outData_27(wireOut[27]), .outData_28(wireOut[28]), .outData_29(wireOut[29]), .outData_30(wireOut[30]), .outData_31(wireOut[31]), 
        .in_start(con_in_start_stage4), .out_start(out_start_w), .clk(clk), .rst(rst)); 

  
  s4_switch_ctrl_dp32_st4_per0L s4_switch_ctrl_stage_4(.in_start(in_start_stage4),.ctrl_out(wire_ctrl_stage4),.clk(clk), .rst(rst));

  
  assign in_start_stage0 = in_start;    
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = out_start_w;    
  
endmodule                        


module s4_switches_stage_st0_0_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [16-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = in_start;    
  
endmodule                        


module s4_ctrl_rom_dp32_st0_per0R(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [4:0] addr;                        
  output reg [15:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 16'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          5'b00000: data <= 16'b0000000000000000; 
          5'b00001: data <= 16'b1111111111111111; 
          5'b00010: data <= 16'b0000000000000000; 
          5'b00011: data <= 16'b1111111111111111; 
          5'b00100: data <= 16'b0000000000000000; 
          5'b00101: data <= 16'b1111111111111111; 
          5'b00110: data <= 16'b0000000000000000; 
          5'b00111: data <= 16'b1111111111111111; 
          5'b01000: data <= 16'b0000000000000000; 
          5'b01001: data <= 16'b1111111111111111; 
          5'b01010: data <= 16'b0000000000000000; 
          5'b01011: data <= 16'b1111111111111111; 
          5'b01100: data <= 16'b0000000000000000; 
          5'b01101: data <= 16'b1111111111111111; 
          5'b01110: data <= 16'b0000000000000000; 
          5'b01111: data <= 16'b1111111111111111; 
          5'b10000: data <= 16'b0000000000000000; 
          5'b10001: data <= 16'b1111111111111111; 
          5'b10010: data <= 16'b0000000000000000; 
          5'b10011: data <= 16'b1111111111111111; 
          5'b10100: data <= 16'b0000000000000000; 
          5'b10101: data <= 16'b1111111111111111; 
          5'b10110: data <= 16'b0000000000000000; 
          5'b10111: data <= 16'b1111111111111111; 
          5'b11000: data <= 16'b0000000000000000; 
          5'b11001: data <= 16'b1111111111111111; 
          5'b11010: data <= 16'b0000000000000000; 
          5'b11011: data <= 16'b1111111111111111; 
          5'b11100: data <= 16'b0000000000000000; 
          5'b11101: data <= 16'b1111111111111111; 
          5'b11110: data <= 16'b0000000000000000; 
          5'b11111: data <= 16'b1111111111111111; 
          default: data <= 16'b0; 
        endcase
    end
  end                              

endmodule                        


module s4_switch_ctrl_dp32_st0_per0R(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [15:0] ctrl_out;        
  
  reg [4:0] addr;        
  reg state;        
  
  s4_ctrl_rom_dp32_st0_per0R s4_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 5'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 5'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {5{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s4_wireCon_dp32_st0_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[16];    
  assign wireOut[2] = wireIn[1];    
  assign wireOut[3] = wireIn[17];    
  assign wireOut[4] = wireIn[2];    
  assign wireOut[5] = wireIn[18];    
  assign wireOut[6] = wireIn[3];    
  assign wireOut[7] = wireIn[19];    
  assign wireOut[8] = wireIn[4];    
  assign wireOut[9] = wireIn[20];    
  assign wireOut[10] = wireIn[5];    
  assign wireOut[11] = wireIn[21];    
  assign wireOut[12] = wireIn[6];    
  assign wireOut[13] = wireIn[22];    
  assign wireOut[14] = wireIn[7];    
  assign wireOut[15] = wireIn[23];    
  assign wireOut[16] = wireIn[8];    
  assign wireOut[17] = wireIn[24];    
  assign wireOut[18] = wireIn[9];    
  assign wireOut[19] = wireIn[25];    
  assign wireOut[20] = wireIn[10];    
  assign wireOut[21] = wireIn[26];    
  assign wireOut[22] = wireIn[11];    
  assign wireOut[23] = wireIn[27];    
  assign wireOut[24] = wireIn[12];    
  assign wireOut[25] = wireIn[28];    
  assign wireOut[26] = wireIn[13];    
  assign wireOut[27] = wireIn[29];    
  assign wireOut[28] = wireIn[14];    
  assign wireOut[29] = wireIn[30];    
  assign wireOut[30] = wireIn[15];    
  assign wireOut[31] = wireIn[31];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = in_start;    
  
endmodule                        


module s4_switches_stage_st1_0_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [16-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = in_start;    
  
endmodule                        


module s4_ctrl_rom_dp32_st1_per0R(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [4:0] addr;                        
  output reg [15:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 16'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          5'b00000: data <= 16'b0000000000000000; 
          5'b00001: data <= 16'b0000000000000000; 
          5'b00010: data <= 16'b1111111111111111; 
          5'b00011: data <= 16'b1111111111111111; 
          5'b00100: data <= 16'b0000000000000000; 
          5'b00101: data <= 16'b0000000000000000; 
          5'b00110: data <= 16'b1111111111111111; 
          5'b00111: data <= 16'b1111111111111111; 
          5'b01000: data <= 16'b0000000000000000; 
          5'b01001: data <= 16'b0000000000000000; 
          5'b01010: data <= 16'b1111111111111111; 
          5'b01011: data <= 16'b1111111111111111; 
          5'b01100: data <= 16'b0000000000000000; 
          5'b01101: data <= 16'b0000000000000000; 
          5'b01110: data <= 16'b1111111111111111; 
          5'b01111: data <= 16'b1111111111111111; 
          5'b10000: data <= 16'b0000000000000000; 
          5'b10001: data <= 16'b0000000000000000; 
          5'b10010: data <= 16'b1111111111111111; 
          5'b10011: data <= 16'b1111111111111111; 
          5'b10100: data <= 16'b0000000000000000; 
          5'b10101: data <= 16'b0000000000000000; 
          5'b10110: data <= 16'b1111111111111111; 
          5'b10111: data <= 16'b1111111111111111; 
          5'b11000: data <= 16'b0000000000000000; 
          5'b11001: data <= 16'b0000000000000000; 
          5'b11010: data <= 16'b1111111111111111; 
          5'b11011: data <= 16'b1111111111111111; 
          5'b11100: data <= 16'b0000000000000000; 
          5'b11101: data <= 16'b0000000000000000; 
          5'b11110: data <= 16'b1111111111111111; 
          5'b11111: data <= 16'b1111111111111111; 
          default: data <= 16'b0; 
        endcase
    end
  end                              

endmodule                        


module s4_switch_ctrl_dp32_st1_per0R(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [15:0] ctrl_out;        
  
  reg [4:0] addr;        
  reg state;        
  
  s4_ctrl_rom_dp32_st1_per0R s4_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 5'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 5'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {5{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s4_wireCon_dp32_st1_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[8];    
  assign wireOut[2] = wireIn[1];    
  assign wireOut[3] = wireIn[9];    
  assign wireOut[4] = wireIn[2];    
  assign wireOut[5] = wireIn[10];    
  assign wireOut[6] = wireIn[3];    
  assign wireOut[7] = wireIn[11];    
  assign wireOut[8] = wireIn[4];    
  assign wireOut[9] = wireIn[12];    
  assign wireOut[10] = wireIn[5];    
  assign wireOut[11] = wireIn[13];    
  assign wireOut[12] = wireIn[6];    
  assign wireOut[13] = wireIn[14];    
  assign wireOut[14] = wireIn[7];    
  assign wireOut[15] = wireIn[15];    
  assign wireOut[16] = wireIn[16];    
  assign wireOut[17] = wireIn[24];    
  assign wireOut[18] = wireIn[17];    
  assign wireOut[19] = wireIn[25];    
  assign wireOut[20] = wireIn[18];    
  assign wireOut[21] = wireIn[26];    
  assign wireOut[22] = wireIn[19];    
  assign wireOut[23] = wireIn[27];    
  assign wireOut[24] = wireIn[20];    
  assign wireOut[25] = wireIn[28];    
  assign wireOut[26] = wireIn[21];    
  assign wireOut[27] = wireIn[29];    
  assign wireOut[28] = wireIn[22];    
  assign wireOut[29] = wireIn[30];    
  assign wireOut[30] = wireIn[23];    
  assign wireOut[31] = wireIn[31];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = in_start;    
  
endmodule                        


module s4_switches_stage_st2_0_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [16-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = in_start;    
  
endmodule                        


module s4_ctrl_rom_dp32_st2_per0R(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [4:0] addr;                        
  output reg [15:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 16'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          5'b00000: data <= 16'b0000000000000000; 
          5'b00001: data <= 16'b0000000000000000; 
          5'b00010: data <= 16'b0000000000000000; 
          5'b00011: data <= 16'b0000000000000000; 
          5'b00100: data <= 16'b1111111111111111; 
          5'b00101: data <= 16'b1111111111111111; 
          5'b00110: data <= 16'b1111111111111111; 
          5'b00111: data <= 16'b1111111111111111; 
          5'b01000: data <= 16'b0000000000000000; 
          5'b01001: data <= 16'b0000000000000000; 
          5'b01010: data <= 16'b0000000000000000; 
          5'b01011: data <= 16'b0000000000000000; 
          5'b01100: data <= 16'b1111111111111111; 
          5'b01101: data <= 16'b1111111111111111; 
          5'b01110: data <= 16'b1111111111111111; 
          5'b01111: data <= 16'b1111111111111111; 
          5'b10000: data <= 16'b0000000000000000; 
          5'b10001: data <= 16'b0000000000000000; 
          5'b10010: data <= 16'b0000000000000000; 
          5'b10011: data <= 16'b0000000000000000; 
          5'b10100: data <= 16'b1111111111111111; 
          5'b10101: data <= 16'b1111111111111111; 
          5'b10110: data <= 16'b1111111111111111; 
          5'b10111: data <= 16'b1111111111111111; 
          5'b11000: data <= 16'b0000000000000000; 
          5'b11001: data <= 16'b0000000000000000; 
          5'b11010: data <= 16'b0000000000000000; 
          5'b11011: data <= 16'b0000000000000000; 
          5'b11100: data <= 16'b1111111111111111; 
          5'b11101: data <= 16'b1111111111111111; 
          5'b11110: data <= 16'b1111111111111111; 
          5'b11111: data <= 16'b1111111111111111; 
          default: data <= 16'b0; 
        endcase
    end
  end                              

endmodule                        


module s4_switch_ctrl_dp32_st2_per0R(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [15:0] ctrl_out;        
  
  reg [4:0] addr;        
  reg state;        
  
  s4_ctrl_rom_dp32_st2_per0R s4_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 5'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 5'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {5{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s4_wireCon_dp32_st2_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[4];    
  assign wireOut[2] = wireIn[1];    
  assign wireOut[3] = wireIn[5];    
  assign wireOut[4] = wireIn[2];    
  assign wireOut[5] = wireIn[6];    
  assign wireOut[6] = wireIn[3];    
  assign wireOut[7] = wireIn[7];    
  assign wireOut[8] = wireIn[8];    
  assign wireOut[9] = wireIn[12];    
  assign wireOut[10] = wireIn[9];    
  assign wireOut[11] = wireIn[13];    
  assign wireOut[12] = wireIn[10];    
  assign wireOut[13] = wireIn[14];    
  assign wireOut[14] = wireIn[11];    
  assign wireOut[15] = wireIn[15];    
  assign wireOut[16] = wireIn[16];    
  assign wireOut[17] = wireIn[20];    
  assign wireOut[18] = wireIn[17];    
  assign wireOut[19] = wireIn[21];    
  assign wireOut[20] = wireIn[18];    
  assign wireOut[21] = wireIn[22];    
  assign wireOut[22] = wireIn[19];    
  assign wireOut[23] = wireIn[23];    
  assign wireOut[24] = wireIn[24];    
  assign wireOut[25] = wireIn[28];    
  assign wireOut[26] = wireIn[25];    
  assign wireOut[27] = wireIn[29];    
  assign wireOut[28] = wireIn[26];    
  assign wireOut[29] = wireIn[30];    
  assign wireOut[30] = wireIn[27];    
  assign wireOut[31] = wireIn[31];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = in_start;    
  
endmodule                        


module s4_switches_stage_st3_0_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [16-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = in_start;    
  
endmodule                        


module s4_ctrl_rom_dp32_st3_per0R(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [4:0] addr;                        
  output reg [15:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 16'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          5'b00000: data <= 16'b0000000000000000; 
          5'b00001: data <= 16'b0000000000000000; 
          5'b00010: data <= 16'b0000000000000000; 
          5'b00011: data <= 16'b0000000000000000; 
          5'b00100: data <= 16'b0000000000000000; 
          5'b00101: data <= 16'b0000000000000000; 
          5'b00110: data <= 16'b0000000000000000; 
          5'b00111: data <= 16'b0000000000000000; 
          5'b01000: data <= 16'b1111111111111111; 
          5'b01001: data <= 16'b1111111111111111; 
          5'b01010: data <= 16'b1111111111111111; 
          5'b01011: data <= 16'b1111111111111111; 
          5'b01100: data <= 16'b1111111111111111; 
          5'b01101: data <= 16'b1111111111111111; 
          5'b01110: data <= 16'b1111111111111111; 
          5'b01111: data <= 16'b1111111111111111; 
          5'b10000: data <= 16'b0000000000000000; 
          5'b10001: data <= 16'b0000000000000000; 
          5'b10010: data <= 16'b0000000000000000; 
          5'b10011: data <= 16'b0000000000000000; 
          5'b10100: data <= 16'b0000000000000000; 
          5'b10101: data <= 16'b0000000000000000; 
          5'b10110: data <= 16'b0000000000000000; 
          5'b10111: data <= 16'b0000000000000000; 
          5'b11000: data <= 16'b1111111111111111; 
          5'b11001: data <= 16'b1111111111111111; 
          5'b11010: data <= 16'b1111111111111111; 
          5'b11011: data <= 16'b1111111111111111; 
          5'b11100: data <= 16'b1111111111111111; 
          5'b11101: data <= 16'b1111111111111111; 
          5'b11110: data <= 16'b1111111111111111; 
          5'b11111: data <= 16'b1111111111111111; 
          default: data <= 16'b0; 
        endcase
    end
  end                              

endmodule                        


module s4_switch_ctrl_dp32_st3_per0R(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [15:0] ctrl_out;        
  
  reg [4:0] addr;        
  reg state;        
  
  s4_ctrl_rom_dp32_st3_per0R s4_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 5'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 5'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {5{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s4_wireCon_dp32_st3_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[2];    
  assign wireOut[2] = wireIn[1];    
  assign wireOut[3] = wireIn[3];    
  assign wireOut[4] = wireIn[4];    
  assign wireOut[5] = wireIn[6];    
  assign wireOut[6] = wireIn[5];    
  assign wireOut[7] = wireIn[7];    
  assign wireOut[8] = wireIn[8];    
  assign wireOut[9] = wireIn[10];    
  assign wireOut[10] = wireIn[9];    
  assign wireOut[11] = wireIn[11];    
  assign wireOut[12] = wireIn[12];    
  assign wireOut[13] = wireIn[14];    
  assign wireOut[14] = wireIn[13];    
  assign wireOut[15] = wireIn[15];    
  assign wireOut[16] = wireIn[16];    
  assign wireOut[17] = wireIn[18];    
  assign wireOut[18] = wireIn[17];    
  assign wireOut[19] = wireIn[19];    
  assign wireOut[20] = wireIn[20];    
  assign wireOut[21] = wireIn[22];    
  assign wireOut[22] = wireIn[21];    
  assign wireOut[23] = wireIn[23];    
  assign wireOut[24] = wireIn[24];    
  assign wireOut[25] = wireIn[26];    
  assign wireOut[26] = wireIn[25];    
  assign wireOut[27] = wireIn[27];    
  assign wireOut[28] = wireIn[28];    
  assign wireOut[29] = wireIn[30];    
  assign wireOut[30] = wireIn[29];    
  assign wireOut[31] = wireIn[31];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = in_start;    
  
endmodule                        


module s4_switches_stage_st4_0_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
ctrl,                            
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [16-1:0] ctrl;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  switch_2_2 switch_inst_0(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .ctrl(ctrl[0]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_1(.inData_0(wireIn[2]), .inData_1(wireIn[3]), .outData_0(wireOut[2]), .outData_1(wireOut[3]), .ctrl(ctrl[1]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_2(.inData_0(wireIn[4]), .inData_1(wireIn[5]), .outData_0(wireOut[4]), .outData_1(wireOut[5]), .ctrl(ctrl[2]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_3(.inData_0(wireIn[6]), .inData_1(wireIn[7]), .outData_0(wireOut[6]), .outData_1(wireOut[7]), .ctrl(ctrl[3]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_4(.inData_0(wireIn[8]), .inData_1(wireIn[9]), .outData_0(wireOut[8]), .outData_1(wireOut[9]), .ctrl(ctrl[4]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_5(.inData_0(wireIn[10]), .inData_1(wireIn[11]), .outData_0(wireOut[10]), .outData_1(wireOut[11]), .ctrl(ctrl[5]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_6(.inData_0(wireIn[12]), .inData_1(wireIn[13]), .outData_0(wireOut[12]), .outData_1(wireOut[13]), .ctrl(ctrl[6]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_7(.inData_0(wireIn[14]), .inData_1(wireIn[15]), .outData_0(wireOut[14]), .outData_1(wireOut[15]), .ctrl(ctrl[7]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_8(.inData_0(wireIn[16]), .inData_1(wireIn[17]), .outData_0(wireOut[16]), .outData_1(wireOut[17]), .ctrl(ctrl[8]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_9(.inData_0(wireIn[18]), .inData_1(wireIn[19]), .outData_0(wireOut[18]), .outData_1(wireOut[19]), .ctrl(ctrl[9]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_10(.inData_0(wireIn[20]), .inData_1(wireIn[21]), .outData_0(wireOut[20]), .outData_1(wireOut[21]), .ctrl(ctrl[10]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_11(.inData_0(wireIn[22]), .inData_1(wireIn[23]), .outData_0(wireOut[22]), .outData_1(wireOut[23]), .ctrl(ctrl[11]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_12(.inData_0(wireIn[24]), .inData_1(wireIn[25]), .outData_0(wireOut[24]), .outData_1(wireOut[25]), .ctrl(ctrl[12]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_13(.inData_0(wireIn[26]), .inData_1(wireIn[27]), .outData_0(wireOut[26]), .outData_1(wireOut[27]), .ctrl(ctrl[13]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_14(.inData_0(wireIn[28]), .inData_1(wireIn[29]), .outData_0(wireOut[28]), .outData_1(wireOut[29]), .ctrl(ctrl[14]), .clk(clk), .rst(rst));
  switch_2_2 switch_inst_15(.inData_0(wireIn[30]), .inData_1(wireIn[31]), .outData_0(wireOut[30]), .outData_1(wireOut[31]), .ctrl(ctrl[15]), .clk(clk), .rst(rst));
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = in_start;    
  
endmodule                        


module s4_ctrl_rom_dp32_st4_per0R(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [4:0] addr;                        
  output reg [15:0] data;        
  
  // synthesis attribute rom_style of data is "distributed"  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 16'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          5'b00000: data <= 16'b0000000000000000; 
          5'b00001: data <= 16'b0000000000000000; 
          5'b00010: data <= 16'b0000000000000000; 
          5'b00011: data <= 16'b0000000000000000; 
          5'b00100: data <= 16'b0000000000000000; 
          5'b00101: data <= 16'b0000000000000000; 
          5'b00110: data <= 16'b0000000000000000; 
          5'b00111: data <= 16'b0000000000000000; 
          5'b01000: data <= 16'b0000000000000000; 
          5'b01001: data <= 16'b0000000000000000; 
          5'b01010: data <= 16'b0000000000000000; 
          5'b01011: data <= 16'b0000000000000000; 
          5'b01100: data <= 16'b0000000000000000; 
          5'b01101: data <= 16'b0000000000000000; 
          5'b01110: data <= 16'b0000000000000000; 
          5'b01111: data <= 16'b0000000000000000; 
          5'b10000: data <= 16'b1111111111111111; 
          5'b10001: data <= 16'b1111111111111111; 
          5'b10010: data <= 16'b1111111111111111; 
          5'b10011: data <= 16'b1111111111111111; 
          5'b10100: data <= 16'b1111111111111111; 
          5'b10101: data <= 16'b1111111111111111; 
          5'b10110: data <= 16'b1111111111111111; 
          5'b10111: data <= 16'b1111111111111111; 
          5'b11000: data <= 16'b1111111111111111; 
          5'b11001: data <= 16'b1111111111111111; 
          5'b11010: data <= 16'b1111111111111111; 
          5'b11011: data <= 16'b1111111111111111; 
          5'b11100: data <= 16'b1111111111111111; 
          5'b11101: data <= 16'b1111111111111111; 
          5'b11110: data <= 16'b1111111111111111; 
          5'b11111: data <= 16'b1111111111111111; 
          default: data <= 16'b0; 
        endcase
    end
  end                              

endmodule                        


module s4_switch_ctrl_dp32_st4_per0R(
in_start,                          
ctrl_out,                        
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [15:0] ctrl_out;        
  
  reg [4:0] addr;        
  reg state;        
  
  s4_ctrl_rom_dp32_st4_per0R s4_ctrl_rom_inst(.en(1'b1),.clk(clk),.rst(rst),.addr(addr),.data(ctrl_out)); 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      addr <= 5'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case(state)                
        1'b0: begin                
          addr <= 5'b0;         
          if (in_start) begin                     
            state <= 1'b1;                 
            addr <= addr + 1;         
          end                                    
        end                                    
        1'b1: begin               
          addr <= addr + 1;         
          if (addr == {5{1'b1}}) begin         
            state <= 1'b0;                 
          end
        end                              
      endcase                              
    end
  end                              

endmodule                        


module s4_wireCon_dp32_st4_R(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31; 
  output out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  assign wireOut[0] = wireIn[0];    
  assign wireOut[1] = wireIn[1];    
  assign wireOut[2] = wireIn[2];    
  assign wireOut[3] = wireIn[3];    
  assign wireOut[4] = wireIn[4];    
  assign wireOut[5] = wireIn[5];    
  assign wireOut[6] = wireIn[6];    
  assign wireOut[7] = wireIn[7];    
  assign wireOut[8] = wireIn[8];    
  assign wireOut[9] = wireIn[9];    
  assign wireOut[10] = wireIn[10];    
  assign wireOut[11] = wireIn[11];    
  assign wireOut[12] = wireIn[12];    
  assign wireOut[13] = wireIn[13];    
  assign wireOut[14] = wireIn[14];    
  assign wireOut[15] = wireIn[15];    
  assign wireOut[16] = wireIn[16];    
  assign wireOut[17] = wireIn[17];    
  assign wireOut[18] = wireIn[18];    
  assign wireOut[19] = wireIn[19];    
  assign wireOut[20] = wireIn[20];    
  assign wireOut[21] = wireIn[21];    
  assign wireOut[22] = wireIn[22];    
  assign wireOut[23] = wireIn[23];    
  assign wireOut[24] = wireIn[24];    
  assign wireOut[25] = wireIn[25];    
  assign wireOut[26] = wireIn[26];    
  assign wireOut[27] = wireIn[27];    
  assign wireOut[28] = wireIn[28];    
  assign wireOut[29] = wireIn[29];    
  assign wireOut[30] = wireIn[30];    
  assign wireOut[31] = wireIn[31];    
  
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = in_start;    
  
endmodule                        


module s4_egressStage_p32(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
counter_in,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  input [4:0] counter_in; 
  output [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31;
  output out_start; 
  
  
  wire out_start_w; 
  wire [DATA_WIDTH-1:0] wireIn [31:0];              
  wire [DATA_WIDTH-1:0] wireOut [31:0];              
  
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  wire in_start_stage4;
  wire con_in_start_stage4;

  wire in_start_stage3;
  wire con_in_start_stage3;

  wire in_start_stage2;
  wire con_in_start_stage2;

  wire in_start_stage1;
  wire con_in_start_stage1;

  wire in_start_stage0;
  wire con_in_start_stage0;

  wire [DATA_WIDTH-1:0] wire_switch_in_stage4[31:0];
  wire [DATA_WIDTH-1:0] wire_switch_out_stage4[31:0];
  reg [15:0] wire_ctrl_stage4;

  s4_switches_stage_st4_0_R switch_stage_4(
        .inData_0(wire_switch_in_stage4[0]), .inData_1(wire_switch_in_stage4[1]), .inData_2(wire_switch_in_stage4[2]), .inData_3(wire_switch_in_stage4[3]), .inData_4(wire_switch_in_stage4[4]), .inData_5(wire_switch_in_stage4[5]), .inData_6(wire_switch_in_stage4[6]), .inData_7(wire_switch_in_stage4[7]), .inData_8(wire_switch_in_stage4[8]), .inData_9(wire_switch_in_stage4[9]), .inData_10(wire_switch_in_stage4[10]), .inData_11(wire_switch_in_stage4[11]), .inData_12(wire_switch_in_stage4[12]), .inData_13(wire_switch_in_stage4[13]), .inData_14(wire_switch_in_stage4[14]), .inData_15(wire_switch_in_stage4[15]), .inData_16(wire_switch_in_stage4[16]), .inData_17(wire_switch_in_stage4[17]), .inData_18(wire_switch_in_stage4[18]), .inData_19(wire_switch_in_stage4[19]), .inData_20(wire_switch_in_stage4[20]), .inData_21(wire_switch_in_stage4[21]), .inData_22(wire_switch_in_stage4[22]), .inData_23(wire_switch_in_stage4[23]), .inData_24(wire_switch_in_stage4[24]), .inData_25(wire_switch_in_stage4[25]), .inData_26(wire_switch_in_stage4[26]), .inData_27(wire_switch_in_stage4[27]), .inData_28(wire_switch_in_stage4[28]), .inData_29(wire_switch_in_stage4[29]), .inData_30(wire_switch_in_stage4[30]), .inData_31(wire_switch_in_stage4[31]), 
        .outData_0(wire_switch_out_stage4[0]), .outData_1(wire_switch_out_stage4[1]), .outData_2(wire_switch_out_stage4[2]), .outData_3(wire_switch_out_stage4[3]), .outData_4(wire_switch_out_stage4[4]), .outData_5(wire_switch_out_stage4[5]), .outData_6(wire_switch_out_stage4[6]), .outData_7(wire_switch_out_stage4[7]), .outData_8(wire_switch_out_stage4[8]), .outData_9(wire_switch_out_stage4[9]), .outData_10(wire_switch_out_stage4[10]), .outData_11(wire_switch_out_stage4[11]), .outData_12(wire_switch_out_stage4[12]), .outData_13(wire_switch_out_stage4[13]), .outData_14(wire_switch_out_stage4[14]), .outData_15(wire_switch_out_stage4[15]), .outData_16(wire_switch_out_stage4[16]), .outData_17(wire_switch_out_stage4[17]), .outData_18(wire_switch_out_stage4[18]), .outData_19(wire_switch_out_stage4[19]), .outData_20(wire_switch_out_stage4[20]), .outData_21(wire_switch_out_stage4[21]), .outData_22(wire_switch_out_stage4[22]), .outData_23(wire_switch_out_stage4[23]), .outData_24(wire_switch_out_stage4[24]), .outData_25(wire_switch_out_stage4[25]), .outData_26(wire_switch_out_stage4[26]), .outData_27(wire_switch_out_stage4[27]), .outData_28(wire_switch_out_stage4[28]), .outData_29(wire_switch_out_stage4[29]), .outData_30(wire_switch_out_stage4[30]), .outData_31(wire_switch_out_stage4[31]), 
        .in_start(con_in_start_stage4), .out_start(in_start_stage3), .ctrl(wire_ctrl_stage4), .clk(clk), .rst(rst));
  
  s4_wireCon_dp32_st4_R wire_stage_4(
        .inData_0(wireIn[0]), .inData_1(wireIn[1]), .inData_2(wireIn[2]), .inData_3(wireIn[3]), .inData_4(wireIn[4]), .inData_5(wireIn[5]), .inData_6(wireIn[6]), .inData_7(wireIn[7]), .inData_8(wireIn[8]), .inData_9(wireIn[9]), .inData_10(wireIn[10]), .inData_11(wireIn[11]), .inData_12(wireIn[12]), .inData_13(wireIn[13]), .inData_14(wireIn[14]), .inData_15(wireIn[15]), .inData_16(wireIn[16]), .inData_17(wireIn[17]), .inData_18(wireIn[18]), .inData_19(wireIn[19]), .inData_20(wireIn[20]), .inData_21(wireIn[21]), .inData_22(wireIn[22]), .inData_23(wireIn[23]), .inData_24(wireIn[24]), .inData_25(wireIn[25]), .inData_26(wireIn[26]), .inData_27(wireIn[27]), .inData_28(wireIn[28]), .inData_29(wireIn[29]), .inData_30(wireIn[30]), .inData_31(wireIn[31]), 
        .outData_0(wire_switch_in_stage4[0]), .outData_1(wire_switch_in_stage4[1]), .outData_2(wire_switch_in_stage4[2]), .outData_3(wire_switch_in_stage4[3]), .outData_4(wire_switch_in_stage4[4]), .outData_5(wire_switch_in_stage4[5]), .outData_6(wire_switch_in_stage4[6]), .outData_7(wire_switch_in_stage4[7]), .outData_8(wire_switch_in_stage4[8]), .outData_9(wire_switch_in_stage4[9]), .outData_10(wire_switch_in_stage4[10]), .outData_11(wire_switch_in_stage4[11]), .outData_12(wire_switch_in_stage4[12]), .outData_13(wire_switch_in_stage4[13]), .outData_14(wire_switch_in_stage4[14]), .outData_15(wire_switch_in_stage4[15]), .outData_16(wire_switch_in_stage4[16]), .outData_17(wire_switch_in_stage4[17]), .outData_18(wire_switch_in_stage4[18]), .outData_19(wire_switch_in_stage4[19]), .outData_20(wire_switch_in_stage4[20]), .outData_21(wire_switch_in_stage4[21]), .outData_22(wire_switch_in_stage4[22]), .outData_23(wire_switch_in_stage4[23]), .outData_24(wire_switch_in_stage4[24]), .outData_25(wire_switch_in_stage4[25]), .outData_26(wire_switch_in_stage4[26]), .outData_27(wire_switch_in_stage4[27]), .outData_28(wire_switch_in_stage4[28]), .outData_29(wire_switch_in_stage4[29]), .outData_30(wire_switch_in_stage4[30]), .outData_31(wire_switch_in_stage4[31]), 
        .in_start(in_start_stage4), .out_start(con_in_start_stage4), .clk(clk), .rst(rst)); 

  
  s4_switch_ctrl_dp32_st4_per0R s4_switch_ctrl_stage_4(.in_start(con_in_start_stage4),.ctrl_out(wire_ctrl_stage4),.clk(clk), .rst(rst));

  wire [DATA_WIDTH-1:0] wire_switch_in_stage3[31:0];
  wire [DATA_WIDTH-1:0] wire_switch_out_stage3[31:0];
  reg [15:0] wire_ctrl_stage3;

  s4_switches_stage_st3_0_R switch_stage_3(
        .inData_0(wire_switch_in_stage3[0]), .inData_1(wire_switch_in_stage3[1]), .inData_2(wire_switch_in_stage3[2]), .inData_3(wire_switch_in_stage3[3]), .inData_4(wire_switch_in_stage3[4]), .inData_5(wire_switch_in_stage3[5]), .inData_6(wire_switch_in_stage3[6]), .inData_7(wire_switch_in_stage3[7]), .inData_8(wire_switch_in_stage3[8]), .inData_9(wire_switch_in_stage3[9]), .inData_10(wire_switch_in_stage3[10]), .inData_11(wire_switch_in_stage3[11]), .inData_12(wire_switch_in_stage3[12]), .inData_13(wire_switch_in_stage3[13]), .inData_14(wire_switch_in_stage3[14]), .inData_15(wire_switch_in_stage3[15]), .inData_16(wire_switch_in_stage3[16]), .inData_17(wire_switch_in_stage3[17]), .inData_18(wire_switch_in_stage3[18]), .inData_19(wire_switch_in_stage3[19]), .inData_20(wire_switch_in_stage3[20]), .inData_21(wire_switch_in_stage3[21]), .inData_22(wire_switch_in_stage3[22]), .inData_23(wire_switch_in_stage3[23]), .inData_24(wire_switch_in_stage3[24]), .inData_25(wire_switch_in_stage3[25]), .inData_26(wire_switch_in_stage3[26]), .inData_27(wire_switch_in_stage3[27]), .inData_28(wire_switch_in_stage3[28]), .inData_29(wire_switch_in_stage3[29]), .inData_30(wire_switch_in_stage3[30]), .inData_31(wire_switch_in_stage3[31]), 
        .outData_0(wire_switch_out_stage3[0]), .outData_1(wire_switch_out_stage3[1]), .outData_2(wire_switch_out_stage3[2]), .outData_3(wire_switch_out_stage3[3]), .outData_4(wire_switch_out_stage3[4]), .outData_5(wire_switch_out_stage3[5]), .outData_6(wire_switch_out_stage3[6]), .outData_7(wire_switch_out_stage3[7]), .outData_8(wire_switch_out_stage3[8]), .outData_9(wire_switch_out_stage3[9]), .outData_10(wire_switch_out_stage3[10]), .outData_11(wire_switch_out_stage3[11]), .outData_12(wire_switch_out_stage3[12]), .outData_13(wire_switch_out_stage3[13]), .outData_14(wire_switch_out_stage3[14]), .outData_15(wire_switch_out_stage3[15]), .outData_16(wire_switch_out_stage3[16]), .outData_17(wire_switch_out_stage3[17]), .outData_18(wire_switch_out_stage3[18]), .outData_19(wire_switch_out_stage3[19]), .outData_20(wire_switch_out_stage3[20]), .outData_21(wire_switch_out_stage3[21]), .outData_22(wire_switch_out_stage3[22]), .outData_23(wire_switch_out_stage3[23]), .outData_24(wire_switch_out_stage3[24]), .outData_25(wire_switch_out_stage3[25]), .outData_26(wire_switch_out_stage3[26]), .outData_27(wire_switch_out_stage3[27]), .outData_28(wire_switch_out_stage3[28]), .outData_29(wire_switch_out_stage3[29]), .outData_30(wire_switch_out_stage3[30]), .outData_31(wire_switch_out_stage3[31]), 
        .in_start(con_in_start_stage3), .out_start(in_start_stage2), .ctrl(wire_ctrl_stage3), .clk(clk), .rst(rst));
  
  s4_wireCon_dp32_st3_R wire_stage_3(
        .inData_0(wire_switch_out_stage4[0]), .inData_1(wire_switch_out_stage4[1]), .inData_2(wire_switch_out_stage4[2]), .inData_3(wire_switch_out_stage4[3]), .inData_4(wire_switch_out_stage4[4]), .inData_5(wire_switch_out_stage4[5]), .inData_6(wire_switch_out_stage4[6]), .inData_7(wire_switch_out_stage4[7]), .inData_8(wire_switch_out_stage4[8]), .inData_9(wire_switch_out_stage4[9]), .inData_10(wire_switch_out_stage4[10]), .inData_11(wire_switch_out_stage4[11]), .inData_12(wire_switch_out_stage4[12]), .inData_13(wire_switch_out_stage4[13]), .inData_14(wire_switch_out_stage4[14]), .inData_15(wire_switch_out_stage4[15]), .inData_16(wire_switch_out_stage4[16]), .inData_17(wire_switch_out_stage4[17]), .inData_18(wire_switch_out_stage4[18]), .inData_19(wire_switch_out_stage4[19]), .inData_20(wire_switch_out_stage4[20]), .inData_21(wire_switch_out_stage4[21]), .inData_22(wire_switch_out_stage4[22]), .inData_23(wire_switch_out_stage4[23]), .inData_24(wire_switch_out_stage4[24]), .inData_25(wire_switch_out_stage4[25]), .inData_26(wire_switch_out_stage4[26]), .inData_27(wire_switch_out_stage4[27]), .inData_28(wire_switch_out_stage4[28]), .inData_29(wire_switch_out_stage4[29]), .inData_30(wire_switch_out_stage4[30]), .inData_31(wire_switch_out_stage4[31]), 
        .outData_0(wire_switch_in_stage3[0]), .outData_1(wire_switch_in_stage3[1]), .outData_2(wire_switch_in_stage3[2]), .outData_3(wire_switch_in_stage3[3]), .outData_4(wire_switch_in_stage3[4]), .outData_5(wire_switch_in_stage3[5]), .outData_6(wire_switch_in_stage3[6]), .outData_7(wire_switch_in_stage3[7]), .outData_8(wire_switch_in_stage3[8]), .outData_9(wire_switch_in_stage3[9]), .outData_10(wire_switch_in_stage3[10]), .outData_11(wire_switch_in_stage3[11]), .outData_12(wire_switch_in_stage3[12]), .outData_13(wire_switch_in_stage3[13]), .outData_14(wire_switch_in_stage3[14]), .outData_15(wire_switch_in_stage3[15]), .outData_16(wire_switch_in_stage3[16]), .outData_17(wire_switch_in_stage3[17]), .outData_18(wire_switch_in_stage3[18]), .outData_19(wire_switch_in_stage3[19]), .outData_20(wire_switch_in_stage3[20]), .outData_21(wire_switch_in_stage3[21]), .outData_22(wire_switch_in_stage3[22]), .outData_23(wire_switch_in_stage3[23]), .outData_24(wire_switch_in_stage3[24]), .outData_25(wire_switch_in_stage3[25]), .outData_26(wire_switch_in_stage3[26]), .outData_27(wire_switch_in_stage3[27]), .outData_28(wire_switch_in_stage3[28]), .outData_29(wire_switch_in_stage3[29]), .outData_30(wire_switch_in_stage3[30]), .outData_31(wire_switch_in_stage3[31]), 
        .in_start(in_start_stage3), .out_start(con_in_start_stage3), .clk(clk), .rst(rst)); 

  
  s4_switch_ctrl_dp32_st3_per0R s4_switch_ctrl_stage_3(.in_start(con_in_start_stage3),.ctrl_out(wire_ctrl_stage3),.clk(clk), .rst(rst));

  wire [DATA_WIDTH-1:0] wire_switch_in_stage2[31:0];
  wire [DATA_WIDTH-1:0] wire_switch_out_stage2[31:0];
  reg [15:0] wire_ctrl_stage2;

  s4_switches_stage_st2_0_R switch_stage_2(
        .inData_0(wire_switch_in_stage2[0]), .inData_1(wire_switch_in_stage2[1]), .inData_2(wire_switch_in_stage2[2]), .inData_3(wire_switch_in_stage2[3]), .inData_4(wire_switch_in_stage2[4]), .inData_5(wire_switch_in_stage2[5]), .inData_6(wire_switch_in_stage2[6]), .inData_7(wire_switch_in_stage2[7]), .inData_8(wire_switch_in_stage2[8]), .inData_9(wire_switch_in_stage2[9]), .inData_10(wire_switch_in_stage2[10]), .inData_11(wire_switch_in_stage2[11]), .inData_12(wire_switch_in_stage2[12]), .inData_13(wire_switch_in_stage2[13]), .inData_14(wire_switch_in_stage2[14]), .inData_15(wire_switch_in_stage2[15]), .inData_16(wire_switch_in_stage2[16]), .inData_17(wire_switch_in_stage2[17]), .inData_18(wire_switch_in_stage2[18]), .inData_19(wire_switch_in_stage2[19]), .inData_20(wire_switch_in_stage2[20]), .inData_21(wire_switch_in_stage2[21]), .inData_22(wire_switch_in_stage2[22]), .inData_23(wire_switch_in_stage2[23]), .inData_24(wire_switch_in_stage2[24]), .inData_25(wire_switch_in_stage2[25]), .inData_26(wire_switch_in_stage2[26]), .inData_27(wire_switch_in_stage2[27]), .inData_28(wire_switch_in_stage2[28]), .inData_29(wire_switch_in_stage2[29]), .inData_30(wire_switch_in_stage2[30]), .inData_31(wire_switch_in_stage2[31]), 
        .outData_0(wire_switch_out_stage2[0]), .outData_1(wire_switch_out_stage2[1]), .outData_2(wire_switch_out_stage2[2]), .outData_3(wire_switch_out_stage2[3]), .outData_4(wire_switch_out_stage2[4]), .outData_5(wire_switch_out_stage2[5]), .outData_6(wire_switch_out_stage2[6]), .outData_7(wire_switch_out_stage2[7]), .outData_8(wire_switch_out_stage2[8]), .outData_9(wire_switch_out_stage2[9]), .outData_10(wire_switch_out_stage2[10]), .outData_11(wire_switch_out_stage2[11]), .outData_12(wire_switch_out_stage2[12]), .outData_13(wire_switch_out_stage2[13]), .outData_14(wire_switch_out_stage2[14]), .outData_15(wire_switch_out_stage2[15]), .outData_16(wire_switch_out_stage2[16]), .outData_17(wire_switch_out_stage2[17]), .outData_18(wire_switch_out_stage2[18]), .outData_19(wire_switch_out_stage2[19]), .outData_20(wire_switch_out_stage2[20]), .outData_21(wire_switch_out_stage2[21]), .outData_22(wire_switch_out_stage2[22]), .outData_23(wire_switch_out_stage2[23]), .outData_24(wire_switch_out_stage2[24]), .outData_25(wire_switch_out_stage2[25]), .outData_26(wire_switch_out_stage2[26]), .outData_27(wire_switch_out_stage2[27]), .outData_28(wire_switch_out_stage2[28]), .outData_29(wire_switch_out_stage2[29]), .outData_30(wire_switch_out_stage2[30]), .outData_31(wire_switch_out_stage2[31]), 
        .in_start(con_in_start_stage2), .out_start(in_start_stage1), .ctrl(wire_ctrl_stage2), .clk(clk), .rst(rst));
  
  s4_wireCon_dp32_st2_R wire_stage_2(
        .inData_0(wire_switch_out_stage3[0]), .inData_1(wire_switch_out_stage3[1]), .inData_2(wire_switch_out_stage3[2]), .inData_3(wire_switch_out_stage3[3]), .inData_4(wire_switch_out_stage3[4]), .inData_5(wire_switch_out_stage3[5]), .inData_6(wire_switch_out_stage3[6]), .inData_7(wire_switch_out_stage3[7]), .inData_8(wire_switch_out_stage3[8]), .inData_9(wire_switch_out_stage3[9]), .inData_10(wire_switch_out_stage3[10]), .inData_11(wire_switch_out_stage3[11]), .inData_12(wire_switch_out_stage3[12]), .inData_13(wire_switch_out_stage3[13]), .inData_14(wire_switch_out_stage3[14]), .inData_15(wire_switch_out_stage3[15]), .inData_16(wire_switch_out_stage3[16]), .inData_17(wire_switch_out_stage3[17]), .inData_18(wire_switch_out_stage3[18]), .inData_19(wire_switch_out_stage3[19]), .inData_20(wire_switch_out_stage3[20]), .inData_21(wire_switch_out_stage3[21]), .inData_22(wire_switch_out_stage3[22]), .inData_23(wire_switch_out_stage3[23]), .inData_24(wire_switch_out_stage3[24]), .inData_25(wire_switch_out_stage3[25]), .inData_26(wire_switch_out_stage3[26]), .inData_27(wire_switch_out_stage3[27]), .inData_28(wire_switch_out_stage3[28]), .inData_29(wire_switch_out_stage3[29]), .inData_30(wire_switch_out_stage3[30]), .inData_31(wire_switch_out_stage3[31]), 
        .outData_0(wire_switch_in_stage2[0]), .outData_1(wire_switch_in_stage2[1]), .outData_2(wire_switch_in_stage2[2]), .outData_3(wire_switch_in_stage2[3]), .outData_4(wire_switch_in_stage2[4]), .outData_5(wire_switch_in_stage2[5]), .outData_6(wire_switch_in_stage2[6]), .outData_7(wire_switch_in_stage2[7]), .outData_8(wire_switch_in_stage2[8]), .outData_9(wire_switch_in_stage2[9]), .outData_10(wire_switch_in_stage2[10]), .outData_11(wire_switch_in_stage2[11]), .outData_12(wire_switch_in_stage2[12]), .outData_13(wire_switch_in_stage2[13]), .outData_14(wire_switch_in_stage2[14]), .outData_15(wire_switch_in_stage2[15]), .outData_16(wire_switch_in_stage2[16]), .outData_17(wire_switch_in_stage2[17]), .outData_18(wire_switch_in_stage2[18]), .outData_19(wire_switch_in_stage2[19]), .outData_20(wire_switch_in_stage2[20]), .outData_21(wire_switch_in_stage2[21]), .outData_22(wire_switch_in_stage2[22]), .outData_23(wire_switch_in_stage2[23]), .outData_24(wire_switch_in_stage2[24]), .outData_25(wire_switch_in_stage2[25]), .outData_26(wire_switch_in_stage2[26]), .outData_27(wire_switch_in_stage2[27]), .outData_28(wire_switch_in_stage2[28]), .outData_29(wire_switch_in_stage2[29]), .outData_30(wire_switch_in_stage2[30]), .outData_31(wire_switch_in_stage2[31]), 
        .in_start(in_start_stage2), .out_start(con_in_start_stage2), .clk(clk), .rst(rst)); 

  
  s4_switch_ctrl_dp32_st2_per0R s4_switch_ctrl_stage_2(.in_start(con_in_start_stage2),.ctrl_out(wire_ctrl_stage2),.clk(clk), .rst(rst));

  wire [DATA_WIDTH-1:0] wire_switch_in_stage1[31:0];
  wire [DATA_WIDTH-1:0] wire_switch_out_stage1[31:0];
  reg [15:0] wire_ctrl_stage1;

  s4_switches_stage_st1_0_R switch_stage_1(
        .inData_0(wire_switch_in_stage1[0]), .inData_1(wire_switch_in_stage1[1]), .inData_2(wire_switch_in_stage1[2]), .inData_3(wire_switch_in_stage1[3]), .inData_4(wire_switch_in_stage1[4]), .inData_5(wire_switch_in_stage1[5]), .inData_6(wire_switch_in_stage1[6]), .inData_7(wire_switch_in_stage1[7]), .inData_8(wire_switch_in_stage1[8]), .inData_9(wire_switch_in_stage1[9]), .inData_10(wire_switch_in_stage1[10]), .inData_11(wire_switch_in_stage1[11]), .inData_12(wire_switch_in_stage1[12]), .inData_13(wire_switch_in_stage1[13]), .inData_14(wire_switch_in_stage1[14]), .inData_15(wire_switch_in_stage1[15]), .inData_16(wire_switch_in_stage1[16]), .inData_17(wire_switch_in_stage1[17]), .inData_18(wire_switch_in_stage1[18]), .inData_19(wire_switch_in_stage1[19]), .inData_20(wire_switch_in_stage1[20]), .inData_21(wire_switch_in_stage1[21]), .inData_22(wire_switch_in_stage1[22]), .inData_23(wire_switch_in_stage1[23]), .inData_24(wire_switch_in_stage1[24]), .inData_25(wire_switch_in_stage1[25]), .inData_26(wire_switch_in_stage1[26]), .inData_27(wire_switch_in_stage1[27]), .inData_28(wire_switch_in_stage1[28]), .inData_29(wire_switch_in_stage1[29]), .inData_30(wire_switch_in_stage1[30]), .inData_31(wire_switch_in_stage1[31]), 
        .outData_0(wire_switch_out_stage1[0]), .outData_1(wire_switch_out_stage1[1]), .outData_2(wire_switch_out_stage1[2]), .outData_3(wire_switch_out_stage1[3]), .outData_4(wire_switch_out_stage1[4]), .outData_5(wire_switch_out_stage1[5]), .outData_6(wire_switch_out_stage1[6]), .outData_7(wire_switch_out_stage1[7]), .outData_8(wire_switch_out_stage1[8]), .outData_9(wire_switch_out_stage1[9]), .outData_10(wire_switch_out_stage1[10]), .outData_11(wire_switch_out_stage1[11]), .outData_12(wire_switch_out_stage1[12]), .outData_13(wire_switch_out_stage1[13]), .outData_14(wire_switch_out_stage1[14]), .outData_15(wire_switch_out_stage1[15]), .outData_16(wire_switch_out_stage1[16]), .outData_17(wire_switch_out_stage1[17]), .outData_18(wire_switch_out_stage1[18]), .outData_19(wire_switch_out_stage1[19]), .outData_20(wire_switch_out_stage1[20]), .outData_21(wire_switch_out_stage1[21]), .outData_22(wire_switch_out_stage1[22]), .outData_23(wire_switch_out_stage1[23]), .outData_24(wire_switch_out_stage1[24]), .outData_25(wire_switch_out_stage1[25]), .outData_26(wire_switch_out_stage1[26]), .outData_27(wire_switch_out_stage1[27]), .outData_28(wire_switch_out_stage1[28]), .outData_29(wire_switch_out_stage1[29]), .outData_30(wire_switch_out_stage1[30]), .outData_31(wire_switch_out_stage1[31]), 
        .in_start(con_in_start_stage1), .out_start(in_start_stage0), .ctrl(wire_ctrl_stage1), .clk(clk), .rst(rst));
  
  s4_wireCon_dp32_st1_R wire_stage_1(
        .inData_0(wire_switch_out_stage2[0]), .inData_1(wire_switch_out_stage2[1]), .inData_2(wire_switch_out_stage2[2]), .inData_3(wire_switch_out_stage2[3]), .inData_4(wire_switch_out_stage2[4]), .inData_5(wire_switch_out_stage2[5]), .inData_6(wire_switch_out_stage2[6]), .inData_7(wire_switch_out_stage2[7]), .inData_8(wire_switch_out_stage2[8]), .inData_9(wire_switch_out_stage2[9]), .inData_10(wire_switch_out_stage2[10]), .inData_11(wire_switch_out_stage2[11]), .inData_12(wire_switch_out_stage2[12]), .inData_13(wire_switch_out_stage2[13]), .inData_14(wire_switch_out_stage2[14]), .inData_15(wire_switch_out_stage2[15]), .inData_16(wire_switch_out_stage2[16]), .inData_17(wire_switch_out_stage2[17]), .inData_18(wire_switch_out_stage2[18]), .inData_19(wire_switch_out_stage2[19]), .inData_20(wire_switch_out_stage2[20]), .inData_21(wire_switch_out_stage2[21]), .inData_22(wire_switch_out_stage2[22]), .inData_23(wire_switch_out_stage2[23]), .inData_24(wire_switch_out_stage2[24]), .inData_25(wire_switch_out_stage2[25]), .inData_26(wire_switch_out_stage2[26]), .inData_27(wire_switch_out_stage2[27]), .inData_28(wire_switch_out_stage2[28]), .inData_29(wire_switch_out_stage2[29]), .inData_30(wire_switch_out_stage2[30]), .inData_31(wire_switch_out_stage2[31]), 
        .outData_0(wire_switch_in_stage1[0]), .outData_1(wire_switch_in_stage1[1]), .outData_2(wire_switch_in_stage1[2]), .outData_3(wire_switch_in_stage1[3]), .outData_4(wire_switch_in_stage1[4]), .outData_5(wire_switch_in_stage1[5]), .outData_6(wire_switch_in_stage1[6]), .outData_7(wire_switch_in_stage1[7]), .outData_8(wire_switch_in_stage1[8]), .outData_9(wire_switch_in_stage1[9]), .outData_10(wire_switch_in_stage1[10]), .outData_11(wire_switch_in_stage1[11]), .outData_12(wire_switch_in_stage1[12]), .outData_13(wire_switch_in_stage1[13]), .outData_14(wire_switch_in_stage1[14]), .outData_15(wire_switch_in_stage1[15]), .outData_16(wire_switch_in_stage1[16]), .outData_17(wire_switch_in_stage1[17]), .outData_18(wire_switch_in_stage1[18]), .outData_19(wire_switch_in_stage1[19]), .outData_20(wire_switch_in_stage1[20]), .outData_21(wire_switch_in_stage1[21]), .outData_22(wire_switch_in_stage1[22]), .outData_23(wire_switch_in_stage1[23]), .outData_24(wire_switch_in_stage1[24]), .outData_25(wire_switch_in_stage1[25]), .outData_26(wire_switch_in_stage1[26]), .outData_27(wire_switch_in_stage1[27]), .outData_28(wire_switch_in_stage1[28]), .outData_29(wire_switch_in_stage1[29]), .outData_30(wire_switch_in_stage1[30]), .outData_31(wire_switch_in_stage1[31]), 
        .in_start(in_start_stage1), .out_start(con_in_start_stage1), .clk(clk), .rst(rst)); 

  
  s4_switch_ctrl_dp32_st1_per0R s4_switch_ctrl_stage_1(.in_start(con_in_start_stage1),.ctrl_out(wire_ctrl_stage1),.clk(clk), .rst(rst));

  wire [DATA_WIDTH-1:0] wire_switch_in_stage0[31:0];
  wire [DATA_WIDTH-1:0] wire_switch_out_stage0[31:0];
  reg [15:0] wire_ctrl_stage0;

  s4_switches_stage_st0_0_R switch_stage_0(
        .inData_0(wire_switch_in_stage0[0]), .inData_1(wire_switch_in_stage0[1]), .inData_2(wire_switch_in_stage0[2]), .inData_3(wire_switch_in_stage0[3]), .inData_4(wire_switch_in_stage0[4]), .inData_5(wire_switch_in_stage0[5]), .inData_6(wire_switch_in_stage0[6]), .inData_7(wire_switch_in_stage0[7]), .inData_8(wire_switch_in_stage0[8]), .inData_9(wire_switch_in_stage0[9]), .inData_10(wire_switch_in_stage0[10]), .inData_11(wire_switch_in_stage0[11]), .inData_12(wire_switch_in_stage0[12]), .inData_13(wire_switch_in_stage0[13]), .inData_14(wire_switch_in_stage0[14]), .inData_15(wire_switch_in_stage0[15]), .inData_16(wire_switch_in_stage0[16]), .inData_17(wire_switch_in_stage0[17]), .inData_18(wire_switch_in_stage0[18]), .inData_19(wire_switch_in_stage0[19]), .inData_20(wire_switch_in_stage0[20]), .inData_21(wire_switch_in_stage0[21]), .inData_22(wire_switch_in_stage0[22]), .inData_23(wire_switch_in_stage0[23]), .inData_24(wire_switch_in_stage0[24]), .inData_25(wire_switch_in_stage0[25]), .inData_26(wire_switch_in_stage0[26]), .inData_27(wire_switch_in_stage0[27]), .inData_28(wire_switch_in_stage0[28]), .inData_29(wire_switch_in_stage0[29]), .inData_30(wire_switch_in_stage0[30]), .inData_31(wire_switch_in_stage0[31]), 
        .outData_0(wireOut[0]), .outData_1(wireOut[1]), .outData_2(wireOut[2]), .outData_3(wireOut[3]), .outData_4(wireOut[4]), .outData_5(wireOut[5]), .outData_6(wireOut[6]), .outData_7(wireOut[7]), .outData_8(wireOut[8]), .outData_9(wireOut[9]), .outData_10(wireOut[10]), .outData_11(wireOut[11]), .outData_12(wireOut[12]), .outData_13(wireOut[13]), .outData_14(wireOut[14]), .outData_15(wireOut[15]), .outData_16(wireOut[16]), .outData_17(wireOut[17]), .outData_18(wireOut[18]), .outData_19(wireOut[19]), .outData_20(wireOut[20]), .outData_21(wireOut[21]), .outData_22(wireOut[22]), .outData_23(wireOut[23]), .outData_24(wireOut[24]), .outData_25(wireOut[25]), .outData_26(wireOut[26]), .outData_27(wireOut[27]), .outData_28(wireOut[28]), .outData_29(wireOut[29]), .outData_30(wireOut[30]), .outData_31(wireOut[31]), 
        .in_start(con_in_start_stage0), .out_start(out_start_w), .ctrl(wire_ctrl_stage0), .clk(clk), .rst(rst));
  
  s4_wireCon_dp32_st0_R wire_stage_0(
        .inData_0(wire_switch_out_stage1[0]), .inData_1(wire_switch_out_stage1[1]), .inData_2(wire_switch_out_stage1[2]), .inData_3(wire_switch_out_stage1[3]), .inData_4(wire_switch_out_stage1[4]), .inData_5(wire_switch_out_stage1[5]), .inData_6(wire_switch_out_stage1[6]), .inData_7(wire_switch_out_stage1[7]), .inData_8(wire_switch_out_stage1[8]), .inData_9(wire_switch_out_stage1[9]), .inData_10(wire_switch_out_stage1[10]), .inData_11(wire_switch_out_stage1[11]), .inData_12(wire_switch_out_stage1[12]), .inData_13(wire_switch_out_stage1[13]), .inData_14(wire_switch_out_stage1[14]), .inData_15(wire_switch_out_stage1[15]), .inData_16(wire_switch_out_stage1[16]), .inData_17(wire_switch_out_stage1[17]), .inData_18(wire_switch_out_stage1[18]), .inData_19(wire_switch_out_stage1[19]), .inData_20(wire_switch_out_stage1[20]), .inData_21(wire_switch_out_stage1[21]), .inData_22(wire_switch_out_stage1[22]), .inData_23(wire_switch_out_stage1[23]), .inData_24(wire_switch_out_stage1[24]), .inData_25(wire_switch_out_stage1[25]), .inData_26(wire_switch_out_stage1[26]), .inData_27(wire_switch_out_stage1[27]), .inData_28(wire_switch_out_stage1[28]), .inData_29(wire_switch_out_stage1[29]), .inData_30(wire_switch_out_stage1[30]), .inData_31(wire_switch_out_stage1[31]), 
        .outData_0(wire_switch_in_stage0[0]), .outData_1(wire_switch_in_stage0[1]), .outData_2(wire_switch_in_stage0[2]), .outData_3(wire_switch_in_stage0[3]), .outData_4(wire_switch_in_stage0[4]), .outData_5(wire_switch_in_stage0[5]), .outData_6(wire_switch_in_stage0[6]), .outData_7(wire_switch_in_stage0[7]), .outData_8(wire_switch_in_stage0[8]), .outData_9(wire_switch_in_stage0[9]), .outData_10(wire_switch_in_stage0[10]), .outData_11(wire_switch_in_stage0[11]), .outData_12(wire_switch_in_stage0[12]), .outData_13(wire_switch_in_stage0[13]), .outData_14(wire_switch_in_stage0[14]), .outData_15(wire_switch_in_stage0[15]), .outData_16(wire_switch_in_stage0[16]), .outData_17(wire_switch_in_stage0[17]), .outData_18(wire_switch_in_stage0[18]), .outData_19(wire_switch_in_stage0[19]), .outData_20(wire_switch_in_stage0[20]), .outData_21(wire_switch_in_stage0[21]), .outData_22(wire_switch_in_stage0[22]), .outData_23(wire_switch_in_stage0[23]), .outData_24(wire_switch_in_stage0[24]), .outData_25(wire_switch_in_stage0[25]), .outData_26(wire_switch_in_stage0[26]), .outData_27(wire_switch_in_stage0[27]), .outData_28(wire_switch_in_stage0[28]), .outData_29(wire_switch_in_stage0[29]), .outData_30(wire_switch_in_stage0[30]), .outData_31(wire_switch_in_stage0[31]), 
        .in_start(in_start_stage0), .out_start(con_in_start_stage0), .clk(clk), .rst(rst)); 

  
  s4_switch_ctrl_dp32_st0_per0R s4_switch_ctrl_stage_0(.in_start(con_in_start_stage0),.ctrl_out(wire_ctrl_stage0),.clk(clk), .rst(rst));

  
  assign in_start_stage4 = in_start;    
  assign outData_0 = wireOut[0];    
  assign outData_1 = wireOut[1];    
  assign outData_2 = wireOut[2];    
  assign outData_3 = wireOut[3];    
  assign outData_4 = wireOut[4];    
  assign outData_5 = wireOut[5];    
  assign outData_6 = wireOut[6];    
  assign outData_7 = wireOut[7];    
  assign outData_8 = wireOut[8];    
  assign outData_9 = wireOut[9];    
  assign outData_10 = wireOut[10];    
  assign outData_11 = wireOut[11];    
  assign outData_12 = wireOut[12];    
  assign outData_13 = wireOut[13];    
  assign outData_14 = wireOut[14];    
  assign outData_15 = wireOut[15];    
  assign outData_16 = wireOut[16];    
  assign outData_17 = wireOut[17];    
  assign outData_18 = wireOut[18];    
  assign outData_19 = wireOut[19];    
  assign outData_20 = wireOut[20];    
  assign outData_21 = wireOut[21];    
  assign outData_22 = wireOut[22];    
  assign outData_23 = wireOut[23];    
  assign outData_24 = wireOut[24];    
  assign outData_25 = wireOut[25];    
  assign outData_26 = wireOut[26];    
  assign outData_27 = wireOut[27];    
  assign outData_28 = wireOut[28];    
  assign outData_29 = wireOut[29];    
  assign outData_30 = wireOut[30];    
  assign outData_31 = wireOut[31];    
  assign out_start = out_start_w;    
  
endmodule                        


module  s4_addr_rom_dp32_mem0(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [4:0] addr;                        
  output reg [4:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 5'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          5'b00000: data <= 5'b00000; 
          5'b00001: data <= 5'b00001; 
          5'b00010: data <= 5'b00010; 
          5'b00011: data <= 5'b00011; 
          5'b00100: data <= 5'b00100; 
          5'b00101: data <= 5'b00101; 
          5'b00110: data <= 5'b00110; 
          5'b00111: data <= 5'b00111; 
          5'b01000: data <= 5'b01000; 
          5'b01001: data <= 5'b01001; 
          5'b01010: data <= 5'b01010; 
          5'b01011: data <= 5'b01011; 
          5'b01100: data <= 5'b01100; 
          5'b01101: data <= 5'b01101; 
          5'b01110: data <= 5'b01110; 
          5'b01111: data <= 5'b01111; 
          5'b10000: data <= 5'b10000; 
          5'b10001: data <= 5'b10001; 
          5'b10010: data <= 5'b10010; 
          5'b10011: data <= 5'b10011; 
          5'b10100: data <= 5'b10100; 
          5'b10101: data <= 5'b10101; 
          5'b10110: data <= 5'b10110; 
          5'b10111: data <= 5'b10111; 
          5'b11000: data <= 5'b11000; 
          5'b11001: data <= 5'b11001; 
          5'b11010: data <= 5'b11010; 
          5'b11011: data <= 5'b11011; 
          5'b11100: data <= 5'b11100; 
          5'b11101: data <= 5'b11101; 
          5'b11110: data <= 5'b11110; 
          5'b11111: data <= 5'b11111; 
          default: data <= 5'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem1(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b010000; 
          6'b000001: data <= 6'b010001; 
          6'b000010: data <= 6'b010010; 
          6'b000011: data <= 6'b010011; 
          6'b000100: data <= 6'b010100; 
          6'b000101: data <= 6'b010101; 
          6'b000110: data <= 6'b010110; 
          6'b000111: data <= 6'b010111; 
          6'b001000: data <= 6'b011000; 
          6'b001001: data <= 6'b011001; 
          6'b001010: data <= 6'b011010; 
          6'b001011: data <= 6'b011011; 
          6'b001100: data <= 6'b011100; 
          6'b001101: data <= 6'b011101; 
          6'b001110: data <= 6'b011110; 
          6'b001111: data <= 6'b011111; 
          6'b010000: data <= 6'b000000; 
          6'b010001: data <= 6'b000001; 
          6'b010010: data <= 6'b000010; 
          6'b010011: data <= 6'b000011; 
          6'b010100: data <= 6'b000100; 
          6'b010101: data <= 6'b000101; 
          6'b010110: data <= 6'b000110; 
          6'b010111: data <= 6'b000111; 
          6'b011000: data <= 6'b001000; 
          6'b011001: data <= 6'b001001; 
          6'b011010: data <= 6'b001010; 
          6'b011011: data <= 6'b001011; 
          6'b011100: data <= 6'b001100; 
          6'b011101: data <= 6'b001101; 
          6'b011110: data <= 6'b001110; 
          6'b011111: data <= 6'b001111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem2(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b001000; 
          6'b000001: data <= 6'b001001; 
          6'b000010: data <= 6'b001010; 
          6'b000011: data <= 6'b001011; 
          6'b000100: data <= 6'b001100; 
          6'b000101: data <= 6'b001101; 
          6'b000110: data <= 6'b001110; 
          6'b000111: data <= 6'b001111; 
          6'b001000: data <= 6'b000000; 
          6'b001001: data <= 6'b000001; 
          6'b001010: data <= 6'b000010; 
          6'b001011: data <= 6'b000011; 
          6'b001100: data <= 6'b000100; 
          6'b001101: data <= 6'b000101; 
          6'b001110: data <= 6'b000110; 
          6'b001111: data <= 6'b000111; 
          6'b010000: data <= 6'b011000; 
          6'b010001: data <= 6'b011001; 
          6'b010010: data <= 6'b011010; 
          6'b010011: data <= 6'b011011; 
          6'b010100: data <= 6'b011100; 
          6'b010101: data <= 6'b011101; 
          6'b010110: data <= 6'b011110; 
          6'b010111: data <= 6'b011111; 
          6'b011000: data <= 6'b010000; 
          6'b011001: data <= 6'b010001; 
          6'b011010: data <= 6'b010010; 
          6'b011011: data <= 6'b010011; 
          6'b011100: data <= 6'b010100; 
          6'b011101: data <= 6'b010101; 
          6'b011110: data <= 6'b010110; 
          6'b011111: data <= 6'b010111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem3(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b011000; 
          6'b000001: data <= 6'b011001; 
          6'b000010: data <= 6'b011010; 
          6'b000011: data <= 6'b011011; 
          6'b000100: data <= 6'b011100; 
          6'b000101: data <= 6'b011101; 
          6'b000110: data <= 6'b011110; 
          6'b000111: data <= 6'b011111; 
          6'b001000: data <= 6'b010000; 
          6'b001001: data <= 6'b010001; 
          6'b001010: data <= 6'b010010; 
          6'b001011: data <= 6'b010011; 
          6'b001100: data <= 6'b010100; 
          6'b001101: data <= 6'b010101; 
          6'b001110: data <= 6'b010110; 
          6'b001111: data <= 6'b010111; 
          6'b010000: data <= 6'b001000; 
          6'b010001: data <= 6'b001001; 
          6'b010010: data <= 6'b001010; 
          6'b010011: data <= 6'b001011; 
          6'b010100: data <= 6'b001100; 
          6'b010101: data <= 6'b001101; 
          6'b010110: data <= 6'b001110; 
          6'b010111: data <= 6'b001111; 
          6'b011000: data <= 6'b000000; 
          6'b011001: data <= 6'b000001; 
          6'b011010: data <= 6'b000010; 
          6'b011011: data <= 6'b000011; 
          6'b011100: data <= 6'b000100; 
          6'b011101: data <= 6'b000101; 
          6'b011110: data <= 6'b000110; 
          6'b011111: data <= 6'b000111; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem4(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000100; 
          6'b000001: data <= 6'b000101; 
          6'b000010: data <= 6'b000110; 
          6'b000011: data <= 6'b000111; 
          6'b000100: data <= 6'b000000; 
          6'b000101: data <= 6'b000001; 
          6'b000110: data <= 6'b000010; 
          6'b000111: data <= 6'b000011; 
          6'b001000: data <= 6'b001100; 
          6'b001001: data <= 6'b001101; 
          6'b001010: data <= 6'b001110; 
          6'b001011: data <= 6'b001111; 
          6'b001100: data <= 6'b001000; 
          6'b001101: data <= 6'b001001; 
          6'b001110: data <= 6'b001010; 
          6'b001111: data <= 6'b001011; 
          6'b010000: data <= 6'b010100; 
          6'b010001: data <= 6'b010101; 
          6'b010010: data <= 6'b010110; 
          6'b010011: data <= 6'b010111; 
          6'b010100: data <= 6'b010000; 
          6'b010101: data <= 6'b010001; 
          6'b010110: data <= 6'b010010; 
          6'b010111: data <= 6'b010011; 
          6'b011000: data <= 6'b011100; 
          6'b011001: data <= 6'b011101; 
          6'b011010: data <= 6'b011110; 
          6'b011011: data <= 6'b011111; 
          6'b011100: data <= 6'b011000; 
          6'b011101: data <= 6'b011001; 
          6'b011110: data <= 6'b011010; 
          6'b011111: data <= 6'b011011; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem5(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b010100; 
          6'b000001: data <= 6'b010101; 
          6'b000010: data <= 6'b010110; 
          6'b000011: data <= 6'b010111; 
          6'b000100: data <= 6'b010000; 
          6'b000101: data <= 6'b010001; 
          6'b000110: data <= 6'b010010; 
          6'b000111: data <= 6'b010011; 
          6'b001000: data <= 6'b011100; 
          6'b001001: data <= 6'b011101; 
          6'b001010: data <= 6'b011110; 
          6'b001011: data <= 6'b011111; 
          6'b001100: data <= 6'b011000; 
          6'b001101: data <= 6'b011001; 
          6'b001110: data <= 6'b011010; 
          6'b001111: data <= 6'b011011; 
          6'b010000: data <= 6'b000100; 
          6'b010001: data <= 6'b000101; 
          6'b010010: data <= 6'b000110; 
          6'b010011: data <= 6'b000111; 
          6'b010100: data <= 6'b000000; 
          6'b010101: data <= 6'b000001; 
          6'b010110: data <= 6'b000010; 
          6'b010111: data <= 6'b000011; 
          6'b011000: data <= 6'b001100; 
          6'b011001: data <= 6'b001101; 
          6'b011010: data <= 6'b001110; 
          6'b011011: data <= 6'b001111; 
          6'b011100: data <= 6'b001000; 
          6'b011101: data <= 6'b001001; 
          6'b011110: data <= 6'b001010; 
          6'b011111: data <= 6'b001011; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem6(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b001100; 
          6'b000001: data <= 6'b001101; 
          6'b000010: data <= 6'b001110; 
          6'b000011: data <= 6'b001111; 
          6'b000100: data <= 6'b001000; 
          6'b000101: data <= 6'b001001; 
          6'b000110: data <= 6'b001010; 
          6'b000111: data <= 6'b001011; 
          6'b001000: data <= 6'b000100; 
          6'b001001: data <= 6'b000101; 
          6'b001010: data <= 6'b000110; 
          6'b001011: data <= 6'b000111; 
          6'b001100: data <= 6'b000000; 
          6'b001101: data <= 6'b000001; 
          6'b001110: data <= 6'b000010; 
          6'b001111: data <= 6'b000011; 
          6'b010000: data <= 6'b011100; 
          6'b010001: data <= 6'b011101; 
          6'b010010: data <= 6'b011110; 
          6'b010011: data <= 6'b011111; 
          6'b010100: data <= 6'b011000; 
          6'b010101: data <= 6'b011001; 
          6'b010110: data <= 6'b011010; 
          6'b010111: data <= 6'b011011; 
          6'b011000: data <= 6'b010100; 
          6'b011001: data <= 6'b010101; 
          6'b011010: data <= 6'b010110; 
          6'b011011: data <= 6'b010111; 
          6'b011100: data <= 6'b010000; 
          6'b011101: data <= 6'b010001; 
          6'b011110: data <= 6'b010010; 
          6'b011111: data <= 6'b010011; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem7(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b011100; 
          6'b000001: data <= 6'b011101; 
          6'b000010: data <= 6'b011110; 
          6'b000011: data <= 6'b011111; 
          6'b000100: data <= 6'b011000; 
          6'b000101: data <= 6'b011001; 
          6'b000110: data <= 6'b011010; 
          6'b000111: data <= 6'b011011; 
          6'b001000: data <= 6'b010100; 
          6'b001001: data <= 6'b010101; 
          6'b001010: data <= 6'b010110; 
          6'b001011: data <= 6'b010111; 
          6'b001100: data <= 6'b010000; 
          6'b001101: data <= 6'b010001; 
          6'b001110: data <= 6'b010010; 
          6'b001111: data <= 6'b010011; 
          6'b010000: data <= 6'b001100; 
          6'b010001: data <= 6'b001101; 
          6'b010010: data <= 6'b001110; 
          6'b010011: data <= 6'b001111; 
          6'b010100: data <= 6'b001000; 
          6'b010101: data <= 6'b001001; 
          6'b010110: data <= 6'b001010; 
          6'b010111: data <= 6'b001011; 
          6'b011000: data <= 6'b000100; 
          6'b011001: data <= 6'b000101; 
          6'b011010: data <= 6'b000110; 
          6'b011011: data <= 6'b000111; 
          6'b011100: data <= 6'b000000; 
          6'b011101: data <= 6'b000001; 
          6'b011110: data <= 6'b000010; 
          6'b011111: data <= 6'b000011; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem8(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000010; 
          6'b000001: data <= 6'b000011; 
          6'b000010: data <= 6'b000000; 
          6'b000011: data <= 6'b000001; 
          6'b000100: data <= 6'b000110; 
          6'b000101: data <= 6'b000111; 
          6'b000110: data <= 6'b000100; 
          6'b000111: data <= 6'b000101; 
          6'b001000: data <= 6'b001010; 
          6'b001001: data <= 6'b001011; 
          6'b001010: data <= 6'b001000; 
          6'b001011: data <= 6'b001001; 
          6'b001100: data <= 6'b001110; 
          6'b001101: data <= 6'b001111; 
          6'b001110: data <= 6'b001100; 
          6'b001111: data <= 6'b001101; 
          6'b010000: data <= 6'b010010; 
          6'b010001: data <= 6'b010011; 
          6'b010010: data <= 6'b010000; 
          6'b010011: data <= 6'b010001; 
          6'b010100: data <= 6'b010110; 
          6'b010101: data <= 6'b010111; 
          6'b010110: data <= 6'b010100; 
          6'b010111: data <= 6'b010101; 
          6'b011000: data <= 6'b011010; 
          6'b011001: data <= 6'b011011; 
          6'b011010: data <= 6'b011000; 
          6'b011011: data <= 6'b011001; 
          6'b011100: data <= 6'b011110; 
          6'b011101: data <= 6'b011111; 
          6'b011110: data <= 6'b011100; 
          6'b011111: data <= 6'b011101; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem9(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b010010; 
          6'b000001: data <= 6'b010011; 
          6'b000010: data <= 6'b010000; 
          6'b000011: data <= 6'b010001; 
          6'b000100: data <= 6'b010110; 
          6'b000101: data <= 6'b010111; 
          6'b000110: data <= 6'b010100; 
          6'b000111: data <= 6'b010101; 
          6'b001000: data <= 6'b011010; 
          6'b001001: data <= 6'b011011; 
          6'b001010: data <= 6'b011000; 
          6'b001011: data <= 6'b011001; 
          6'b001100: data <= 6'b011110; 
          6'b001101: data <= 6'b011111; 
          6'b001110: data <= 6'b011100; 
          6'b001111: data <= 6'b011101; 
          6'b010000: data <= 6'b000010; 
          6'b010001: data <= 6'b000011; 
          6'b010010: data <= 6'b000000; 
          6'b010011: data <= 6'b000001; 
          6'b010100: data <= 6'b000110; 
          6'b010101: data <= 6'b000111; 
          6'b010110: data <= 6'b000100; 
          6'b010111: data <= 6'b000101; 
          6'b011000: data <= 6'b001010; 
          6'b011001: data <= 6'b001011; 
          6'b011010: data <= 6'b001000; 
          6'b011011: data <= 6'b001001; 
          6'b011100: data <= 6'b001110; 
          6'b011101: data <= 6'b001111; 
          6'b011110: data <= 6'b001100; 
          6'b011111: data <= 6'b001101; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem10(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b001010; 
          6'b000001: data <= 6'b001011; 
          6'b000010: data <= 6'b001000; 
          6'b000011: data <= 6'b001001; 
          6'b000100: data <= 6'b001110; 
          6'b000101: data <= 6'b001111; 
          6'b000110: data <= 6'b001100; 
          6'b000111: data <= 6'b001101; 
          6'b001000: data <= 6'b000010; 
          6'b001001: data <= 6'b000011; 
          6'b001010: data <= 6'b000000; 
          6'b001011: data <= 6'b000001; 
          6'b001100: data <= 6'b000110; 
          6'b001101: data <= 6'b000111; 
          6'b001110: data <= 6'b000100; 
          6'b001111: data <= 6'b000101; 
          6'b010000: data <= 6'b011010; 
          6'b010001: data <= 6'b011011; 
          6'b010010: data <= 6'b011000; 
          6'b010011: data <= 6'b011001; 
          6'b010100: data <= 6'b011110; 
          6'b010101: data <= 6'b011111; 
          6'b010110: data <= 6'b011100; 
          6'b010111: data <= 6'b011101; 
          6'b011000: data <= 6'b010010; 
          6'b011001: data <= 6'b010011; 
          6'b011010: data <= 6'b010000; 
          6'b011011: data <= 6'b010001; 
          6'b011100: data <= 6'b010110; 
          6'b011101: data <= 6'b010111; 
          6'b011110: data <= 6'b010100; 
          6'b011111: data <= 6'b010101; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem11(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b011010; 
          6'b000001: data <= 6'b011011; 
          6'b000010: data <= 6'b011000; 
          6'b000011: data <= 6'b011001; 
          6'b000100: data <= 6'b011110; 
          6'b000101: data <= 6'b011111; 
          6'b000110: data <= 6'b011100; 
          6'b000111: data <= 6'b011101; 
          6'b001000: data <= 6'b010010; 
          6'b001001: data <= 6'b010011; 
          6'b001010: data <= 6'b010000; 
          6'b001011: data <= 6'b010001; 
          6'b001100: data <= 6'b010110; 
          6'b001101: data <= 6'b010111; 
          6'b001110: data <= 6'b010100; 
          6'b001111: data <= 6'b010101; 
          6'b010000: data <= 6'b001010; 
          6'b010001: data <= 6'b001011; 
          6'b010010: data <= 6'b001000; 
          6'b010011: data <= 6'b001001; 
          6'b010100: data <= 6'b001110; 
          6'b010101: data <= 6'b001111; 
          6'b010110: data <= 6'b001100; 
          6'b010111: data <= 6'b001101; 
          6'b011000: data <= 6'b000010; 
          6'b011001: data <= 6'b000011; 
          6'b011010: data <= 6'b000000; 
          6'b011011: data <= 6'b000001; 
          6'b011100: data <= 6'b000110; 
          6'b011101: data <= 6'b000111; 
          6'b011110: data <= 6'b000100; 
          6'b011111: data <= 6'b000101; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem12(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000110; 
          6'b000001: data <= 6'b000111; 
          6'b000010: data <= 6'b000100; 
          6'b000011: data <= 6'b000101; 
          6'b000100: data <= 6'b000010; 
          6'b000101: data <= 6'b000011; 
          6'b000110: data <= 6'b000000; 
          6'b000111: data <= 6'b000001; 
          6'b001000: data <= 6'b001110; 
          6'b001001: data <= 6'b001111; 
          6'b001010: data <= 6'b001100; 
          6'b001011: data <= 6'b001101; 
          6'b001100: data <= 6'b001010; 
          6'b001101: data <= 6'b001011; 
          6'b001110: data <= 6'b001000; 
          6'b001111: data <= 6'b001001; 
          6'b010000: data <= 6'b010110; 
          6'b010001: data <= 6'b010111; 
          6'b010010: data <= 6'b010100; 
          6'b010011: data <= 6'b010101; 
          6'b010100: data <= 6'b010010; 
          6'b010101: data <= 6'b010011; 
          6'b010110: data <= 6'b010000; 
          6'b010111: data <= 6'b010001; 
          6'b011000: data <= 6'b011110; 
          6'b011001: data <= 6'b011111; 
          6'b011010: data <= 6'b011100; 
          6'b011011: data <= 6'b011101; 
          6'b011100: data <= 6'b011010; 
          6'b011101: data <= 6'b011011; 
          6'b011110: data <= 6'b011000; 
          6'b011111: data <= 6'b011001; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem13(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b010110; 
          6'b000001: data <= 6'b010111; 
          6'b000010: data <= 6'b010100; 
          6'b000011: data <= 6'b010101; 
          6'b000100: data <= 6'b010010; 
          6'b000101: data <= 6'b010011; 
          6'b000110: data <= 6'b010000; 
          6'b000111: data <= 6'b010001; 
          6'b001000: data <= 6'b011110; 
          6'b001001: data <= 6'b011111; 
          6'b001010: data <= 6'b011100; 
          6'b001011: data <= 6'b011101; 
          6'b001100: data <= 6'b011010; 
          6'b001101: data <= 6'b011011; 
          6'b001110: data <= 6'b011000; 
          6'b001111: data <= 6'b011001; 
          6'b010000: data <= 6'b000110; 
          6'b010001: data <= 6'b000111; 
          6'b010010: data <= 6'b000100; 
          6'b010011: data <= 6'b000101; 
          6'b010100: data <= 6'b000010; 
          6'b010101: data <= 6'b000011; 
          6'b010110: data <= 6'b000000; 
          6'b010111: data <= 6'b000001; 
          6'b011000: data <= 6'b001110; 
          6'b011001: data <= 6'b001111; 
          6'b011010: data <= 6'b001100; 
          6'b011011: data <= 6'b001101; 
          6'b011100: data <= 6'b001010; 
          6'b011101: data <= 6'b001011; 
          6'b011110: data <= 6'b001000; 
          6'b011111: data <= 6'b001001; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem14(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b001110; 
          6'b000001: data <= 6'b001111; 
          6'b000010: data <= 6'b001100; 
          6'b000011: data <= 6'b001101; 
          6'b000100: data <= 6'b001010; 
          6'b000101: data <= 6'b001011; 
          6'b000110: data <= 6'b001000; 
          6'b000111: data <= 6'b001001; 
          6'b001000: data <= 6'b000110; 
          6'b001001: data <= 6'b000111; 
          6'b001010: data <= 6'b000100; 
          6'b001011: data <= 6'b000101; 
          6'b001100: data <= 6'b000010; 
          6'b001101: data <= 6'b000011; 
          6'b001110: data <= 6'b000000; 
          6'b001111: data <= 6'b000001; 
          6'b010000: data <= 6'b011110; 
          6'b010001: data <= 6'b011111; 
          6'b010010: data <= 6'b011100; 
          6'b010011: data <= 6'b011101; 
          6'b010100: data <= 6'b011010; 
          6'b010101: data <= 6'b011011; 
          6'b010110: data <= 6'b011000; 
          6'b010111: data <= 6'b011001; 
          6'b011000: data <= 6'b010110; 
          6'b011001: data <= 6'b010111; 
          6'b011010: data <= 6'b010100; 
          6'b011011: data <= 6'b010101; 
          6'b011100: data <= 6'b010010; 
          6'b011101: data <= 6'b010011; 
          6'b011110: data <= 6'b010000; 
          6'b011111: data <= 6'b010001; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem15(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b011110; 
          6'b000001: data <= 6'b011111; 
          6'b000010: data <= 6'b011100; 
          6'b000011: data <= 6'b011101; 
          6'b000100: data <= 6'b011010; 
          6'b000101: data <= 6'b011011; 
          6'b000110: data <= 6'b011000; 
          6'b000111: data <= 6'b011001; 
          6'b001000: data <= 6'b010110; 
          6'b001001: data <= 6'b010111; 
          6'b001010: data <= 6'b010100; 
          6'b001011: data <= 6'b010101; 
          6'b001100: data <= 6'b010010; 
          6'b001101: data <= 6'b010011; 
          6'b001110: data <= 6'b010000; 
          6'b001111: data <= 6'b010001; 
          6'b010000: data <= 6'b001110; 
          6'b010001: data <= 6'b001111; 
          6'b010010: data <= 6'b001100; 
          6'b010011: data <= 6'b001101; 
          6'b010100: data <= 6'b001010; 
          6'b010101: data <= 6'b001011; 
          6'b010110: data <= 6'b001000; 
          6'b010111: data <= 6'b001001; 
          6'b011000: data <= 6'b000110; 
          6'b011001: data <= 6'b000111; 
          6'b011010: data <= 6'b000100; 
          6'b011011: data <= 6'b000101; 
          6'b011100: data <= 6'b000010; 
          6'b011101: data <= 6'b000011; 
          6'b011110: data <= 6'b000000; 
          6'b011111: data <= 6'b000001; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem16(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000001; 
          6'b000001: data <= 6'b000000; 
          6'b000010: data <= 6'b000011; 
          6'b000011: data <= 6'b000010; 
          6'b000100: data <= 6'b000101; 
          6'b000101: data <= 6'b000100; 
          6'b000110: data <= 6'b000111; 
          6'b000111: data <= 6'b000110; 
          6'b001000: data <= 6'b001001; 
          6'b001001: data <= 6'b001000; 
          6'b001010: data <= 6'b001011; 
          6'b001011: data <= 6'b001010; 
          6'b001100: data <= 6'b001101; 
          6'b001101: data <= 6'b001100; 
          6'b001110: data <= 6'b001111; 
          6'b001111: data <= 6'b001110; 
          6'b010000: data <= 6'b010001; 
          6'b010001: data <= 6'b010000; 
          6'b010010: data <= 6'b010011; 
          6'b010011: data <= 6'b010010; 
          6'b010100: data <= 6'b010101; 
          6'b010101: data <= 6'b010100; 
          6'b010110: data <= 6'b010111; 
          6'b010111: data <= 6'b010110; 
          6'b011000: data <= 6'b011001; 
          6'b011001: data <= 6'b011000; 
          6'b011010: data <= 6'b011011; 
          6'b011011: data <= 6'b011010; 
          6'b011100: data <= 6'b011101; 
          6'b011101: data <= 6'b011100; 
          6'b011110: data <= 6'b011111; 
          6'b011111: data <= 6'b011110; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem17(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b010001; 
          6'b000001: data <= 6'b010000; 
          6'b000010: data <= 6'b010011; 
          6'b000011: data <= 6'b010010; 
          6'b000100: data <= 6'b010101; 
          6'b000101: data <= 6'b010100; 
          6'b000110: data <= 6'b010111; 
          6'b000111: data <= 6'b010110; 
          6'b001000: data <= 6'b011001; 
          6'b001001: data <= 6'b011000; 
          6'b001010: data <= 6'b011011; 
          6'b001011: data <= 6'b011010; 
          6'b001100: data <= 6'b011101; 
          6'b001101: data <= 6'b011100; 
          6'b001110: data <= 6'b011111; 
          6'b001111: data <= 6'b011110; 
          6'b010000: data <= 6'b000001; 
          6'b010001: data <= 6'b000000; 
          6'b010010: data <= 6'b000011; 
          6'b010011: data <= 6'b000010; 
          6'b010100: data <= 6'b000101; 
          6'b010101: data <= 6'b000100; 
          6'b010110: data <= 6'b000111; 
          6'b010111: data <= 6'b000110; 
          6'b011000: data <= 6'b001001; 
          6'b011001: data <= 6'b001000; 
          6'b011010: data <= 6'b001011; 
          6'b011011: data <= 6'b001010; 
          6'b011100: data <= 6'b001101; 
          6'b011101: data <= 6'b001100; 
          6'b011110: data <= 6'b001111; 
          6'b011111: data <= 6'b001110; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem18(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b001001; 
          6'b000001: data <= 6'b001000; 
          6'b000010: data <= 6'b001011; 
          6'b000011: data <= 6'b001010; 
          6'b000100: data <= 6'b001101; 
          6'b000101: data <= 6'b001100; 
          6'b000110: data <= 6'b001111; 
          6'b000111: data <= 6'b001110; 
          6'b001000: data <= 6'b000001; 
          6'b001001: data <= 6'b000000; 
          6'b001010: data <= 6'b000011; 
          6'b001011: data <= 6'b000010; 
          6'b001100: data <= 6'b000101; 
          6'b001101: data <= 6'b000100; 
          6'b001110: data <= 6'b000111; 
          6'b001111: data <= 6'b000110; 
          6'b010000: data <= 6'b011001; 
          6'b010001: data <= 6'b011000; 
          6'b010010: data <= 6'b011011; 
          6'b010011: data <= 6'b011010; 
          6'b010100: data <= 6'b011101; 
          6'b010101: data <= 6'b011100; 
          6'b010110: data <= 6'b011111; 
          6'b010111: data <= 6'b011110; 
          6'b011000: data <= 6'b010001; 
          6'b011001: data <= 6'b010000; 
          6'b011010: data <= 6'b010011; 
          6'b011011: data <= 6'b010010; 
          6'b011100: data <= 6'b010101; 
          6'b011101: data <= 6'b010100; 
          6'b011110: data <= 6'b010111; 
          6'b011111: data <= 6'b010110; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem19(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b011001; 
          6'b000001: data <= 6'b011000; 
          6'b000010: data <= 6'b011011; 
          6'b000011: data <= 6'b011010; 
          6'b000100: data <= 6'b011101; 
          6'b000101: data <= 6'b011100; 
          6'b000110: data <= 6'b011111; 
          6'b000111: data <= 6'b011110; 
          6'b001000: data <= 6'b010001; 
          6'b001001: data <= 6'b010000; 
          6'b001010: data <= 6'b010011; 
          6'b001011: data <= 6'b010010; 
          6'b001100: data <= 6'b010101; 
          6'b001101: data <= 6'b010100; 
          6'b001110: data <= 6'b010111; 
          6'b001111: data <= 6'b010110; 
          6'b010000: data <= 6'b001001; 
          6'b010001: data <= 6'b001000; 
          6'b010010: data <= 6'b001011; 
          6'b010011: data <= 6'b001010; 
          6'b010100: data <= 6'b001101; 
          6'b010101: data <= 6'b001100; 
          6'b010110: data <= 6'b001111; 
          6'b010111: data <= 6'b001110; 
          6'b011000: data <= 6'b000001; 
          6'b011001: data <= 6'b000000; 
          6'b011010: data <= 6'b000011; 
          6'b011011: data <= 6'b000010; 
          6'b011100: data <= 6'b000101; 
          6'b011101: data <= 6'b000100; 
          6'b011110: data <= 6'b000111; 
          6'b011111: data <= 6'b000110; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem20(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000101; 
          6'b000001: data <= 6'b000100; 
          6'b000010: data <= 6'b000111; 
          6'b000011: data <= 6'b000110; 
          6'b000100: data <= 6'b000001; 
          6'b000101: data <= 6'b000000; 
          6'b000110: data <= 6'b000011; 
          6'b000111: data <= 6'b000010; 
          6'b001000: data <= 6'b001101; 
          6'b001001: data <= 6'b001100; 
          6'b001010: data <= 6'b001111; 
          6'b001011: data <= 6'b001110; 
          6'b001100: data <= 6'b001001; 
          6'b001101: data <= 6'b001000; 
          6'b001110: data <= 6'b001011; 
          6'b001111: data <= 6'b001010; 
          6'b010000: data <= 6'b010101; 
          6'b010001: data <= 6'b010100; 
          6'b010010: data <= 6'b010111; 
          6'b010011: data <= 6'b010110; 
          6'b010100: data <= 6'b010001; 
          6'b010101: data <= 6'b010000; 
          6'b010110: data <= 6'b010011; 
          6'b010111: data <= 6'b010010; 
          6'b011000: data <= 6'b011101; 
          6'b011001: data <= 6'b011100; 
          6'b011010: data <= 6'b011111; 
          6'b011011: data <= 6'b011110; 
          6'b011100: data <= 6'b011001; 
          6'b011101: data <= 6'b011000; 
          6'b011110: data <= 6'b011011; 
          6'b011111: data <= 6'b011010; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem21(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b010101; 
          6'b000001: data <= 6'b010100; 
          6'b000010: data <= 6'b010111; 
          6'b000011: data <= 6'b010110; 
          6'b000100: data <= 6'b010001; 
          6'b000101: data <= 6'b010000; 
          6'b000110: data <= 6'b010011; 
          6'b000111: data <= 6'b010010; 
          6'b001000: data <= 6'b011101; 
          6'b001001: data <= 6'b011100; 
          6'b001010: data <= 6'b011111; 
          6'b001011: data <= 6'b011110; 
          6'b001100: data <= 6'b011001; 
          6'b001101: data <= 6'b011000; 
          6'b001110: data <= 6'b011011; 
          6'b001111: data <= 6'b011010; 
          6'b010000: data <= 6'b000101; 
          6'b010001: data <= 6'b000100; 
          6'b010010: data <= 6'b000111; 
          6'b010011: data <= 6'b000110; 
          6'b010100: data <= 6'b000001; 
          6'b010101: data <= 6'b000000; 
          6'b010110: data <= 6'b000011; 
          6'b010111: data <= 6'b000010; 
          6'b011000: data <= 6'b001101; 
          6'b011001: data <= 6'b001100; 
          6'b011010: data <= 6'b001111; 
          6'b011011: data <= 6'b001110; 
          6'b011100: data <= 6'b001001; 
          6'b011101: data <= 6'b001000; 
          6'b011110: data <= 6'b001011; 
          6'b011111: data <= 6'b001010; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem22(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b001101; 
          6'b000001: data <= 6'b001100; 
          6'b000010: data <= 6'b001111; 
          6'b000011: data <= 6'b001110; 
          6'b000100: data <= 6'b001001; 
          6'b000101: data <= 6'b001000; 
          6'b000110: data <= 6'b001011; 
          6'b000111: data <= 6'b001010; 
          6'b001000: data <= 6'b000101; 
          6'b001001: data <= 6'b000100; 
          6'b001010: data <= 6'b000111; 
          6'b001011: data <= 6'b000110; 
          6'b001100: data <= 6'b000001; 
          6'b001101: data <= 6'b000000; 
          6'b001110: data <= 6'b000011; 
          6'b001111: data <= 6'b000010; 
          6'b010000: data <= 6'b011101; 
          6'b010001: data <= 6'b011100; 
          6'b010010: data <= 6'b011111; 
          6'b010011: data <= 6'b011110; 
          6'b010100: data <= 6'b011001; 
          6'b010101: data <= 6'b011000; 
          6'b010110: data <= 6'b011011; 
          6'b010111: data <= 6'b011010; 
          6'b011000: data <= 6'b010101; 
          6'b011001: data <= 6'b010100; 
          6'b011010: data <= 6'b010111; 
          6'b011011: data <= 6'b010110; 
          6'b011100: data <= 6'b010001; 
          6'b011101: data <= 6'b010000; 
          6'b011110: data <= 6'b010011; 
          6'b011111: data <= 6'b010010; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem23(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b011101; 
          6'b000001: data <= 6'b011100; 
          6'b000010: data <= 6'b011111; 
          6'b000011: data <= 6'b011110; 
          6'b000100: data <= 6'b011001; 
          6'b000101: data <= 6'b011000; 
          6'b000110: data <= 6'b011011; 
          6'b000111: data <= 6'b011010; 
          6'b001000: data <= 6'b010101; 
          6'b001001: data <= 6'b010100; 
          6'b001010: data <= 6'b010111; 
          6'b001011: data <= 6'b010110; 
          6'b001100: data <= 6'b010001; 
          6'b001101: data <= 6'b010000; 
          6'b001110: data <= 6'b010011; 
          6'b001111: data <= 6'b010010; 
          6'b010000: data <= 6'b001101; 
          6'b010001: data <= 6'b001100; 
          6'b010010: data <= 6'b001111; 
          6'b010011: data <= 6'b001110; 
          6'b010100: data <= 6'b001001; 
          6'b010101: data <= 6'b001000; 
          6'b010110: data <= 6'b001011; 
          6'b010111: data <= 6'b001010; 
          6'b011000: data <= 6'b000101; 
          6'b011001: data <= 6'b000100; 
          6'b011010: data <= 6'b000111; 
          6'b011011: data <= 6'b000110; 
          6'b011100: data <= 6'b000001; 
          6'b011101: data <= 6'b000000; 
          6'b011110: data <= 6'b000011; 
          6'b011111: data <= 6'b000010; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem24(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000011; 
          6'b000001: data <= 6'b000010; 
          6'b000010: data <= 6'b000001; 
          6'b000011: data <= 6'b000000; 
          6'b000100: data <= 6'b000111; 
          6'b000101: data <= 6'b000110; 
          6'b000110: data <= 6'b000101; 
          6'b000111: data <= 6'b000100; 
          6'b001000: data <= 6'b001011; 
          6'b001001: data <= 6'b001010; 
          6'b001010: data <= 6'b001001; 
          6'b001011: data <= 6'b001000; 
          6'b001100: data <= 6'b001111; 
          6'b001101: data <= 6'b001110; 
          6'b001110: data <= 6'b001101; 
          6'b001111: data <= 6'b001100; 
          6'b010000: data <= 6'b010011; 
          6'b010001: data <= 6'b010010; 
          6'b010010: data <= 6'b010001; 
          6'b010011: data <= 6'b010000; 
          6'b010100: data <= 6'b010111; 
          6'b010101: data <= 6'b010110; 
          6'b010110: data <= 6'b010101; 
          6'b010111: data <= 6'b010100; 
          6'b011000: data <= 6'b011011; 
          6'b011001: data <= 6'b011010; 
          6'b011010: data <= 6'b011001; 
          6'b011011: data <= 6'b011000; 
          6'b011100: data <= 6'b011111; 
          6'b011101: data <= 6'b011110; 
          6'b011110: data <= 6'b011101; 
          6'b011111: data <= 6'b011100; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem25(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b010011; 
          6'b000001: data <= 6'b010010; 
          6'b000010: data <= 6'b010001; 
          6'b000011: data <= 6'b010000; 
          6'b000100: data <= 6'b010111; 
          6'b000101: data <= 6'b010110; 
          6'b000110: data <= 6'b010101; 
          6'b000111: data <= 6'b010100; 
          6'b001000: data <= 6'b011011; 
          6'b001001: data <= 6'b011010; 
          6'b001010: data <= 6'b011001; 
          6'b001011: data <= 6'b011000; 
          6'b001100: data <= 6'b011111; 
          6'b001101: data <= 6'b011110; 
          6'b001110: data <= 6'b011101; 
          6'b001111: data <= 6'b011100; 
          6'b010000: data <= 6'b000011; 
          6'b010001: data <= 6'b000010; 
          6'b010010: data <= 6'b000001; 
          6'b010011: data <= 6'b000000; 
          6'b010100: data <= 6'b000111; 
          6'b010101: data <= 6'b000110; 
          6'b010110: data <= 6'b000101; 
          6'b010111: data <= 6'b000100; 
          6'b011000: data <= 6'b001011; 
          6'b011001: data <= 6'b001010; 
          6'b011010: data <= 6'b001001; 
          6'b011011: data <= 6'b001000; 
          6'b011100: data <= 6'b001111; 
          6'b011101: data <= 6'b001110; 
          6'b011110: data <= 6'b001101; 
          6'b011111: data <= 6'b001100; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem26(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b001011; 
          6'b000001: data <= 6'b001010; 
          6'b000010: data <= 6'b001001; 
          6'b000011: data <= 6'b001000; 
          6'b000100: data <= 6'b001111; 
          6'b000101: data <= 6'b001110; 
          6'b000110: data <= 6'b001101; 
          6'b000111: data <= 6'b001100; 
          6'b001000: data <= 6'b000011; 
          6'b001001: data <= 6'b000010; 
          6'b001010: data <= 6'b000001; 
          6'b001011: data <= 6'b000000; 
          6'b001100: data <= 6'b000111; 
          6'b001101: data <= 6'b000110; 
          6'b001110: data <= 6'b000101; 
          6'b001111: data <= 6'b000100; 
          6'b010000: data <= 6'b011011; 
          6'b010001: data <= 6'b011010; 
          6'b010010: data <= 6'b011001; 
          6'b010011: data <= 6'b011000; 
          6'b010100: data <= 6'b011111; 
          6'b010101: data <= 6'b011110; 
          6'b010110: data <= 6'b011101; 
          6'b010111: data <= 6'b011100; 
          6'b011000: data <= 6'b010011; 
          6'b011001: data <= 6'b010010; 
          6'b011010: data <= 6'b010001; 
          6'b011011: data <= 6'b010000; 
          6'b011100: data <= 6'b010111; 
          6'b011101: data <= 6'b010110; 
          6'b011110: data <= 6'b010101; 
          6'b011111: data <= 6'b010100; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem27(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b011011; 
          6'b000001: data <= 6'b011010; 
          6'b000010: data <= 6'b011001; 
          6'b000011: data <= 6'b011000; 
          6'b000100: data <= 6'b011111; 
          6'b000101: data <= 6'b011110; 
          6'b000110: data <= 6'b011101; 
          6'b000111: data <= 6'b011100; 
          6'b001000: data <= 6'b010011; 
          6'b001001: data <= 6'b010010; 
          6'b001010: data <= 6'b010001; 
          6'b001011: data <= 6'b010000; 
          6'b001100: data <= 6'b010111; 
          6'b001101: data <= 6'b010110; 
          6'b001110: data <= 6'b010101; 
          6'b001111: data <= 6'b010100; 
          6'b010000: data <= 6'b001011; 
          6'b010001: data <= 6'b001010; 
          6'b010010: data <= 6'b001001; 
          6'b010011: data <= 6'b001000; 
          6'b010100: data <= 6'b001111; 
          6'b010101: data <= 6'b001110; 
          6'b010110: data <= 6'b001101; 
          6'b010111: data <= 6'b001100; 
          6'b011000: data <= 6'b000011; 
          6'b011001: data <= 6'b000010; 
          6'b011010: data <= 6'b000001; 
          6'b011011: data <= 6'b000000; 
          6'b011100: data <= 6'b000111; 
          6'b011101: data <= 6'b000110; 
          6'b011110: data <= 6'b000101; 
          6'b011111: data <= 6'b000100; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem28(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b000111; 
          6'b000001: data <= 6'b000110; 
          6'b000010: data <= 6'b000101; 
          6'b000011: data <= 6'b000100; 
          6'b000100: data <= 6'b000011; 
          6'b000101: data <= 6'b000010; 
          6'b000110: data <= 6'b000001; 
          6'b000111: data <= 6'b000000; 
          6'b001000: data <= 6'b001111; 
          6'b001001: data <= 6'b001110; 
          6'b001010: data <= 6'b001101; 
          6'b001011: data <= 6'b001100; 
          6'b001100: data <= 6'b001011; 
          6'b001101: data <= 6'b001010; 
          6'b001110: data <= 6'b001001; 
          6'b001111: data <= 6'b001000; 
          6'b010000: data <= 6'b010111; 
          6'b010001: data <= 6'b010110; 
          6'b010010: data <= 6'b010101; 
          6'b010011: data <= 6'b010100; 
          6'b010100: data <= 6'b010011; 
          6'b010101: data <= 6'b010010; 
          6'b010110: data <= 6'b010001; 
          6'b010111: data <= 6'b010000; 
          6'b011000: data <= 6'b011111; 
          6'b011001: data <= 6'b011110; 
          6'b011010: data <= 6'b011101; 
          6'b011011: data <= 6'b011100; 
          6'b011100: data <= 6'b011011; 
          6'b011101: data <= 6'b011010; 
          6'b011110: data <= 6'b011001; 
          6'b011111: data <= 6'b011000; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem29(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b010111; 
          6'b000001: data <= 6'b010110; 
          6'b000010: data <= 6'b010101; 
          6'b000011: data <= 6'b010100; 
          6'b000100: data <= 6'b010011; 
          6'b000101: data <= 6'b010010; 
          6'b000110: data <= 6'b010001; 
          6'b000111: data <= 6'b010000; 
          6'b001000: data <= 6'b011111; 
          6'b001001: data <= 6'b011110; 
          6'b001010: data <= 6'b011101; 
          6'b001011: data <= 6'b011100; 
          6'b001100: data <= 6'b011011; 
          6'b001101: data <= 6'b011010; 
          6'b001110: data <= 6'b011001; 
          6'b001111: data <= 6'b011000; 
          6'b010000: data <= 6'b000111; 
          6'b010001: data <= 6'b000110; 
          6'b010010: data <= 6'b000101; 
          6'b010011: data <= 6'b000100; 
          6'b010100: data <= 6'b000011; 
          6'b010101: data <= 6'b000010; 
          6'b010110: data <= 6'b000001; 
          6'b010111: data <= 6'b000000; 
          6'b011000: data <= 6'b001111; 
          6'b011001: data <= 6'b001110; 
          6'b011010: data <= 6'b001101; 
          6'b011011: data <= 6'b001100; 
          6'b011100: data <= 6'b001011; 
          6'b011101: data <= 6'b001010; 
          6'b011110: data <= 6'b001001; 
          6'b011111: data <= 6'b001000; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem30(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b001111; 
          6'b000001: data <= 6'b001110; 
          6'b000010: data <= 6'b001101; 
          6'b000011: data <= 6'b001100; 
          6'b000100: data <= 6'b001011; 
          6'b000101: data <= 6'b001010; 
          6'b000110: data <= 6'b001001; 
          6'b000111: data <= 6'b001000; 
          6'b001000: data <= 6'b000111; 
          6'b001001: data <= 6'b000110; 
          6'b001010: data <= 6'b000101; 
          6'b001011: data <= 6'b000100; 
          6'b001100: data <= 6'b000011; 
          6'b001101: data <= 6'b000010; 
          6'b001110: data <= 6'b000001; 
          6'b001111: data <= 6'b000000; 
          6'b010000: data <= 6'b011111; 
          6'b010001: data <= 6'b011110; 
          6'b010010: data <= 6'b011101; 
          6'b010011: data <= 6'b011100; 
          6'b010100: data <= 6'b011011; 
          6'b010101: data <= 6'b011010; 
          6'b010110: data <= 6'b011001; 
          6'b010111: data <= 6'b011000; 
          6'b011000: data <= 6'b010111; 
          6'b011001: data <= 6'b010110; 
          6'b011010: data <= 6'b010101; 
          6'b011011: data <= 6'b010100; 
          6'b011100: data <= 6'b010011; 
          6'b011101: data <= 6'b010010; 
          6'b011110: data <= 6'b010001; 
          6'b011111: data <= 6'b010000; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_dp32_mem31(
en,                              
clk,                             
rst,                             
addr,                            
data                             
);                               
  input en, clk, rst;                   
  input [5:0] addr;                        
  output reg [5:0] data;        
  
  // synthesis attribute rom_style of data is "distributed" 
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      data <= 6'b0;    
      end
    else begin                        
      if (en)                           
        case(addr)                        
          6'b000000: data <= 6'b011111; 
          6'b000001: data <= 6'b011110; 
          6'b000010: data <= 6'b011101; 
          6'b000011: data <= 6'b011100; 
          6'b000100: data <= 6'b011011; 
          6'b000101: data <= 6'b011010; 
          6'b000110: data <= 6'b011001; 
          6'b000111: data <= 6'b011000; 
          6'b001000: data <= 6'b010111; 
          6'b001001: data <= 6'b010110; 
          6'b001010: data <= 6'b010101; 
          6'b001011: data <= 6'b010100; 
          6'b001100: data <= 6'b010011; 
          6'b001101: data <= 6'b010010; 
          6'b001110: data <= 6'b010001; 
          6'b001111: data <= 6'b010000; 
          6'b010000: data <= 6'b001111; 
          6'b010001: data <= 6'b001110; 
          6'b010010: data <= 6'b001101; 
          6'b010011: data <= 6'b001100; 
          6'b010100: data <= 6'b001011; 
          6'b010101: data <= 6'b001010; 
          6'b010110: data <= 6'b001001; 
          6'b010111: data <= 6'b001000; 
          6'b011000: data <= 6'b000111; 
          6'b011001: data <= 6'b000110; 
          6'b011010: data <= 6'b000101; 
          6'b011011: data <= 6'b000100; 
          6'b011100: data <= 6'b000011; 
          6'b011101: data <= 6'b000010; 
          6'b011110: data <= 6'b000001; 
          6'b011111: data <= 6'b000000; 
          6'b100000: data <= 6'b000000; 
          6'b100001: data <= 6'b000001; 
          6'b100010: data <= 6'b000010; 
          6'b100011: data <= 6'b000011; 
          6'b100100: data <= 6'b000100; 
          6'b100101: data <= 6'b000101; 
          6'b100110: data <= 6'b000110; 
          6'b100111: data <= 6'b000111; 
          6'b101000: data <= 6'b001000; 
          6'b101001: data <= 6'b001001; 
          6'b101010: data <= 6'b001010; 
          6'b101011: data <= 6'b001011; 
          6'b101100: data <= 6'b001100; 
          6'b101101: data <= 6'b001101; 
          6'b101110: data <= 6'b001110; 
          6'b101111: data <= 6'b001111; 
          6'b110000: data <= 6'b010000; 
          6'b110001: data <= 6'b010001; 
          6'b110010: data <= 6'b010010; 
          6'b110011: data <= 6'b010011; 
          6'b110100: data <= 6'b010100; 
          6'b110101: data <= 6'b010101; 
          6'b110110: data <= 6'b010110; 
          6'b110111: data <= 6'b010111; 
          6'b111000: data <= 6'b011000; 
          6'b111001: data <= 6'b011001; 
          6'b111010: data <= 6'b011010; 
          6'b111011: data <= 6'b011011; 
          6'b111100: data <= 6'b011100; 
          6'b111101: data <= 6'b011101; 
          6'b111110: data <= 6'b011110; 
          6'b111111: data <= 6'b011111; 
          default: data <= 6'b0; 
        endcase
    end
  end                              

endmodule                        


module  s4_addr_rom_ctrl_dp32_per0(
in_start,                          
wen_out,                         
out_start,                         
rom_out_0,                         
rom_out_1,                         
rom_out_2,                         
rom_out_3,                         
rom_out_4,                         
rom_out_5,                         
rom_out_6,                         
rom_out_7,                         
rom_out_8,                         
rom_out_9,                         
rom_out_10,                         
rom_out_11,                         
rom_out_12,                         
rom_out_13,                         
rom_out_14,                         
rom_out_15,                         
rom_out_16,                         
rom_out_17,                         
rom_out_18,                         
rom_out_19,                         
rom_out_20,                         
rom_out_21,                         
rom_out_22,                         
rom_out_23,                         
rom_out_24,                         
rom_out_25,                         
rom_out_26,                         
rom_out_27,                         
rom_out_28,                         
rom_out_29,                         
rom_out_30,                         
rom_out_31,                         
clk,                             
rst                              
);                               
  input in_start, clk, rst;                   
  output [4:0] rom_out_0;            
  output [5:0] rom_out_1;            
  output [5:0] rom_out_2;            
  output [5:0] rom_out_3;            
  output [5:0] rom_out_4;            
  output [5:0] rom_out_5;            
  output [5:0] rom_out_6;            
  output [5:0] rom_out_7;            
  output [5:0] rom_out_8;            
  output [5:0] rom_out_9;            
  output [5:0] rom_out_10;            
  output [5:0] rom_out_11;            
  output [5:0] rom_out_12;            
  output [5:0] rom_out_13;            
  output [5:0] rom_out_14;            
  output [5:0] rom_out_15;            
  output [5:0] rom_out_16;            
  output [5:0] rom_out_17;            
  output [5:0] rom_out_18;            
  output [5:0] rom_out_19;            
  output [5:0] rom_out_20;            
  output [5:0] rom_out_21;            
  output [5:0] rom_out_22;            
  output [5:0] rom_out_23;            
  output [5:0] rom_out_24;            
  output [5:0] rom_out_25;            
  output [5:0] rom_out_26;            
  output [5:0] rom_out_27;            
  output [5:0] rom_out_28;            
  output [5:0] rom_out_29;            
  output [5:0] rom_out_30;            
  output [5:0] rom_out_31;            
  output wen_out;
  output out_start;
  
  /*
  reg [4:0] rom_addr_0;        
  reg [5:0] rom_addr_1;        
  reg [1:0] state;        
  
  s4_addr_rom_dp32_mem0 addr_rom_inst_0(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_0),.data(rom_out_0)); 
  s4_addr_rom_dp32_mem1 addr_rom_inst_1(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_1)); 
  s4_addr_rom_dp32_mem2 addr_rom_inst_2(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_2)); 
  s4_addr_rom_dp32_mem3 addr_rom_inst_3(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_3)); 
  s4_addr_rom_dp32_mem4 addr_rom_inst_4(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_4)); 
  s4_addr_rom_dp32_mem5 addr_rom_inst_5(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_5)); 
  s4_addr_rom_dp32_mem6 addr_rom_inst_6(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_6)); 
  s4_addr_rom_dp32_mem7 addr_rom_inst_7(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_7)); 
  s4_addr_rom_dp32_mem8 addr_rom_inst_8(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_8)); 
  s4_addr_rom_dp32_mem9 addr_rom_inst_9(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_9)); 
  s4_addr_rom_dp32_mem10 addr_rom_inst_10(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_10)); 
  s4_addr_rom_dp32_mem11 addr_rom_inst_11(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_11)); 
  s4_addr_rom_dp32_mem12 addr_rom_inst_12(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_12)); 
  s4_addr_rom_dp32_mem13 addr_rom_inst_13(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_13)); 
  s4_addr_rom_dp32_mem14 addr_rom_inst_14(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_14)); 
  s4_addr_rom_dp32_mem15 addr_rom_inst_15(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_15)); 
  s4_addr_rom_dp32_mem16 addr_rom_inst_16(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_16)); 
  s4_addr_rom_dp32_mem17 addr_rom_inst_17(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_17)); 
  s4_addr_rom_dp32_mem18 addr_rom_inst_18(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_18)); 
  s4_addr_rom_dp32_mem19 addr_rom_inst_19(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_19)); 
  s4_addr_rom_dp32_mem20 addr_rom_inst_20(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_20)); 
  s4_addr_rom_dp32_mem21 addr_rom_inst_21(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_21)); 
  s4_addr_rom_dp32_mem22 addr_rom_inst_22(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_22)); 
  s4_addr_rom_dp32_mem23 addr_rom_inst_23(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_23)); 
  s4_addr_rom_dp32_mem24 addr_rom_inst_24(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_24)); 
  s4_addr_rom_dp32_mem25 addr_rom_inst_25(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_25)); 
  s4_addr_rom_dp32_mem26 addr_rom_inst_26(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_26)); 
  s4_addr_rom_dp32_mem27 addr_rom_inst_27(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_27)); 
  s4_addr_rom_dp32_mem28 addr_rom_inst_28(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_28)); 
  s4_addr_rom_dp32_mem29 addr_rom_inst_29(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_29)); 
  s4_addr_rom_dp32_mem30 addr_rom_inst_30(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_30)); 
  s4_addr_rom_dp32_mem31 addr_rom_inst_31(.en(1'b1),.clk(clk),.rst(rst),.addr(rom_addr_1),.data(rom_out_31)); 
  
  assign wen_out = state[0];        
  assign out_start = (state == 2'b01) && (rom_addr_0[4:0] == {5{1'b0}}); 

  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      rom_addr_0 <= 5'b0;    
      rom_addr_1 <= 6'b0;    
      state <= 1'b0;            
      end
    else begin                        
      case (state)              
        2'b00: begin              
          rom_addr_0 <= 5'b0;   
          rom_addr_1 <= 6'b0;   
          if (in_start)  begin              
            state <= 2'b01;              
            rom_addr_0 <= rom_addr_0 + 1;    
          rom_addr_1 <= rom_addr_1 + 1;    
          end
        end
        2'b01: begin              
          rom_addr_0 <= rom_addr_0 + 1;    
          rom_addr_1 <= rom_addr_1 + 1;    
          if (rom_addr_0 == {5{1'b0}})  begin 
            state <= 2'b11;              
          end
        end
        2'b11: begin              
          rom_addr_0 <= rom_addr_0 + 1;    
          rom_addr_1 <= rom_addr_1 + 1;    
          if (in_start)  begin              
            state <= 2'b01;              
          end
          else if (rom_addr_0 == {5{1'b0}})  begin 
            state <= 2'b00;              
          end
        end
        default: state <= 2'b00;       
      endcase
    end
  end                              
  */

  reg [4:0] offset;
  reg [2:0] state;
  always @ (posedge clk) begin
    if (rst | in_start) begin
      state <= 3'b101;
      offset <= 0;
    end else begin
      if (state != 3'b000) begin
        state <= state - 3'b001;
      end else begin
        offset <= offset + 1'b1;
      end
    end
  end

  assign wen_out = (state == 3'b0);
  assign out_start = (offset == 2);

  assign rom_out_0 = offset;
  assign rom_out_1 = (offset[0] == 1'b0) ? offset + 1'b1 : offset - 1'b1;

  assign rom_out_2 = offset;
  assign rom_out_3 = (offset[0] == 1'b0) ? offset + 1'b1 : offset - 1'b1;

  assign rom_out_4 = offset;
  assign rom_out_5 = (offset[0] == 1'b0) ? offset + 1'b1 : offset - 1'b1;

  assign rom_out_6 = offset;
  assign rom_out_7 = (offset[0] == 1'b0) ? offset + 1'b1 : offset - 1'b1;

  assign rom_out_8 = offset;
  assign rom_out_9 = (offset[0] == 1'b0) ? offset + 1'b1 : offset - 1'b1;

  assign rom_out_10 = offset;
  assign rom_out_11 = (offset[0] == 1'b0) ? offset + 1'b1 : offset - 1'b1;

  assign rom_out_12 = offset;
  assign rom_out_13 = (offset[0] == 1'b0) ? offset + 1'b1 : offset - 1'b1;

  assign rom_out_14 = offset;
  assign rom_out_15 = (offset[0] == 1'b0) ? offset + 1'b1 : offset - 1'b1;

  assign rom_out_16 = offset;
  assign rom_out_17 = (offset[0] == 1'b0) ? offset + 1'b1 : offset - 1'b1;

  assign rom_out_18 = offset;
  assign rom_out_19 = (offset[0] == 1'b0) ? offset + 1'b1 : offset - 1'b1;

  assign rom_out_20 = offset;
  assign rom_out_21 = (offset[0] == 1'b0) ? offset + 1'b1 : offset - 1'b1;

  assign rom_out_22 = offset;
  assign rom_out_23 = (offset[0] == 1'b0) ? offset + 1'b1 : offset - 1'b1;

  assign rom_out_24 = offset;
  assign rom_out_25 = (offset[0] == 1'b0) ? offset + 1'b1 : offset - 1'b1;

  assign rom_out_26 = offset;
  assign rom_out_27 = (offset[0] == 1'b0) ? offset + 1'b1 : offset - 1'b1;

  assign rom_out_28 = offset;
  assign rom_out_29 = (offset[0] == 1'b0) ? offset + 1'b1 : offset - 1'b1;

  assign rom_out_30 = offset;
  assign rom_out_31 = (offset[0] == 1'b0) ? offset + 1'b1 : offset - 1'b1;

endmodule                        


module s4_mem_stage_dp32_r(
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
clk,                             
counter_in,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;                   
  input [5-1:0] counter_in;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output reg [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31;
  output reg out_start; 
  
  wire [DATA_WIDTH-1:0] wire_in [31:0];              
  wire [DATA_WIDTH-1:0] wire_out [31:0];              
  
  wire wen_wire;              
  wire out_start_wire;              
  assign wire_in[0] = inData_0;    
  assign wire_in[1] = inData_1;    
  assign wire_in[2] = inData_2;    
  assign wire_in[3] = inData_3;    
  assign wire_in[4] = inData_4;    
  assign wire_in[5] = inData_5;    
  assign wire_in[6] = inData_6;    
  assign wire_in[7] = inData_7;    
  assign wire_in[8] = inData_8;    
  assign wire_in[9] = inData_9;    
  assign wire_in[10] = inData_10;    
  assign wire_in[11] = inData_11;    
  assign wire_in[12] = inData_12;    
  assign wire_in[13] = inData_13;    
  assign wire_in[14] = inData_14;    
  assign wire_in[15] = inData_15;    
  assign wire_in[16] = inData_16;    
  assign wire_in[17] = inData_17;    
  assign wire_in[18] = inData_18;    
  assign wire_in[19] = inData_19;    
  assign wire_in[20] = inData_20;    
  assign wire_in[21] = inData_21;    
  assign wire_in[22] = inData_22;    
  assign wire_in[23] = inData_23;    
  assign wire_in[24] = inData_24;    
  assign wire_in[25] = inData_25;    
  assign wire_in[26] = inData_26;    
  assign wire_in[27] = inData_27;    
  assign wire_in[28] = inData_28;    
  assign wire_in[29] = inData_29;    
  assign wire_in[30] = inData_30;    
  assign wire_in[31] = inData_31;    
  
  wire [4:0] addr_w_wire_0;        

  wire [4:0] addr_w_wire_1;        

  wire [4:0] addr_w_wire_2;        

  wire [4:0] addr_w_wire_3;        

  wire [4:0] addr_w_wire_4;        

  wire [4:0] addr_w_wire_5;        

  wire [4:0] addr_w_wire_6;        

  wire [4:0] addr_w_wire_7;        

  wire [4:0] addr_w_wire_8;        

  wire [4:0] addr_w_wire_9;        

  wire [4:0] addr_w_wire_10;        

  wire [4:0] addr_w_wire_11;        

  wire [4:0] addr_w_wire_12;        

  wire [4:0] addr_w_wire_13;        

  wire [4:0] addr_w_wire_14;        

  wire [4:0] addr_w_wire_15;        

  wire [4:0] addr_w_wire_16;        

  wire [4:0] addr_w_wire_17;        

  wire [4:0] addr_w_wire_18;        

  wire [4:0] addr_w_wire_19;        

  wire [4:0] addr_w_wire_20;        

  wire [4:0] addr_w_wire_21;        

  wire [4:0] addr_w_wire_22;        

  wire [4:0] addr_w_wire_23;        

  wire [4:0] addr_w_wire_24;        

  wire [4:0] addr_w_wire_25;        

  wire [4:0] addr_w_wire_26;        

  wire [4:0] addr_w_wire_27;        

  wire [4:0] addr_w_wire_28;        

  wire [4:0] addr_w_wire_29;        

  wire [4:0] addr_w_wire_30;        

  wire [4:0] addr_w_wire_31;        

  wire [4:0] addr_r_wire_0;        

  reg [4:0] read_address;

  always @ (posedge clk) begin
    if (rst | in_start) begin
      read_address <= 5'b11111 - 3'b100 - 2'b01 - 1'b1;
    end else begin
      read_address <= read_address + 1'b1;
    end
  end

  assign addr_r_wire_0 = read_address;

  s4_addr_rom_ctrl_dp32_per0 addr_gen_inst(.in_start(in_start), .wen_out(wen_wire), .out_start(out_start_wire), .rom_out_0(addr_w_wire_0), .rom_out_1(addr_w_wire_1), .rom_out_2(addr_w_wire_2), .rom_out_3(addr_w_wire_3), .rom_out_4(addr_w_wire_4), .rom_out_5(addr_w_wire_5), .rom_out_6(addr_w_wire_6), .rom_out_7(addr_w_wire_7), .rom_out_8(addr_w_wire_8), .rom_out_9(addr_w_wire_9), .rom_out_10(addr_w_wire_10), .rom_out_11(addr_w_wire_11), .rom_out_12(addr_w_wire_12), .rom_out_13(addr_w_wire_13), .rom_out_14(addr_w_wire_14), .rom_out_15(addr_w_wire_15), .rom_out_16(addr_w_wire_16), .rom_out_17(addr_w_wire_17), .rom_out_18(addr_w_wire_18), .rom_out_19(addr_w_wire_19), .rom_out_20(addr_w_wire_20), .rom_out_21(addr_w_wire_21), .rom_out_22(addr_w_wire_22), .rom_out_23(addr_w_wire_23), .rom_out_24(addr_w_wire_24), .rom_out_25(addr_w_wire_25), .rom_out_26(addr_w_wire_26), .rom_out_27(addr_w_wire_27), .rom_out_28(addr_w_wire_28), .rom_out_29(addr_w_wire_29), .rom_out_30(addr_w_wire_30), .rom_out_31(addr_w_wire_31), .clk(clk), .rst(rst));

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_0(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_0), .din(wire_in[0]), .dout(wire_out[0]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_1(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_1), .din(wire_in[1]), .dout(wire_out[1]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_2(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_2), .din(wire_in[2]), .dout(wire_out[2]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_3(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_3), .din(wire_in[3]), .dout(wire_out[3]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_4(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_4), .din(wire_in[4]), .dout(wire_out[4]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_5(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_5), .din(wire_in[5]), .dout(wire_out[5]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_6(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_6), .din(wire_in[6]), .dout(wire_out[6]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_7(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_7), .din(wire_in[7]), .dout(wire_out[7]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_8(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_8), .din(wire_in[8]), .dout(wire_out[8]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_9(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_9), .din(wire_in[9]), .dout(wire_out[9]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_10(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_10), .din(wire_in[10]), .dout(wire_out[10]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_11(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_11), .din(wire_in[11]), .dout(wire_out[11]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_12(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_12), .din(wire_in[12]), .dout(wire_out[12]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_13(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_13), .din(wire_in[13]), .dout(wire_out[13]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_14(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_14), .din(wire_in[14]), .dout(wire_out[14]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_15(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_15), .din(wire_in[15]), .dout(wire_out[15]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_16(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_16), .din(wire_in[16]), .dout(wire_out[16]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_17(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_17), .din(wire_in[17]), .dout(wire_out[17]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_18(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_18), .din(wire_in[18]), .dout(wire_out[18]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_19(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_19), .din(wire_in[19]), .dout(wire_out[19]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_20(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_20), .din(wire_in[20]), .dout(wire_out[20]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_21(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_21), .din(wire_in[21]), .dout(wire_out[21]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_22(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_22), .din(wire_in[22]), .dout(wire_out[22]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_23(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_23), .din(wire_in[23]), .dout(wire_out[23]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_24(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_24), .din(wire_in[24]), .dout(wire_out[24]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_25(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_25), .din(wire_in[25]), .dout(wire_out[25]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_26(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_26), .din(wire_in[26]), .dout(wire_out[26]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_27(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_27), .din(wire_in[27]), .dout(wire_out[27]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_28(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_28), .din(wire_in[28]), .dout(wire_out[28]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_29(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_29), .din(wire_in[29]), .dout(wire_out[29]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_30(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_30), .din(wire_in[30]), .dout(wire_out[30]), .clk(clk) );

  block_ram_dp #(.DATA_WIDTH(28), .ADDR_WIDTH(5)) 
         ram_inst_31(.wen(wen_wire), .en(1'b1), .addr_r(addr_r_wire_0), .addr_w(addr_w_wire_31), .din(wire_in[31]), .dout(wire_out[31]), .clk(clk) );

  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      outData_0 <= 0;    
      outData_1 <= 0;    
      outData_2 <= 0;    
      outData_3 <= 0;    
      outData_4 <= 0;    
      outData_5 <= 0;    
      outData_6 <= 0;    
      outData_7 <= 0;    
      outData_8 <= 0;    
      outData_9 <= 0;    
      outData_10 <= 0;    
      outData_11 <= 0;    
      outData_12 <= 0;    
      outData_13 <= 0;    
      outData_14 <= 0;    
      outData_15 <= 0;    
      outData_16 <= 0;    
      outData_17 <= 0;    
      outData_18 <= 0;    
      outData_19 <= 0;    
      outData_20 <= 0;    
      outData_21 <= 0;    
      outData_22 <= 0;    
      outData_23 <= 0;    
      outData_24 <= 0;    
      outData_25 <= 0;    
      outData_26 <= 0;    
      outData_27 <= 0;    
      outData_28 <= 0;    
      outData_29 <= 0;    
      outData_30 <= 0;    
      outData_31 <= 0;    
      out_start <= 1'b0;              
      end
    else begin                        
      outData_0 <= wire_out[0];    
      outData_1 <= wire_out[1];    
      outData_2 <= wire_out[2];    
      outData_3 <= wire_out[3];    
      outData_4 <= wire_out[4];    
      outData_5 <= wire_out[5];    
      outData_6 <= wire_out[6];    
      outData_7 <= wire_out[7];    
      outData_8 <= wire_out[8];    
      outData_9 <= wire_out[9];    
      outData_10 <= wire_out[10];    
      outData_11 <= wire_out[11];    
      outData_12 <= wire_out[12];    
      outData_13 <= wire_out[13];    
      outData_14 <= wire_out[14];    
      outData_15 <= wire_out[15];    
      outData_16 <= wire_out[16];    
      outData_17 <= wire_out[17];    
      outData_18 <= wire_out[18];    
      outData_19 <= wire_out[19];    
      outData_20 <= wire_out[20];    
      outData_21 <= wire_out[21];    
      outData_22 <= wire_out[22];    
      outData_23 <= wire_out[23];    
      outData_24 <= wire_out[24];    
      outData_25 <= wire_out[25];    
      outData_26 <= wire_out[26];    
      outData_27 <= wire_out[27];    
      outData_28 <= wire_out[28];    
      outData_29 <= wire_out[29];    
      outData_30 <= wire_out[30];    
      outData_31 <= wire_out[31];    
      out_start <= out_start_wire;    
      end
  end                              

endmodule                        


module stage_4_permutation (
inData_0,
inData_1,
inData_2,
inData_3,
inData_4,
inData_5,
inData_6,
inData_7,
inData_8,
inData_9,
inData_10,
inData_11,
inData_12,
inData_13,
inData_14,
inData_15,
inData_16,
inData_17,
inData_18,
inData_19,
inData_20,
inData_21,
inData_22,
inData_23,
inData_24,
inData_25,
inData_26,
inData_27,
inData_28,
inData_29,
inData_30,
inData_31,
outData_0,
outData_1,
outData_2,
outData_3,
outData_4,
outData_5,
outData_6,
outData_7,
outData_8,
outData_9,
outData_10,
outData_11,
outData_12,
outData_13,
outData_14,
outData_15,
outData_16,
outData_17,
outData_18,
outData_19,
outData_20,
outData_21,
outData_22,
outData_23,
outData_24,
outData_25,
outData_26,
outData_27,
outData_28,
outData_29,
outData_30,
outData_31,
in_start,                        
out_start,                       
clk,                             
rst                              
);                               
  parameter DATA_WIDTH = 28;                                
  input in_start, clk, rst;        
  input [DATA_WIDTH-1:0] inData_0,
      inData_1,
      inData_2,
      inData_3,
      inData_4,
      inData_5,
      inData_6,
      inData_7,
      inData_8,
      inData_9,
      inData_10,
      inData_11,
      inData_12,
      inData_13,
      inData_14,
      inData_15,
      inData_16,
      inData_17,
      inData_18,
      inData_19,
      inData_20,
      inData_21,
      inData_22,
      inData_23,
      inData_24,
      inData_25,
      inData_26,
      inData_27,
      inData_28,
      inData_29,
      inData_30,
      inData_31;
  output reg [DATA_WIDTH-1:0] outData_0,
      outData_1,
      outData_2,
      outData_3,
      outData_4,
      outData_5,
      outData_6,
      outData_7,
      outData_8,
      outData_9,
      outData_10,
      outData_11,
      outData_12,
      outData_13,
      outData_14,
      outData_15,
      outData_16,
      outData_17,
      outData_18,
      outData_19,
      outData_20,
      outData_21,
      outData_22,
      outData_23,
      outData_24,
      outData_25,
      outData_26,
      outData_27,
      outData_28,
      outData_29,
      outData_30,
      outData_31; 
  output reg out_start; 
  
  wire [DATA_WIDTH-1:0] wireIn [31:0];                  
  wire [DATA_WIDTH-1:0] wireOut [31:0];                 
  wire [DATA_WIDTH-1:0] wireOut_LB [31:0];              
  wire [DATA_WIDTH-1:0] wireIn_RB [31:0];               
  wire out_start_LB;               
  wire out_start_MemStage;               
  wire out_start_RB;               

  wire [4:0] counter_out_w;               
  assign wireIn[0] = inData_0;    
  assign wireIn[1] = inData_1;    
  assign wireIn[2] = inData_2;    
  assign wireIn[3] = inData_3;    
  assign wireIn[4] = inData_4;    
  assign wireIn[5] = inData_5;    
  assign wireIn[6] = inData_6;    
  assign wireIn[7] = inData_7;    
  assign wireIn[8] = inData_8;    
  assign wireIn[9] = inData_9;    
  assign wireIn[10] = inData_10;    
  assign wireIn[11] = inData_11;    
  assign wireIn[12] = inData_12;    
  assign wireIn[13] = inData_13;    
  assign wireIn[14] = inData_14;    
  assign wireIn[15] = inData_15;    
  assign wireIn[16] = inData_16;    
  assign wireIn[17] = inData_17;    
  assign wireIn[18] = inData_18;    
  assign wireIn[19] = inData_19;    
  assign wireIn[20] = inData_20;    
  assign wireIn[21] = inData_21;    
  assign wireIn[22] = inData_22;    
  assign wireIn[23] = inData_23;    
  assign wireIn[24] = inData_24;    
  assign wireIn[25] = inData_25;    
  assign wireIn[26] = inData_26;    
  assign wireIn[27] = inData_27;    
  assign wireIn[28] = inData_28;    
  assign wireIn[29] = inData_29;    
  assign wireIn[30] = inData_30;    
  assign wireIn[31] = inData_31;    
  
  counter_64 ctrl_unit(.in_start(in_start), .counter_out(counter_out_w), .clk(clk), .rst(rst));

  s4_ingressStage_p32 ingressStage_p32_inst(.inData_0(wireIn[0]), .inData_1(wireIn[1]), .inData_2(wireIn[2]), .inData_3(wireIn[3]), .inData_4(wireIn[4]), .inData_5(wireIn[5]), .inData_6(wireIn[6]), .inData_7(wireIn[7]), .inData_8(wireIn[8]), .inData_9(wireIn[9]), .inData_10(wireIn[10]), .inData_11(wireIn[11]), .inData_12(wireIn[12]), .inData_13(wireIn[13]), .inData_14(wireIn[14]), .inData_15(wireIn[15]), .inData_16(wireIn[16]), .inData_17(wireIn[17]), .inData_18(wireIn[18]), .inData_19(wireIn[19]), .inData_20(wireIn[20]), .inData_21(wireIn[21]), .inData_22(wireIn[22]), .inData_23(wireIn[23]), .inData_24(wireIn[24]), .inData_25(wireIn[25]), .inData_26(wireIn[26]), .inData_27(wireIn[27]), .inData_28(wireIn[28]), .inData_29(wireIn[29]), .inData_30(wireIn[30]), .inData_31(wireIn[31]), .outData_0(wireOut_LB[0]), .outData_1(wireOut_LB[1]), .outData_2(wireOut_LB[2]), .outData_3(wireOut_LB[3]), .outData_4(wireOut_LB[4]), .outData_5(wireOut_LB[5]), .outData_6(wireOut_LB[6]), .outData_7(wireOut_LB[7]), .outData_8(wireOut_LB[8]), .outData_9(wireOut_LB[9]), .outData_10(wireOut_LB[10]), .outData_11(wireOut_LB[11]), .outData_12(wireOut_LB[12]), .outData_13(wireOut_LB[13]), .outData_14(wireOut_LB[14]), .outData_15(wireOut_LB[15]), .outData_16(wireOut_LB[16]), .outData_17(wireOut_LB[17]), .outData_18(wireOut_LB[18]), .outData_19(wireOut_LB[19]), .outData_20(wireOut_LB[20]), .outData_21(wireOut_LB[21]), .outData_22(wireOut_LB[22]), .outData_23(wireOut_LB[23]), .outData_24(wireOut_LB[24]), .outData_25(wireOut_LB[25]), .outData_26(wireOut_LB[26]), .outData_27(wireOut_LB[27]), .outData_28(wireOut_LB[28]), .outData_29(wireOut_LB[29]), .outData_30(wireOut_LB[30]), .outData_31(wireOut_LB[31]), .in_start(in_start), .out_start(out_start_LB), .counter_in(counter_out_w), .clk(clk), .rst(rst));
  
  s4_mem_stage_dp32_r mem_stage_dp32_r_inst(.inData_0(wireOut_LB[0]), .inData_1(wireOut_LB[1]), .inData_2(wireOut_LB[2]), .inData_3(wireOut_LB[3]), .inData_4(wireOut_LB[4]), .inData_5(wireOut_LB[5]), .inData_6(wireOut_LB[6]), .inData_7(wireOut_LB[7]), .inData_8(wireOut_LB[8]), .inData_9(wireOut_LB[9]), .inData_10(wireOut_LB[10]), .inData_11(wireOut_LB[11]), .inData_12(wireOut_LB[12]), .inData_13(wireOut_LB[13]), .inData_14(wireOut_LB[14]), .inData_15(wireOut_LB[15]), .inData_16(wireOut_LB[16]), .inData_17(wireOut_LB[17]), .inData_18(wireOut_LB[18]), .inData_19(wireOut_LB[19]), .inData_20(wireOut_LB[20]), .inData_21(wireOut_LB[21]), .inData_22(wireOut_LB[22]), .inData_23(wireOut_LB[23]), .inData_24(wireOut_LB[24]), .inData_25(wireOut_LB[25]), .inData_26(wireOut_LB[26]), .inData_27(wireOut_LB[27]), .inData_28(wireOut_LB[28]), .inData_29(wireOut_LB[29]), .inData_30(wireOut_LB[30]), .inData_31(wireOut_LB[31]), .outData_0(wireIn_RB[0]), .outData_1(wireIn_RB[1]), .outData_2(wireIn_RB[2]), .outData_3(wireIn_RB[3]), .outData_4(wireIn_RB[4]), .outData_5(wireIn_RB[5]), .outData_6(wireIn_RB[6]), .outData_7(wireIn_RB[7]), .outData_8(wireIn_RB[8]), .outData_9(wireIn_RB[9]), .outData_10(wireIn_RB[10]), .outData_11(wireIn_RB[11]), .outData_12(wireIn_RB[12]), .outData_13(wireIn_RB[13]), .outData_14(wireIn_RB[14]), .outData_15(wireIn_RB[15]), .outData_16(wireIn_RB[16]), .outData_17(wireIn_RB[17]), .outData_18(wireIn_RB[18]), .outData_19(wireIn_RB[19]), .outData_20(wireIn_RB[20]), .outData_21(wireIn_RB[21]), .outData_22(wireIn_RB[22]), .outData_23(wireIn_RB[23]), .outData_24(wireIn_RB[24]), .outData_25(wireIn_RB[25]), .outData_26(wireIn_RB[26]), .outData_27(wireIn_RB[27]), .outData_28(wireIn_RB[28]), .outData_29(wireIn_RB[29]), .outData_30(wireIn_RB[30]), .outData_31(wireIn_RB[31]), .in_start(out_start_LB), .out_start(out_start_MemStage), .clk(clk), 
 .counter_in(counter_out_w), .rst(rst));
  
  s4_egressStage_p32 egressStage_p32_inst(.inData_0(wireIn_RB[0]), .inData_1(wireIn_RB[1]), .inData_2(wireIn_RB[2]), .inData_3(wireIn_RB[3]), .inData_4(wireIn_RB[4]), .inData_5(wireIn_RB[5]), .inData_6(wireIn_RB[6]), .inData_7(wireIn_RB[7]), .inData_8(wireIn_RB[8]), .inData_9(wireIn_RB[9]), .inData_10(wireIn_RB[10]), .inData_11(wireIn_RB[11]), .inData_12(wireIn_RB[12]), .inData_13(wireIn_RB[13]), .inData_14(wireIn_RB[14]), .inData_15(wireIn_RB[15]), .inData_16(wireIn_RB[16]), .inData_17(wireIn_RB[17]), .inData_18(wireIn_RB[18]), .inData_19(wireIn_RB[19]), .inData_20(wireIn_RB[20]), .inData_21(wireIn_RB[21]), .inData_22(wireIn_RB[22]), .inData_23(wireIn_RB[23]), .inData_24(wireIn_RB[24]), .inData_25(wireIn_RB[25]), .inData_26(wireIn_RB[26]), .inData_27(wireIn_RB[27]), .inData_28(wireIn_RB[28]), .inData_29(wireIn_RB[29]), .inData_30(wireIn_RB[30]), .inData_31(wireIn_RB[31]), .outData_0(wireOut[0]), .outData_1(wireOut[1]), .outData_2(wireOut[2]), .outData_3(wireOut[3]), .outData_4(wireOut[4]), .outData_5(wireOut[5]), .outData_6(wireOut[6]), .outData_7(wireOut[7]), .outData_8(wireOut[8]), .outData_9(wireOut[9]), .outData_10(wireOut[10]), .outData_11(wireOut[11]), .outData_12(wireOut[12]), .outData_13(wireOut[13]), .outData_14(wireOut[14]), .outData_15(wireOut[15]), .outData_16(wireOut[16]), .outData_17(wireOut[17]), .outData_18(wireOut[18]), .outData_19(wireOut[19]), .outData_20(wireOut[20]), .outData_21(wireOut[21]), .outData_22(wireOut[22]), .outData_23(wireOut[23]), .outData_24(wireOut[24]), .outData_25(wireOut[25]), .outData_26(wireOut[26]), .outData_27(wireOut[27]), .outData_28(wireOut[28]), .outData_29(wireOut[29]), .outData_30(wireOut[30]), .outData_31(wireOut[31]), .in_start(out_start_MemStage), .out_start(out_start_RB), .counter_in(counter_out_w), .clk(clk), .rst(rst));
  
  
  always@(posedge clk)             
  begin                            
    if(rst) begin                    
      outData_0 <= 0;    
      outData_1 <= 0;    
      outData_2 <= 0;    
      outData_3 <= 0;    
      outData_4 <= 0;    
      outData_5 <= 0;    
      outData_6 <= 0;    
      outData_7 <= 0;    
      outData_8 <= 0;    
      outData_9 <= 0;    
      outData_10 <= 0;    
      outData_11 <= 0;    
      outData_12 <= 0;    
      outData_13 <= 0;    
      outData_14 <= 0;    
      outData_15 <= 0;    
      outData_16 <= 0;    
      outData_17 <= 0;    
      outData_18 <= 0;    
      outData_19 <= 0;    
      outData_20 <= 0;    
      outData_21 <= 0;    
      outData_22 <= 0;    
      outData_23 <= 0;    
      outData_24 <= 0;    
      outData_25 <= 0;    
      outData_26 <= 0;    
      outData_27 <= 0;    
      outData_28 <= 0;    
      outData_29 <= 0;    
      outData_30 <= 0;    
      outData_31 <= 0;    
      out_start <= 1'b0;    
      end
    else begin                        
      outData_0 <= wireOut[0];    
      outData_1 <= wireOut[1];    
      outData_2 <= wireOut[2];    
      outData_3 <= wireOut[3];    
      outData_4 <= wireOut[4];    
      outData_5 <= wireOut[5];    
      outData_6 <= wireOut[6];    
      outData_7 <= wireOut[7];    
      outData_8 <= wireOut[8];    
      outData_9 <= wireOut[9];    
      outData_10 <= wireOut[10];    
      outData_11 <= wireOut[11];    
      outData_12 <= wireOut[12];    
      outData_13 <= wireOut[13];    
      outData_14 <= wireOut[14];    
      outData_15 <= wireOut[15];    
      outData_16 <= wireOut[16];    
      outData_17 <= wireOut[17];    
      outData_18 <= wireOut[18];    
      outData_19 <= wireOut[19];    
      outData_20 <= wireOut[20];    
      outData_21 <= wireOut[21];    
      outData_22 <= wireOut[22];    
      outData_23 <= wireOut[23];    
      outData_24 <= wireOut[24];    
      outData_25 <= wireOut[25];    
      outData_26 <= wireOut[26];    
      outData_27 <= wireOut[27];    
      outData_28 <= wireOut[28];    
      outData_29 <= wireOut[29];    
      outData_30 <= wireOut[30];    
      outData_31 <= wireOut[31];    
      out_start <= out_start_RB;    
      end
  end                              

endmodule                        

